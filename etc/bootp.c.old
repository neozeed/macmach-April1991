/* /usr/src/etc/bootp.c
 * use bootp protocol to determine IP address
 * exit 0 if success, 1 if error
 * IP address output to stdout
 * error messages and other noise is output to stderr
 * see [SRI-NIC]<RFC>RFC951.TXT for a description of the bootp protocol
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/udp.h>
#include <arpa/bootp.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <signal.h>
#include <netdb.h>
#include <errno.h>

#include <sys/param.h>
#include <sys/vmmac.h>
#include <sys/file.h>
#include <ctype.h>
#include <nlist.h>
#include <net/if.h>
#include <netinet/in_systm.h>
#include <netinet/in_var.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/if_ether.h>

#define HLEN    6		/* hardware (ethernet) address length */
#define SERVER  "128.2.255.255" /* default server -- BRAODCAST */
#define TIMEOUT 60		/* total seconds to timeout */
#define TIMEONE 5		/* seconds before retry */
#define VMUNIX  "/vmunix"	/* kernel a.out file */
#define KMEM    "/dev/kmem"	/* device to access kernel memory */
#define	N_IFNET 0		/* index to name list */
#define	N_EN    1		/* index to name list */

int debug = 0; /* if non-zero, print debugging information to stderr */

/* convert hardware (ethernet) address to string */
char *haddrtoa(h)
unsigned char *h;
{
  static char haddrbuf[18];
  sprintf(haddrbuf, "%02x:%02x:%02x:%02x:%02x:%02x",
    h[0], h[1], h[2], h[3], h[4], h[5]);
  return (haddrbuf);
}

/* convert string to hardware (ethernet) address */
/* return 0 if success, -1 if error */
int atohaddr(haddr, cp)
unsigned char *haddr;
char *cp;
{
  int i, v;

  for (i = 0; i < HLEN; i++) {
    if (*cp == '.' || *cp == ':' || *cp == '-') cp++;
    if (!isxdigit(cp[0]) || !isxdigit(cp[1])) return -1;
    if (sscanf(cp, "%2x", &v) != 1) return -1;
    cp += 2; 
    haddr[i] = v;
  }
  return 0;
}

/* alarm signal handler */
handler()
{
  if (debug) fprintf(stderr, "ALARM!\n");
  signal(SIGALRM, handler);
}

/* get system hardware (ethernet) address */
/* return 0 if success, -1 if error */
int ghaddr(haddr)
unsigned char *haddr;
{

  int kmem;
  struct arpcom arp;
  struct nlist nl[] = {
    { "_ifnet" },
    { "_en_softc" },
    "",
  };

  /* read name list from kernel a.out file */  
  if (nlist(VMUNIX, nl) < 0 || nl[0].n_type == 0) {
    perror(VMUNIX);
    return -1;
  }

  /* open file to kernel memory */
  if ((kmem = open(KMEM, O_RDONLY)) < 0) {
    perror(KMEM);
    return -1;
  }

  /* seek to the right address */
  if (lseek(kmem, nl[N_EN].n_value, 0) < 0) {
    perror(KMEM);
    return -1;
  }

  /* read arp information from kernel memory */
  if (read(kmem, &arp, sizeof(arp)) != sizeof(arp)) {
    perror(KMEM);
    return -1;
  }

  /* done reading kernel memory */
  close(kmem);

  /* copy hardware address into return parameter */
  if (debug) fprintf(stderr, "haddr: %s\n", haddrtoa(arp.ac_enaddr));
  bcopy(arp.ac_enaddr, haddr, sizeof(arp.ac_enaddr));

  /* all done, no error */
  return 0;

}

/* send bootp request to server and get reply */
/* return 0 if success, -1 if error */
int bootp(server, haddr, reply)
unsigned long server; /* server IP address, maybe BROADCAST */
unsigned char *haddr; /* this system's hardware address */
struct bootp *reply;  /* bootp reply return parameter */
{  

  extern int errno;			/* system call error number */

  struct sockaddr_in client_addr;	/* client internet address */
  struct sockaddr_in server_addr;	/* server internet address */
  struct servent *sp;			/* for getservbyname() */
  int s;				/* regular socket */
  int raws;				/* raw socket (for BROADCAST) */
  struct sockaddr_in from;		/* "from" address for recvfrom() */
  int fromlen = sizeof(from);		/* length of "from" address */
  struct {
    struct udphdr udphdr;		/* udp header */
    struct bootp bootp;			/* bootp contents */
  } request;				/* request packet */
  long start_time;			/* starting time (seconds) */

  /* set up the server internet address */
  bzero((char *)&server_addr, sizeof(struct sockaddr_in));
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = server;
#ifdef IPPORT_BOOTPS
  server_addr.sin_port = IPPORT_BOOTPS;
#else
  if ((sp = getservbyname("bootps", "udp")) == NULL) {
    perror("bootp");
    fprintf(stderr, "can not find bootps in /etc/services\n");
    return -1;
  }
  server_addr.sin_port = sp->s_port;
#endif
  if (debug) fprintf(stderr, "using server port %d\n", server_addr.sin_port);

  /* set up the client internet address */
  bzero((char *)&client_addr, sizeof(struct sockaddr_in));
  client_addr.sin_family = AF_INET;
  client_addr.sin_addr.s_addr = INADDR_ANY;
#ifdef IPPORT_BOOTPC
  client_addr.sin_port = IPPORT_BOOTPC;
#else
  if ((sp = getservbyname("bootpc", "udp")) == NULL) {
    perror("bootp");
    fprintf(stderr, "can not find bootpc in /etc/services\n");
    return -1;
  }
  client_addr.sin_port = sp->s_port;
#endif
  if (debug) fprintf(stderr, "using client port %d\n", client_addr.sin_port);

  /* open a regular datagram socket */
  if ((s = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
    perror("bootp");
    fprintf(stderr, "can not create internet datagram socket\n");
    return -1;
  }
  else if (debug) fprintf(stderr, "internet datagram socket created\n");

  /* bind client address to datagram socket for recvfrom() */
  if (bind(s, (struct sockaddr *)&client_addr, sizeof(struct sockaddr_in)) == -1) {
    perror("bootp");
    fprintf(stderr, "can not bind reciever socket\n");
    close(s);
    return -1;
  }
  else if (debug) fprintf(stderr, "bind of reciever socket succeeded\n");

  /* open a raw socket (raw in case of BROADCAST) */
  if ((raws = socket(AF_INET, SOCK_RAW, IPPROTO_UDP)) == -1) {
    perror("bootp");
    fprintf(stderr, "can not create raw socket\n");
    close(s);
    return -1;
  }
  else if (debug) fprintf(stderr, "raw IP socket created\n");

  /* get the current time and set up the random number generator */
  srandom(time(&start_time) * getpid());

  /* fill in non-zero parts of request packet */
  bzero((char *)&request, sizeof(request));
  request.udphdr.uh_sport = client_addr.sin_port;
  request.udphdr.uh_dport = server_addr.sin_port;
  request.udphdr.uh_ulen = sizeof(struct bootp) + sizeof(struct udphdr);
  request.bootp.bp_op = BOOTREQUEST;
  request.bootp.bp_htype = 1;
  request.bootp.bp_hlen = HLEN;
  request.bootp.bp_xid = random();
  bcopy(haddr, request.bootp.bp_chaddr, sizeof(request.bootp.bp_chaddr));

  /* prepare to handle alarm signals */
  signal(SIGALRM, handler);

  /* loop until packet recieved, error or timeout */
  while ((request.bootp.bp_secs = time(0) - start_time) < TIMEOUT) {

    /* send request packet */
    if (sendto(raws,
        &request, request.udphdr.uh_ulen,
        0,
        (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) {
      perror("bootp");
      fprintf(stderr, "unable to send bootp request packet\n");
      signal(SIGALRM, SIG_IGN);
      close(s);
      close(raws);
      return -1;
    }
    else if (debug) fprintf(stderr, "sent bootp request packet\n");

    /* set retry alarm */    
    alarm(TIMEONE);

    /* recieve reply packet */
    bzero((char *)reply, sizeof(reply));
    if (recvfrom(s,
        reply, sizeof(*reply),
        0,
        (struct sockaddr *)&from, &fromlen) == -1) {
      /* error is EINTR if alarm went off before packet recieved */
      if (errno != EINTR) {
        perror("bootp");
        fprintf(stderr, "can not recieve reply packet\n");
        signal(SIGALRM, SIG_IGN);
        close(s);
        close(raws);
        return -1;
      }
    }
    /* packet recieved, make sure it is the right one */
    else if (reply->bp_op == BOOTREPLY &&
        reply->bp_xid == request.bootp.bp_xid &&
        !bcmp(request.bootp.bp_chaddr, reply->bp_chaddr, HLEN)){
      if (debug) {
        fprintf(stderr, "reply packet recieved\n");
        fprintf(stderr, "  yiaddr: %s\n", inet_ntoa(reply->bp_yiaddr));
        fprintf(stderr, "  siaddr: %s\n", inet_ntoa(reply->bp_siaddr));
      }
      signal(SIGALRM, SIG_IGN);
      close(s);
      close(raws);
      return 0;
    }
    else if (debug) {
      fprintf(stderr, "other packet recieved:\n");
      fprintf(stderr, " bp_op = %d (wanted %d)\n",
        reply->bp_op, BOOTREPLY);
      fprintf(stderr, " bp_xid = %d (wanted %d)\n",
        reply->bp_xid, request.bootp.bp_xid);
      fprintf(stderr, " bp_chaddr = %s (wanted %s)\n",
        haddrtoa(reply->bp_xid), haddrtoa(request.bootp.bp_chaddr));
    }
  }

  /* loop exit -- timed out */
  fprintf(stderr, "bootp: timed out\n");
  signal(SIGALRM, SIG_IGN);
  close(s);
  close(raws);
  return -1;

}

/* use bootp protocol to determine IP address */
/* exit 0 if success, 1 if error */
/* IP address output to stdout */
/* error messages and other noise is output to stderr */
main(argc,argv)
int argc;
char **argv;
{

  int ch;
  extern int getopt();
  extern char *optarg;
  unsigned long server = inet_addr(SERVER);
  unsigned char haddr[HLEN];
  struct hostent *hp;
  int need_haddr = 1;
  int all = 0;
  int verbose = 0;
  struct bootp reply;

  /* parse command line options */
  while ((ch = getopt(argc, argv, "vds:e:a")) != EOF) switch ((char)ch) {
    case 'v':
      verbose++;
      break;
    case 'd':
      debug++;
      break;
    case 's':
      if (isdigit(*optarg)) {
      	if ((server = inet_addr(optarg)) == -1 || server == 0) {
      	  fprintf(stderr, "bootp: bad server address\n");
      	  exit(1);
      	}
      }
      else if (!(hp = gethostbyname(optarg))) {
      	fprintf(stderr, "bootp: unknown server host\n");
      	exit(1);
      }
      else server = ((struct in_addr *)(hp->h_addr))->s_addr;
      break;
    case 'e':
      if (atohaddr(haddr, optarg)) {
      	fprintf(stderr, "bootp: bad ethernet address\n");
      	exit(1);
      }
      else need_haddr = 0;
      break;
    case 'a':
      all++;
      break;
    default:
      fprintf(stderr, "usage: bootp [-d] [-s server] [-e address ] [-a]\n");
      exit(1);
  }

  if (verbose) fprintf(stderr, "bootp: version 1.0\n");

  /* determine hardware (ethernet) address */
  if (need_haddr) {
    if (ghaddr(haddr)) {
      fprintf(stderr, "bootp: could not determine hardware address\n");
      exit(1);
    }
  }

  if (verbose) {
    fprintf(stderr, "bootp: hardware address is %s\n", haddrtoa(haddr));
    fprintf(stderr, "bootp: sending request to %s\n", inet_ntoa(server));
  }

  /* make a bootp request */
  if (bootp(server, haddr, &reply)) {
    fprintf(stderr, "bootp: could not get reply\n");
    exit(1);
  }

  if (verbose) {
    if (*reply.bp_sname) fprintf(stderr, "boot: reply recieved from %s(%s)\n",
      reply.bp_sname, inet_ntoa(reply.bp_siaddr));
    else fprintf(stderr, "boot: reply recieved from %s\n",
      inet_ntoa(reply.bp_siaddr));
    fprintf(stderr, "IPADDRESS = \"%s\"\n", inet_ntoa(reply.bp_yiaddr));
    if (all) {
      fprintf(stderr, "  SERVER    = \"%s\"\n",
        reply.bp_sname[0] ? reply.bp_sname : inet_ntoa(reply.bp_siaddr));
      fprintf(stderr, "  GATEWAY   = \"%s\"\n", inet_ntoa(reply.bp_giaddr));
      fprintf(stderr, "  BOOTFILE  = \"%s\"\n", reply.bp_file);
    }
  }

  /* output the IP address or, of "-a", a line of shell variable assignments */
  if (!all) puts(inet_ntoa(reply.bp_yiaddr));
  else printf("IPADDRESS=\"%s\"; SERVER=\"%s\"; GATEWAY=\"%s\"; BOOTFILE=\"%s\"\n",
    inet_ntoa(reply.bp_yiaddr),
      reply.bp_sname[0] ? reply.bp_sname : inet_ntoa(reply.bp_siaddr),
    inet_ntoa(reply.bp_giaddr),
    reply.bp_file);

  /* all done, exit 0 to indicate success */
  exit(0);

}
