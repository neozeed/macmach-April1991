.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1991 Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmLabel 3X "" "" "" ""
.SH NAME
\fBXmLabel \(em the Label widget class.\fP
.iX "XmLabel"
.iX "widget class" "Label"
.sp 1
.SH SYNOPSIS
\fB#include <Xm/Label.h>\fP
.sp 1
.SH DESCRIPTION
Label is an instantiable widget and is also used as a superclass for
other button widgets, such as PushButton and ToggleButton.  The Label
widget does not accept any button or key input, and the help
callback is the only callback defined.  Label also receives enter
and leave events.
.PP
Label can contain either text or a pixmap.  Label text is a
compound string.  Refer to the \fIOSF/Motif Programmer's 
Guide\fP for more information on compound strings.
The text can be multilingual,
multiline, and/or multifont.  When a Label is insensitive, its text is
stippled, or the user-supplied insensitive pixmap is displayed.
.PP
Label supports both accelerators and mnemonics primarily for use in
Label subclass widgets that are contained in menus.
Mnemonics are available in a menu system when the button is visible.
Accelerators in a menu system are accessible even when the button is not
visible.
The Label widget displays the mnemonic by underlining the first matching
character in the text string.
The accelerator is displayed
as a text string to the side of the label text or pixmap.
.PP
Label consists of many margin fields surrounding the text or pixmap.
These margin fields are resources that may
be set by the user, but Label subclasses also modify some of these fields.
The subclasses tend to modify the \fBXmNmarginLeft\fP, 
\fBXmNmarginRight\fP, \fBXmNmarginTop\fP, and \fBXmNmarginBottom\fP
resources and leave the \fBXmNmarginWidth\fP and \fBXmNmarginHeight\fP 
resources as set by the application.
.PP
In a Label \fBXmNtraversalOn\fP and \fBXmNhighlightOnEnter\fP are forced
to False inside Popup MenuPanes, Pulldown MenuPanes, and OptionMenus.
Otherwise these resources default to False.
.sp 1
.SS "Classes"
Label inherits behavior and resources from 
\fBCore\fP and \fBXmPrimitive\fP Classes.
.PP
The class pointer is \fBxmLabelWidgetClass\fP.
.PP
The class name is \fBXmLabel\fP.
.sp 1
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the 
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \fBXmN\fP or
\fBXmC\fP prefix and use the remaining letters.  To specify one of the defined 
values for a resource in a .Xdefaults file, remove the \fBXm\fP prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (\fBC\fP),
set by using \fBXtSetValues\fP (\fBS\fP), 
retrieved by using \fBXtGetValues\fP (\fBG\fP), 
or is not applicable (\fBN/A\fP).
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmLabel Resource Set
Name	Class	Type	Default	Access
_
XmNaccelerator	XmCAccelerator	String	NULL	CSG
XmNacceleratorText	XmCAcceleratorText	XmString	NULL	CSG
XmNalignment	XmCAlignment	unsigned char	dynamic	CSG
XmNfontList	XmCFontList	XmFontList	dynamic	CSG
XmNlabelInsensitivePixmap	XmCLabelInsensitivePixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNlabelPixmap	XmCLabelPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNlabelString	XmCXmString	XmString	dynamic	CSG
XmNlabelType	XmCLabelType	unsigned char	XmSTRING	CSG
XmNmarginBottom	XmCMarginBottom	Dimension	0	CSG
XmNmarginHeight	XmCMarginHeight	Dimension	2	CSG
XmNmarginLeft	XmCMarginLeft	Dimension	0	CSG
XmNmarginRight	XmCMarginRight	Dimension	0	CSG
XmNmarginTop	XmCMarginTop	Dimension	0	CSG
XmNmarginWidth	XmCMarginWidth	Dimension	2	CSG
.tH
XmNmnemonic	XmCMnemonic	KeySym	NULL	CSG
XmNmnemonicCharSet	XmCMnemonicCharSet	String	dynamic	CSG
XmNrecomputeSize	XmCRecomputeSize	Boolean	True	CSG
XmNstringDirection	XmCStringDirection	XmStringDirection	dynamic	CSG
.TE
.in
.sp 1
.IP "\fBXmNaccelerator\fP"
Sets the accelerator on a button widget in a menu, which 
activates a visible or invisible button from the keyboard.
This resource is a string that describes a set of modifiers
and the key that may be used to select the button.
The format of this string
is identical to that used by the translations manager, with the exception
that only a single event may be specified and only \fBKeyPress\fP events are
allowed.
.IP
Accelerators for buttons are supported only for
PushButton and ToggleButton in Pulldown and Popup MenuPanes.
.IP "\fBXmNacceleratorText\fP"
Specifies the text displayed
for the accelerator.
The text is displayed to the side of the label
string or pixmap.
Accelerator text for buttons is displayed only for 
PushButtons and ToggleButtons in Pulldown and Popup Menus.
.IP "\fBXmNalignment\fP"
Specifies the label alignment for text or pixmap.
.RS
.IP \(bu 3
\fBXmALIGNMENT_BEGINNING\fP (left alignment) \(em
causes the left sides of the lines of text to be vertically 
aligned with the
left edge of the widget window.  For a pixmap, its left side is vertically
aligned with the left edge of the widget window.
\fBXmALIGNMENT_CENTER\fP (center alignment) \(em
causes the centers of the lines of text to be vertically aligned 
.ne 5
in the center of the widget window.  For a pixmap, its center is vertically aligned with the
center of the widget window.
.IP \(bu 3
\fBXmALIGNMENT_END\fP (right alignment) \(em
causes the right sides of the lines of text to be vertically aligned with the
right edge of the widget window.  For a pixmap, its right side is vertically 
aligned with the right edge of the widget window.
.RE
.IP
The above descriptions for text are correct when \fBXmNstringDirection\fP is
\fBXmSTRING_DIRECTION_L_TO_R\fP.  When that resource is 
\fBXmSTRING_DIRECTION_R_TO_L\fP, the descriptions for 
\fBXmALIGNMENT_BEGINNING\fP and \fBXmALIGNMENT_END\fP are switched.
.IP
If the parent is a RowColumn whose \fBXmNisAligned\fP resource is True,
\fBXmNalignment\fP is forced to the same value as the RowColumn's
\fBXmNentryAlignment\fP if the RowColumn's \fBXmNrowColumnType\fP is
\fBXmWORK_AREA\fP or if the widget is a subclass of XmLabel.
Otherwise, the default is \fBXmALIGNMENT_CENTER\fP.
.IP "\fBXmNfontList\fP"
Specifies the font of the text used in the
widget.  If this value is NULL at initialization, it is initialized by
looking up the parent hierarchy of the widget for an ancestor that is a
subclass of the XmBulletinBoard, VendorShell, or XmMenuShell widget class.
If such an ancestor is found, the font list is initialized to the appropriate
default font list of the ancestor widget (XmNdefaultFontList for VendorShell
and XmMenuShell, XmNlabelFontList or XmNbuttonFontList for XmBulletinBoard).
Refer to \fBXmFontList(3X)\fP for more information on the creation
and structure of a font list.
.IP "\fBXmNlabelInsensitivePixmap\fP"
Specifies a pixmap used as the button face if \fBXmNlabelType\fP is 
\fBXmPIXMAP\fP and the button is insensitive.
.IP "\fBXmNlabelPixmap \fP"
Specifies the pixmap when \fBXmNlabelType\fP is
\fBXmPIXMAP\fP.
.IP "\fBXmNlabelString\fP"
Specifies the compound string when the \fBXmNlabelType\fP is
\fBXmSTRING\fP.
If this value is NULL, it is initialized by converting the name 
of the widget to a compound string.
Refer to \fBXmString(3X)\fP
for more information on the
creation and structure of compound strings.
.IP "\fBXmNlabelType\fP"
Specifies the label type.
.RS
.IP \(bu 3
\fBXmSTRING\fP \(em text displays \fBXmNlabelString\fP.
.IP \(bu 3
\fBXmPIXMAP\fP \(em icon data in pixmap displays \fBXmNlabelPixmap\fP or
\fBXmNlabelInsensitivePixmap\fP.
.RE
.IP "\fBXmNmarginBottom\fP"
Specifies the amount of spacing
between the bottom of the label text and the top of the bottom margin
(specified by \fBXmNmarginHeight\fP).
This may be modified by Label's
subclasses.  For example, CascadeButton may increase this field to make
room for the cascade pixmap.
.IP "\fBXmNmarginHeight\fP"
Specifies the amount of spacing
between the top of the label (specified by \fBXmNmarginTop\fP) and the
bottom edge of the top shadow, and the amount of spacing between the
bottom of the label (specified by \fBXmNmarginBottom\fP) and the top
edge of the bottom shadow.
.IP "\fBXmNmarginLeft\fP"
Specifies the amount of spacing
between the left edge of the label text and the right side of the left
margin (specified by \fBXmNmarginWidth\fP).
This may be modified by Label's
subclasses.  For example, ToggleButton may increase this field to make room
for the toggle indicator and for spacing between the indicator and label.
Whether this actually applies to the left or right side of the label may
depend on the value of \fBXmNstringDirection\fP.
.IP "\fBXmNmarginRight\fP"
Specifies the amount of spacing
between the right edge of the label text and the left side of the right
margin (specified by \fBXmNmarginWidth\fP).
This may be modified by Label's
subclasses.  For example, CascadeButton may increase this field to make room
for the cascade pixmap.
Whether this actually applies to the left or right side of the label may
depend on the value of \fBXmNstringDirection\fP.
.br
.ne 6
.IP "\fBXmNmarginTop\fP"
Specifies the  amount of spacing
between the top of the label text and the bottom of the top margin
(specified by \fBXmNmarginHeight\fP).
This may be modified by Label's
subclasses.  For example, CascadeButton may increase this field to make room
for the cascade pixmap.
.IP "\fBXmNmarginWidth\fP"
Specifies the amount of spacing
between the left side of the label (specified by \fBXmNmarginLeft\fP)
and the right edge of the left shadow, and the amount of spacing between
the right side of the label (specified by \fBXmNmarginRight\fP) and the
left edge of the right shadow.
.IP "\fBXmNmnemonic\fP"
Provides the user with an alternate means of selecting a button.
A button in a MenuBar, a Popup MenuPane, or a Pulldown
MenuPane can have a mnemonic. 
.IP
This resource contains a keysym as listed in the X11 keysym table.
The first character in the label string that exactly matches
the mnemonic in the character set specified in
\fBXmNmnemonicCharSet\fP
is underlined when the button is displayed.
.IP
When a mnemonic has been specified, the user activates the button by
pressing the mnemonic key while the button is visible.
If the button is a CascadeButton in a MenuBar and the MenuBar does not
have the focus, the user must use the \fBMAlt\fP modifier while
pressing the mnemonic.
The user can activate the button by pressing either the shifted or the
unshifted mnemonic key.
.IP "\fBXmNmnemonicCharSet\fP"
Specifies the character set of the mnemonic for the label.
The default is determined dynamically depending on the current language
environment.
.br
.ne 15
.IP "\fBXmNrecomputeSize\fP"
Specifies a Boolean value that indicates whether the widget attempts to
be big enough to contain the label.
If True, an \fBXtSetValues\fP with a resource value that would change
the size of the widget causes the widget to shrink or expand to exactly
fit the label string or pixmap.
If False, the widget never attempts to change size on its own.
.IP "\fBXmNstringDirection\fP"
Specifies the direction in which the string is to be drawn.  The 
following are the values:
.RS
.IP \(bu 3
\fBXmSTRING_DIRECTION_L_TO_R\fP \(em left to right 
.IP \(bu 3
\fBXmSTRING_DIRECTION_R_TO_L\fP \(em right to left
.RE
.P
The default for this resource is determined at creation time.
If no value is specified for this resource and the widget's parent is a
manager, the value is inherited from the parent; otherwise, it defaults
to \fBXmSTRING_DIRECTION_L_TO_R\fP.
.sp 1
.SS "Inherited Resources"
Label inherits behavior and resources from the following   
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmPrimitive Resource Set
Name	Class	Type	Default	Access
_
XmNbottomShadowColor	XmCBottomShadowColor	Pixel	dynamic	CSG
XmNbottomShadowPixmap	XmCBottomShadowPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNforeground	XmCForeground	Pixel	dynamic	CSG
XmNhelpCallback	XmCCallback	XtCallbackList	NULL	C
XmNhighlightColor	XmCHighlightColor	Pixel	dynamic	CSG
XmNhighlightOnEnter	XmCHighlightOnEnter	Boolean	False	CSG
XmNhighlightPixmap	XmCHighlightPixmap	Pixmap	dynamic	CSG
XmNhighlightThickness	XmCHighlightThickness	Dimension	0	CSG
.tH
XmNnavigationType	XmCNavigationType	XmNavigationType	XmNONE	G
XmNshadowThickness	XmCShadowThickness	Dimension	0	CSG
XmNtopShadowColor	XmCTopShadowColor	Pixel	dynamic	CSG
XmNtopShadowPixmap	XmCTopShadowPixmap	Pixmap	dynamic	CSG
XmNtraversalOn	XmCTraversalOn	Boolean	False	CSG
XmNunitType	XmCUnitType	unsigned char	dynamic	CSG
XmNuserData	XmCUserData	Pointer	NULL	CSG
.TE
.in
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
Core Resource Set 
Name	Class	Type	Default	Access
_
XmNaccelerators	XmCAccelerators	XtAccelerators	dynamic	CSG
XmNancestorSensitive	XmCSensitive	Boolean	dynamic	G
XmNbackground	XmCBackground	Pixel	dynamic	CSG
XmNbackgroundPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderColor	XmCBorderColor	Pixel	XtDefaultForeground	CSG
XmNborderPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderWidth	XmCBorderWidth	Dimension	0	CSG
XmNcolormap	XmCColormap	Colormap	dynamic	CG
XmNdepth	XmCDepth	int	dynamic	CG
XmNdestroyCallback	XmCCallback	XtCallbackList	NULL	C
XmNheight	XmCHeight	Dimension	dynamic	CSG
XmNinitialResourcesPersistent	XmCInitialResourcesPersistent	Boolean	True	C
XmNmappedWhenManaged	XmCMappedWhenManaged	Boolean	True	CSG
XmNscreen	XmCScreen	Screen *	dynamic	CG
.tH
XmNsensitive	XmCSensitive	Boolean	True	CSG
XmNtranslations	XmCTranslations	XtTranslations	dynamic	CSG
XmNwidth	XmCWidth	Dimension	dynamic	CSG
XmNx	XmCPosition	Position	0	CSG
XmNy	XmCPosition	Position	0	CSG
.TE
.in
.sp 1
.br
.ne 10
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sp 1
.nf
.ta .25i 1.50i
\fBtypedef struct\fP
{
	\fBint\fP	\fIreason\fP;
	\fBXEvent	\fI* event\fP;
} \fBXmAnyCallbackStruct\fP;
.fi
.fi
.sp 1
.IP "\fIreason\fP" .75i
Indicates why the callback was invoked.
For this callback, \fIreason\fP is set to \fBXmCR_HELP\fP.
.IP "\fIevent\fP" .75i
Points to the \fBXEvent\fP that triggered the callback.
.br
.ne 7
.sp 1 \"Adds space before the SS
.br
.ne 15
.SS "Translations"
XmLabel includes translations from Primitive.
The XmLabel translations are listed below.
These translations may not directly correspond to a
translation table.
\fB
.nf
.ta 1.5i
.sp .5
KHelp:	Help()
.fi
\fP
The translations used by subclasses of XmLabel for menu
traversal are listed below.
These translations may not directly correspond to a
translation table.
\fB
.nf
.ta 1.5i
.sp .5
KLeft:	MenuTraverseLeft()
KRight:	MenuTraverseRight()
KUp:	MenuTraverseUp()
KDown:	MenuTraverseDown()
MAny KCancel:	MenuEscape()
.fi
\fP
.sp 1 \"Adds space before the SS
.SS "Action Routines"
The XmLabel action routines are described below:
.IP "\fBHelp()\fP:"
In a Popup or Pulldown MenuPane, unposts all menus in the menu hierarchy
and, when the shell's keyboard focus policy is \fBXmEXPLICIT\fP,
restores keyboard focus to the tab group that had the focus before the
menu system was entered.
Calls the callbacks for \fBXmNhelpCallback\fP if any exist.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.IP "\fBMenuEscape()\fP:"
In a MenuBar, disarms the CascadeButton and the menu and, when the
shell's keyboard focus policy is \fBXmEXPLICIT\fP, restores keyboard
focus to the tab group that had the focus before the menu was entered.
.br
.ne 15
.IP
In a toplevel Pulldown MenuPane from a MenuBar, unposts the menu,
disarms the MenuBar CascadeButton and the MenuBar, and, when the shell's
keyboard focus policy is \fBXmEXPLICIT\fP, restores keyboard focus to
the tab group that had the focus before the MenuBar was entered.
In other Pulldown MenuPanes, unposts the menu.
.IP
In a Popup MenuPane, unposts the menu and, when the shell's keyboard
focus policy is \fBXmEXPLICIT\fP, restores keyboard focus to the widget
from which the menu was posted.
.IP "\fBMenuTraverseDown()\fP:"
In a vertical menu, disarms the current menu entry and arms the entry
just below it in the MenuPane.
This action wraps within the MenuPane.
.IP
In a horizontal menu, if the menu entry is a CascadeButton with a
submenu, posts the MenuPane associated with the CascadeButton.
Otherwise, this action searches for an ancestor menu that is vertical.
If it finds one, it unposts the cascade from the vertical menu and
traverses to the next entry toward the bottom in the vertical menu.
If this entry is a CascadeButton with a submenu, posts the MenuPane
associated with the CascadeButton.
This action wraps within the vertical menu.
.IP "\fBMenuTraverseLeft()\fP:"
In a vertical menu, if the menu's parent is a horizontal menu, this
action unposts the current MenuPane and traverses to the next entry to
the left in the parent menu.
If this entry is a CascadeButton with a submenu, posts the MenuPane
associated with the CascadeButton.
This action wraps within the horizontal menu.
If the menu's parent is a vertical menu, this action unposts the current
MenuPane.
.IP
In a horizontal menu, disarms the current menu entry and arms the entry
just to the left of it in the menu.
This action wraps within the menu.
.br
.ne 5
.IP "\fBMenuTraverseRight()\fP:"
In a vertical menu, if the menu entry is a CascadeButton with a submenu,
posts the MenuPane associated with the CascadeButton.
Otherwise, this action searches for an ancestor menu that is horizontal.
If it finds one, it unposts the cascade from the horizontal menu and
traverses to the next entry to the right in the horizontal menu.
If this entry is \pa 
.br
.ne 3
CascadeButton with a submenu, posts the MenuPane
associated with the CascadeButton.
This action wraps within the horizontal menu.
.IP
In a horizontal menu, disarms the current menu entry and arms the entry
just to the right of it in the menu.
This action wraps within the menu.
.IP "\fBMenuTraverseUp()\fP:"
In a vertical menu, disarms the current menu entry and arms the entry
just above it in the MenuPane.
This action wraps within the MenuPane.
.IP
In a horizontal menu, if the menu's parent is a vertical menu,
this action unposts the current MenuPane and traverses to the next
entry toward the top in the parent menu.
If this entry is a CascadeButton with a submenu, posts the MenuPane
associated with the CascadeButton.
This action wraps within the vertical menu.
If the menu's parent is a horizontal menu, this action unposts the
current MenuPane.
.sp 1 \"Adds space before the SS
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \fBVirtualBindings(3X)\fP.
.SH RELATED INFORMATION
\fBCore(3X)\fP, \fBXmCreateLabel(3X)\fP,
\fBXmFontListCreate(3X)\fP,
\fBXmStringCreate(3X)\fP,
\fBXmStringCreateLtoR(3X)\fP
and \fBXmPrimitive(3X)\fP.
