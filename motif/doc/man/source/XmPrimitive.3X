.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1991 Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmPrimitive 3X "" "" "" ""
.SH NAME
\fBXmPrimitive \(em the Primitive widget class.\fP
.iX "XmPrimitive"
.iX "widget class" "Primitive"
.sp 1
.SH SYNOPSIS
\fB#include <Xm/Xm.h>\fP
.sp 1
.SH DESCRIPTION
Primitive is a widget class used as a supporting superclass
for other widget classes.  It handles border drawing and highlighting, 
traversal activation and deactivation, and various callback lists needed by
Primitive widgets.
.sp 1
.SS "Classes"
Primitive inherits behavior and resources from \fBCore\fP class.
.PP
The class pointer is \fBxmPrimitiveWidgetClass\fP.
.PP
The class name is \fBXmPrimitive\fP.
.br
.ne 12
.sp 1
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the 
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \fBXmN\fP or
\fBXmC\fP prefix and use the remaining letters.  To specify one of the defined 
values for a resource in a .Xdefaults file, remove the \fBXm\fP prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (\fBC\fP),
set by using \fBXtSetValues\fP (\fBS\fP), 
retrieved by using \fBXtGetValues\fP (\fBG\fP), or is not applicable (\fBN/A\fP).
.sp 3i
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmPrimitive Resource Set
Name	Class	Type	Default	Access
_
XmNbottomShadowColor	XmCBottomShadowColor	Pixel	dynamic	CSG
XmNbottomShadowPixmap	XmCBottomShadowPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNforeground	XmCForeground	Pixel	dynamic	CSG
XmNhelpCallback	XmCCallback	XtCallbackList	NULL	C
XmNhighlightColor	XmCHighlightColor	Pixel	dynamic	CSG
XmNhighlightOnEnter	XmCHighlightOnEnter	Boolean	False	CSG
XmNhighlightPixmap	XmCHighlightPixmap	Pixmap	dynamic	CSG
XmNhighlightThickness	XmCHighlightThickness	Dimension	2	CSG
.tH
XmNnavigationType	XmCNavigationType	XmNavigationType	XmNONE	G
XmNshadowThickness	XmCShadowThickness	Dimension	2	CSG
XmNtopShadowColor	XmCTopShadowColor	Pixel	dynamic	CSG
XmNtopShadowPixmap	XmCTopShadowPixmap	Pixmap	dynamic	CSG
XmNtraversalOn	XmCTraversalOn	Boolean	True	CSG
XmNunitType	XmCUnitType	unsigned char	dynamic	CSG
XmNuserData	XmCUserData	Pointer	NULL	CSG
.TE
.in
.sp 1
.br
.ne 3
.IP "\fBXmNbottomShadowColor\fP"
Specifies the color to use to draw the bottom and right sides of the
border shadow.
This color is used if the \fBXmNtopShadowPixmap\fP resource is
unspecified.
.IP "\fBXmNbottomShadowPixmap\fP"
Specifies the pixmap to use to draw the bottom and right sides of the
border shadow.
.IP "\fBXmNforeground\fP"
Specifies the foreground drawing color used by Primitive widgets.
.IP "\fBXmNhelpCallback\fP"
Specifies the list of callbacks that is called when the help key
is pressed.  The reason sent by the callback is \fBXmCR_HELP\fP.
.IP "\fBXmNhighlightColor\fP"
Specifies the color of the highlighting rectangle.
This color is used if the highlight pixmap resource is 
\fBXmUNSPECIFIED_PIXMAP\fP.
.IP "\fBXmNhighlightOnEnter\fP"
Specifies if the highlighting rectangle is drawn when the cursor moves
into the widget.
If the shell's focus policy is \fBXmEXPLICIT\fP, this resource is
ignored, and the widget is highlighted when it has the focus.
If the shell's focus policy is \fBXmPOINTER\fP and if this resource is
True, the highlighting rectangle is drawn when the the cursor moves into
the widget.
If the shell's focus policy is \fBXmPOINTER\fP and if this resource is
False, the highlighting rectangle is not drawn when the the cursor moves
into the widget.
The default is False.
.IP "\fBXmNhighlightPixmap\fP"
Specifies the pixmap used to draw the highlighting rectangle.
.IP "\fBXmNhighlightThickness\fP"
Specifies the thickness of the highlighting rectangle.
.IP "\fBXmNnavigationType\fP"
Controls whether the Widget is a navigation group.
.RS
.IP \(bu 3
\fBXmNONE\fP indicates that the Widget
is not a navigation group.
.IP \(bu 3
\fBXmTAB_GROUP\fP indicates that the Widget
is included automatically in keyboard navigation,
unless \fBXmAddTabGroup\fP has been called.
.IP \(bu 3
\fBXmSTICKY_TAB_GROUP\fP indicates that the Widget
is included automatically in keyboard navigation,
even if \fBXmAddTabGroup\fP has been called.
.IP \(bu 3
\fBXmEXCLUSIVE_TAB_GROUP\fP indicates that the Widget
is included explicitly in keyboard navigation by the application.
With \fBXmEXCLUSIVE_TAB_GROUP\fP, traversal of widgets within the group
is based on the order of children.
.RE
.IP
If the widget's parent is a shell, the default is \fBXmTAB_GROUP\fP;
otherwise, the default is \fBXmNONE\fP.
.IP "\fBXmNshadowThickness\fP"
Specifies the size of the drawn border shadow.
.IP "\fBXmNtopShadowColor\fP"
Specifies the color to use to draw the top and left sides of the border
shadow.
This color is used if the \fBXmNtopShadowPixmap\fP resource is
unspecified.
.IP "\fBXmNtopShadowPixmap\fP"
Specifies the pixmap to use to draw the top and left sides of the border
shadow.
.IP "\fBXmNtraversalOn\fP"
Specifies if traversal is activated for this widget.
.IP "\fBXmNunitType\fP"
Provides the basic support for resolution independence.
It defines the type of units a widget uses with sizing and
positioning resources.
If the widget's parent is a subclass of \fBXmManager\fP and if the
\fBXmNunitType\fP resource is not explicitly set, it defaults to the
unit type of the parent widget.
If the widget's parent is not a subclass of \fBXmManager\fP, the
resource has a default unit type of \fBXmPIXELS\fP.
.IP
\fBXmNunitType\fP can have the following values:
.RS
.IP \(bu 3
\fBXmPIXELS\fP \(em all values provided to the widget are treated as normal 
pixel values.
.IP \(bu 3
\fBXm100TH_MILLIMETERS\fP \(em all values provided to the widget are treated 
as 1/100 millimeter.
.IP \(bu 3
\fBXm1000TH_INCHES\fP \(em all values provided to the widget are treated as
1/1000 inch.
.IP \(bu 3
\fBXm100TH_POINTS\fP \(em all values provided to the widget are treated as 
1/100 point.  A point is a unit used in text processing 
applications and is defined as 1/72 inch.
.IP \(bu 3
\fBXm100TH_FONT_UNITS\fP \(em all values provided to the widget are
treated as 1/100 of a font unit.
The value to be used for the font unit is determined in one of three
ways:
.RS
.IP \(bu 3
The application can use \fBXmSetFontUnits\fP to specify the font unit
values.
.IP \(bu 3
If the application has not called \fBXmSetFontUnits\fP, the font units
can be derived from a font.
The user specifies this font by using the font resource in a
defaults file or on the command line, or by using the standard command
line options \fB\-fn\fP and \fB\-font\fP.
.IP \(bu 3
If the application has not called \fBXmSetFontUnits\fP and the user has
not specified a font resource, the horizontal and vertical font units
default to 10.
.RE
.IP
A horizontal font unit is derived from a font as follows:
.RS
.IP \(bu 3
If the font has an \fBAVERAGE_WIDTH\fP property, the horizontal font
unit is the \fBAVERAGE_WIDTH\fP property divided by 10.
.IP \(bu 3
If the font has no \fBAVERAGE_WIDTH\fP property but has a
\fBQUAD_WIDTH\fP property, the horizontal font unit is the
\fBQUAD_WIDTH\fP property.
.IP \(bu 3
If the font has no \fBAVERAGE_WIDTH\fP or \fBQUAD_WIDTH\fP property, the
horizontal font unit is the sum of the font struct's min_bounds.width
and max_bounds.width divided by 2.3.
.RE
.IP
A vertical font unit is derived from a font as follows:
.RS
.IP \(bu 3
If the font has a \fBPIXEL_SIZE\fP property, the vertical font unit is
the \fBPIXEL_SIZE\fP property divided by 1.8.
.IP \(bu 3
If the font has no \fBPIXEL_SIZE\fP property but has \fBPOINT_SIZE\fP
and \fBRESOLUTION_Y\fP properties, the vertical font unit is the product
of the \fBPOINT_SIZE\fP and \fBRESOLUTION_Y\fP properties divided by
1400.
.IP \(bu 3
If the font has no \fBPIXEL_SIZE\fP, \fBPOINT_SIZE\fP, or
\fBRESOLUTION_Y\fP properties, the vertical font unit is the sum of the
font struct's max_bounds.ascent and max_bounds.descent divided by 2.2.
.RE
.RE
.IP "\fBXmNuserData\fP"
Allows the application to attach any necessary specific data to the widget.
It is an internally unused resource.
.sp 1
.SS "Dynamic Color Defaults"
The foreground, background, top shadow, and bottom shadow resources are
dynamically defaulted.  If no color data is specified, the colors are
automatically generated.  On a single-plane system, a black and white color
scheme is generated.  Otherwise, four colors are
generated, which display the correct shading for the 3-D visuals.
If the background is the only color specified for a widget, the top shadow,
bottom shadow, and foreground colors are generated to give the 3-D appearance.
.PP
Colors are generated only at creation.  Resetting the background through
\fBXtSetValues\fP does not regenerate the other colors.
.sp 1
.SS "Inherited Resources"
Primitive inherits behavior and resources from the following   
superclass.  For a complete description of each resource, refer to the
man page for that superclass.
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
Core Resource Set 
Name	Class	Type	Default	Access
_
XmNaccelerators	XmCAccelerators	XtAccelerators	dynamic	CSG
XmNancestorSensitive	XmCSensitive	Boolean	dynamic	G
XmNbackground	XmCBackground	Pixel	dynamic	CSG
XmNbackgroundPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderColor	XmCBorderColor	Pixel	XtDefaultForeground	CSG
XmNborderPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderWidth	XmCBorderWidth	Dimension	0	CSG
XmNcolormap	XmCColormap	Colormap	dynamic	CG
XmNdepth	XmCDepth	int	dynamic	CG
XmNdestroyCallback	XmCCallback	XtCallbackList	NULL	C
XmNheight	XmCHeight	Dimension	dynamic	CSG
XmNinitialResourcesPersistent	XmCInitialResourcesPersistent	Boolean	True	C
XmNmappedWhenManaged	XmCMappedWhenManaged	Boolean	True	CSG
XmNscreen	XmCScreen	Screen *	dynamic	CG
.tH
XmNsensitive	XmCSensitive	Boolean	True	CSG
XmNtranslations	XmCTranslations	XtTranslations	dynamic	CSG
XmNwidth	XmCWidth	Dimension	dynamic	CSG
XmNx	XmCPosition	Position	0	CSG
XmNy	XmCPosition	Position	0	CSG
.TE
.in
.sp 1 \"Adds space before the SS
.SS "Translations"
The XmPrimitive translations are listed below.
These translations may not directly correspond to a
translation table.
.P
Note that for buttons in menus, altering translations in \fB#override\fP
or \fB#augment\fP mode is undefined.
\fB
.nf
.ta 1.5i
.sp .5
KUp:	PrimitiveTraverseUp()
KDown:	PrimitiveTraverseDown()
KLeft:	PrimitiveTraverseLeft()
KRight:	PrimitiveTraverseRight()
.sp 1
KBeginLine:	PrimitiveTraverseHome()
.sp 1
KNextField:	PrimitiveNextTabGroup()
KPrevField:	PrimitivePrevTabGroup()
.sp 1
KHelp:	PrimitiveHelp()
.fi
\fP
.sp 1 \"Adds space before the SS
.SS "Action Routines"
The XmPrimitive action routines are described below:
.IP "\fBPrimitiveHelp()\fP:"
Calls the callbacks for \fBXmNhelpCallback\fP if any exist.  If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.IP "\fBPrimitiveNextTabGroup()\fP:"
Traverses to the first item in the next tab group.  If
the current tab group is the last entry in the tab group list, it
wraps to the beginning of the tab group list.
.IP "\fBPrimitivePrevTabGroup()\fP:"
Traverses to the first item in the previous tab group.
If the beginning of the tab group list is reached, it wraps to the end
of the tab group list. 
.IP "\fBPrimitiveTraverseDown()\fP:"
Traverses to the next item below the current widget in the current tab
group, wrapping if necessary.
.IP "\fBPrimitiveTraverseHome()\fP:"
Traverses to the first widget or gadget in the current tab group.
.IP "\fBPrimitiveTraverseLeft()\fP:"
Traverses to the next item to the left of the current widget in the
current tab group, wrapping if necessary.
.IP "\fBPrimitiveTraverseNext()\fP:"
Traverses to the next item in the current tab group, wrapping if
necessary.
.IP "\fBPrimitiveTraversePrev()\fP:"
Traverses to the previous item in the current tab group, wrapping if
necessary.
.br
.ne 10
.IP "\fBPrimitiveTraverseRight()\fP:"
Traverses to the next item to the right of the current gadget in the
current tab group, wrapping if necessary.
.IP "\fBPrimitiveTraverseUp()\fP:"
Traverses to the next item above the current gadget in the current tab
group, wrapping if necessary.
.sp 1 \"Adds space before the SS
.SS "Additional Behavior"
This widget has the additional behavior described below:
.IP "\fB<FocusIn>\fP:"
If the shell's keyboard focus policy is \fBXmEXPLICIT\fP, highlights the
widget and gives it the focus.
.IP "\fB<FocusOut>\fP:"
If the shell's keyboard focus policy is \fBXmEXPLICIT\fP, unhighlights
the widget and removes the focus.
.sp 1 \"Adds space before the SS
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \fBVirtualBindings(3X)\fP.
.SH RELATED INFORMATION
\fBCore(3X)\fP.
