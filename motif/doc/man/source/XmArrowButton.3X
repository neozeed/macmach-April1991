.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1991 Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmArrowButton 3X "" "" "" ""
.SH NAME
\fBXmArrowButton \(em The ArrowButton widget class.\fP
.iX "XmArrowButton"
.iX "widget class" "ArrowButton"
.sp 1
.SH SYNOPSIS
\fB#include <Xm/ArrowB.h>\fP
.sp 1
.SH DESCRIPTION
ArrowButton consists of a directional arrow surrounded by a
border shadow.  When it is selected, the shadow changes
to give the appearance that the  
ArrowButton has been pressed in.  When the
ArrowButton is unselected, the shadow reverts to give the appearance that the
ArrowButton is released, or out.
.sp 1
.SS "Classes"
ArrowButton inherits behavior and resources 
from \fBCore\fP and \fBXmPrimitive\fP classes.
.PP
The class pointer is \fBxmArrowButtonWidgetClass\fP. 
.PP
The class name is \fBXmArrowButton\fP.
.sp 1
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the 
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \fBXmN\fP or
\fBXmC\fP prefix and use the remaining letters.  To specify one of the defined 
values for a resource in a .Xdefaults file, remove the \fBXm\fP prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (\fBC\fP),
set by using \fBXtSetValues\fP (\fBS\fP), 
retrieved by using \fBXtGetValues\fP (\fBG\fP), or is not applicable (\fBN/A\fP).
.sp 1
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmArrowButton Resource Set
Name	Class	Type	Default	Access
_
XmNactivateCallback	XmCCallback	XtCallbackList	NULL	C
XmNarmCallback	XmCCallback	XtCallbackList	NULL	C
XmNarrowDirection	XmCArrowDirection	unsigned char	XmARROW_UP	CSG
XmNdisarmCallback	XmCCallback	XtCallbackList	NULL	C
XmNmultiClick	XmCMultiClick	unsigned char	dynamic	CSG
.TE
.sp 1
.IP "\fBXmNactivateCallback\fP"
Specifies a list of callbacks that is called
when the ArrowButton is activated.
To activate the button, press and release \fBBSelect\fP
while the pointer is inside
the ArrowButton widget.  Activating the ArrowButton
also disarms it.
The reason sent by this callback is \fBXmCR_ACTIVATE\fP.
.IP "\fBXmNarmCallback\fP"
Specifies a list of callbacks that is called
when the ArrowButton is armed.
To arm this widget, press \fBBSelect\fP
while the pointer is inside the ArrowButton. 
The reason sent by this callback is \fBXmCR_ARM\fP.
.IP "\fBXmNarrowDirection\fP"
Sets the arrow direction.
The following are values for this resource:
.RS
.IP \(bu 3
\fBXmARROW_UP\fP. 
.IP \(bu 3
\fBXmARROW_DOWN\fP. 
.IP \(bu 3
\fBXmARROW_LEFT\fP.
.IP \(bu 3
\fBXmARROW_RIGHT\fP.
.RE
.IP "\fBXmNdisarmCallback\fP"
Specifies a list of callbacks that is called
when the ArrowButton is disarmed.
To disarm this widget, press and release
\fBBSelect\fP while the pointer is inside the ArrowButton.
The reason for this callback is \fBXmCR_DISARM\fP.
.IP "\fBXmNmultiClick\fP"
If a button click is followed by another button click within the time
span specified by the display's multi-click time, and this resource is
set to \fBXmMULTICLICK_DISCARD\fP, do not process the second click.
If this resource is set to \fBXmMULTICLICK_KEEP\fP, process the event
and increment \fIclick_count\fP in the callback structure.
When the button is not in a menu, the default value is
\fBXmMULTICLICK_KEEP\fP.
.sp 1
.SS "Inherited Resources"
ArrowButton inherits behavior and resources from the following   
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmPrimitive Resource Set
Name	Class	Type	Default	Access
_
XmNbottomShadowColor	XmCBottomShadowColor	Pixel	dynamic	CSG
XmNbottomShadowPixmap	XmCBottomShadowPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNforeground	XmCForeground	Pixel	dynamic	CSG
XmNhelpCallback	XmCCallback	XtCallbackList	NULL	C
XmNhighlightColor	XmCHighlightColor	Pixel	dynamic	CSG
XmNhighlightOnEnter	XmCHighlightOnEnter	Boolean	False	CSG
XmNhighlightPixmap	XmCHighlightPixmap	Pixmap	dynamic	CSG
XmNhighlightThickness	XmCHighlightThickness	Dimension	2	CSG
.tH
XmNnavigationType	XmCNavigationType	XmNavigationType	XmNONE	G
XmNshadowThickness	XmCShadowThickness	Dimension	2	CSG
XmNtopShadowColor	XmCTopShadowColor	Pixel	dynamic	CSG
XmNtopShadowPixmap	XmCTopShadowPixmap	Pixmap	dynamic	CSG
XmNtraversalOn	XmCTraversalOn	Boolean	True	CSG
XmNunitType	XmCUnitType	unsigned char	dynamic	CSG
XmNuserData	XmCUserData	Pointer	NULL	CSG
.TE
.in
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
Core Resource Set 
Name	Class	Type	Default	Access
_
XmNaccelerators	XmCAccelerators	XtAccelerators	dynamic	CSG
XmNancestorSensitive	XmCSensitive	Boolean	dynamic	G
XmNbackground	XmCBackground	Pixel	dynamic	CSG
XmNbackgroundPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderColor	XmCBorderColor	Pixel	XtDefaultForeground	CSG
XmNborderPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderWidth	XmCBorderWidth	Dimension	0	CSG
XmNcolormap	XmCColormap	Colormap	dynamic	CG
XmNdepth	XmCDepth	int	dynamic	CG
XmNdestroyCallback	XmCCallback	XtCallbackList	NULL	C
XmNheight	XmCHeight	Dimension	dynamic	CSG
XmNinitialResourcesPersistent	XmCInitialResourcesPersistent	Boolean	True	C
XmNmappedWhenManaged	XmCMappedWhenManaged	Boolean	True	CSG
XmNscreen	XmCScreen	Screen *	dynamic	CG
.tH
XmNsensitive	XmCSensitive	Boolean	True	CSG
XmNtranslations	XmCTranslations	XtTranslations	dynamic	CSG
XmNwidth	XmCWidth	Dimension	dynamic	CSG
XmNx	XmCPosition	Position	0	CSG
XmNy	XmCPosition	Position	0	CSG
.TE
.in
.sp 1
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sp 1
.nf
.ta .25i 1.1i
\fBtypedef struct\fP
{
	\fBint\fP	\fIreason\fP;
	\fBXEvent\fP	\fI* event\fP;
	\fBint\fP	\fIclick_count\fP;
} \fBXmArrowButtonCallbackStruct\fP;
.fi
.fi
.sp 1
.IP "\fIreason\fP" .75i
Indicates why the callback was invoked.
.IP "\fIevent\fP" .75i
Points to the \fBXEvent\fP that triggered the callback.
.IP "\fIclick_count\fP" .75i
This value is valid only when the reason is \fBXmCR_ACTIVATE\fP.
It contains the number of clicks in the last multiclick sequence
if the \fBXmNmultiClick\fP resource is set to \fBXmMULTICLICK_KEEP\fP;
otherwise it contains \fB1\fP.
The activate callback is invoked for each click if \fBXmNmultiClick\fP
is set to \fBXmMULTICLICK_KEEP\fP.
.sp 1 \"Adds space before the SS
.SS "Translations"
XmArrowButton includes translations for XmPrimitive.
Additional XmArrowButton translations are listed below.
These translations may not directly correspond to a
translation table.
\fB
.nf
.ta 1.5i
.sp .5
BSelect Press:	Arm()
BSelect Click:	Activate()
	Disarm()
BSelect Release:	Activate()
	Disarm()
BSelect Press 2+:	MultiArm()
BSelect Release 2+:	MultiActivate()
.sp 1
KActivate:	ArmAndActivate()
KSelect:	ArmAndActivate()
KHelp:	Help()
.fi
\fP
.sp 1 \"Adds space before the SS
.SS "Action Routines"
The XmArrowButton action routines are described below:
.IP "\fBActivate()\fP:"
Draws the shadow in the unselected state.
If the pointer is within the ArrowButton,
calls the callbacks for \fBXmNactivateCallback\fP.
.IP "\fBArm()\fP:"
Draws the shadow in the selected state and
calls the callbacks for \fBXmNarmCallback\fP.
.br
.ne 8
.IP "\fBArmAndActivate()\fP:"
Draws the shadow in the selected state and
calls the callbacks for \fBXmNarmCallback\fP.
Arranges for the shadow to be drawn in the unselected state and
the callbacks for \fBXmNactivateCallback\fP and \fBXmNdisarmCallback\fP
to be called, either immediately or at a later time.
.IP "\fBDisarm()\fP:"
Draws the shadow in the unselected state and
calls the callbacks for \fBXmNdisarmCallback\fP.
.IP "\fBHelp()\fP:"
Calls the callbacks for \fBXmNhelpCallback\fP if any exist.
If there are no help callbacks for this widget, this action calls the
help callbacks for the nearest ancestor that has them.
.IP "\fBMultiActivate()\fP:"
If \fBXmNmultiClick\fP is \fBXmMULTICLICK_DISCARD\fP, this action does
nothing.
.IP
If \fBXmNmultiClick\fP is \fBXmMULTICLICK_KEEP\fP, this action does the
following:
Increments \fIclick_count\fP in the callback structure.
Draws the shadow in the unselected state.
If the pointer is within the ArrowButton, calls the
callbacks for \fBXmNactivateCallback\fP.
Calls the callbacks for \fBXmNdisarmCallback\fP.
.IP "\fBMultiArm()\fP:"
If \fBXmNmultiClick\fP is \fBXmMULTICLICK_DISCARD\fP, this action does
nothing.
If \fBXmNmultiClick\fP is \fBXmMULTICLICK_KEEP\fP, this action
draws the shadow in the selected state and calls the callbacks for
\fBXmNarmCallback\fP.
.sp 1 \"Adds space before the SS
.br
.ne 30
.SS "Additional Behavior"
This widget has the additional behavior described below:
.IP "\fB<EnterWindow>\fP:"
Draws the ArrowButton shadow in its selected state if the
pointer leaves and re-enters the window while BSelect is pressed.
.IP "\fB<LeaveWindow>\fP:"
Draws the ArrowButton shadow in its unselected state
if the pointer leaves the window while BSelect is pressed.
.sp 1 \"Adds space before the SS
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \fBVirtualBindings(3X)\fP.
.SH RELATED INFORMATION
\fBCore(3X)\fP, \fBXmCreateArrowButton(3X)\fP, and \fBXmPrimitive(3X)\fP.
