















































































       8.  AAAAddddddddiiiittttiiiioooonnnnaaaallll FFFFuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy

       The Motif widget library provides additional functionality
       that you can use to perform certain tasks.  The following
       list provides an overview of this functionality.  Subsequent
       sections of this chapter describe each topic in detail.

          +o Compound strings.  A compound string is designed to      |
            allow any message or text to be displayed without hav-   |
            ing to resort to hard-coding certain attributes that
            are language dependent.  The three main attributes
            involved are direction, character set, and text.  The
            Motif Intrinsics library provides a number of functions
            that allow you to create and manipulate compound
            strings.

          +o Cut and paste functions.  The Motif Intrinsics has a     |
            clipboard that is used to hold data that is being
            transferred between applications.  The Motif intrinsics  |
            also provide a set of cut and paste functions that
            allow you to modify the type and value of the data.

          +o Dynamic resource defaulting.  This feature incorporates  |
            a processing function into a widget's resource defini-
            tions.  This function is used to calculate a default
            resource value when the widget is created, thus over-
            riding any static default value.                         |

          +o Keyboard grabbing.  Grabbing refers to an action in      |
            which an application or window isolates an input device
            (the keyboard in this case) from other applications or
            windows, thus preventing the other applications or win-
            dows from using the device.

          +o Localization.   You can use localized defaults files in
            the Motif system by specifying the location of these
            files within certain environment variables.  XXXXttttAAAAppppppppIIIInnnniiii----   |
            ttttiiiiaaaalllliiiizzzzeeee determines the proper path to the localized
            defaults variables.

          +o Pixmap naming and caching.  The Motif widgets provide    |
            functions that allow you to associate any image with a
            unique name.  With this association, the functions can
            generate pixmaps through references to a ....XXXXddddeeeeffffaaaauuuullllttttssss      |


                                                                8-1












            file and through an argument list for all widgets with
            pixmap resources.

          +o Resolution independence.  Resolution independence is a   |
            feature that allows your application to create and
            display images that are the same physical size regard-
            less of the resolution of the display.

          +o Interacting with MWM.  There are a number of functions   |
            you can use when interacting with the MWM.  A sample
            program is available that demonstrates how to use some
            of these functions.

          +o Motif version and MWW presence.  There are functions     |
            that provide information on the current version of
            Motif and whether or not MWM is running.                 |

       8.1  CCCCoooommmmppppoooouuuunnnndddd SSSSttttrrrriiiinnnnggggssss

       A compound string is designed to allow any message or text    |
       to be displayed without having to resort to hard-coding cer-  |
       tain attributes that are language dependent.  The three main
       attributes involved are character set, direction, and the
       text of the message. For example, suppose you have a message
       to display in English and Arabic.  This can easily be done
       with a compound string because you specify not only the text
       of the message, but character set and direction as well.      |

          +o Character set.  The mapping between the string of bytes
            that make up the text and the font in which the text
            will be displayed.                                       |

          +o Direction.  The relationship between the logical order
            (keystroke entry) and the display order of the charac-
            ters in a string.  In English, the display order is
            left to right; as characters are typed, they are
            displayed from left to right.  In Arabic, the direction  |
            is right to left; as characters are typed, they are
            displayed from right to left.

          +o Text.  This is simply the text of the message or string
            you wish to display.

       In addition, you specify a font list from which to select
       the fonts used to display the message.  The font list con-
       tains character set references that are matched with an X
       font.  To display a compound string, the widget uses the
       character set specified in the compound string and searches
       the font list for a matching character set.  Note that the
       font list is a widget resource.



       8-2









                                           Additional Functionality


       Motif provides a set of compound string functions that
       enable the creation and manipulation of compound strings and
       font lists. This chapter discusses the compound string func-
       tions you can use to

          +o Create compound strings                                  |

          +o Compare and manipulate compound strings                  |

          +o Create a font list and font list entries                 |

       8.1.1  CCCCoooommmmppppoooonnnneeeennnnttttssss ooooffff aaaa CCCCoooommmmppppoooouuuunnnndddd SSSSttttrrrriiiinnnngggg

       A compound string is a stream of data that is made up of      |
       tag-length-value (TLV) segments.  Each TLV segment            |
       represents an attribute of the compound string.  Within a
       TLV segment, the fields are

          +o Tag.  A 1-byte field that identifies the type of Value   |
            that follows.

          +o Length.  A 2-byte field that specifies the length of     |
            the data in the Value field.

          +o Value.  The value of the segment.  The length of this
            field is the number of bytes specified in the Length
            field.

       For example, for a TLV segment that identifies the character
       set to be used, the Tag field identifies the segment as a     |
       character set segment, the Length field sets the length of
       the segment, and the Value field contains the character-set
       identifier.

       A compound string always begins with a Tag field set to 0000xxxx7777ffff  |
       and a Length field set to the length of the segments that
       follow.  Subsequent TLV segments then define the remainder
       of the compound string.  The Value field of each of the TLV
       segments contains the information about the attributes of
       the compound string.  These attributes are described below.

          +o A character-set identifier.  This is a sequence of       |
            bytes that identifies the desired character set.  This
            information is used by Motif to match a font with a
            compound string segment.  All text between two           |
            character-set identifiers are interpreted to be in the
            first set.  It is an error for a text component to pre-  |
            cede the first character-set identifier.                 |

            The character-set identifier has ppppeeeerrrrssssiiiisssstttteeeennnncccceeee, that is,   |
            any specified character set is used for all subsequent


                                                                8-3












            text segments until a new character set is encountered.  |

            There are times when an application must create a
            string without knowing what character sets will be
            available at the time the string is to be displayed.     |
            Motif provides a special character-set identifier that
            will match any available font.  This universal charac-
            ter set is specified by the XmSTRING_DEFAULT_CHARSET
            identifier.  If this identifier is used as the charac-
            ter set when a compound string is created, it will       |
            match the first font in the font list used to display    |
            the string, regardless of the character set associated
            with that particular font.  By using the universal
            character set, an application can construct its strings
            so that they will be displayed in any font desired by
            the user, no matter what character set is associated
            with that font.                                          |

            The universal character set can also be associated with
            a font in a font list.  When used with a font, that
            font will match any string, no matter what the charac-
            ter set of the string.  An application can thus con-
            struct a multiple-font font list and specify a default   |
            font to be used when no other font is matched.

          +o A direction.  This can have three values: left-to-       |
            right, right-to-left, and revert.  Like the character-   |
            set identifier, it has persistence.  The default direc-
            tion is left-to-right; that is, text components preced-
            ing the first direction component will be assigned a
            direction of left-to-right.                              |

          +o Text.  This is the actual character data.  There are no
            semantics for any bytes.  Specifically this means that
            characters like \n do not have any meaning.  As a con-
            venience there is a function, XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeLLLLttttooooRRRR, which  |
            does impose this single semantic.                        |

          +o A separator.  This is a tag with no value.  It is sim-
            ply a marker that allows an array of compound string
            segments to be presented as a single entity.

       The following is a set of useful definitions for compound
       strings:

       typedef unsigned char   XmStringDirection  /* an enumerated type */|

       TTTThhhheeee sssseeeetttt ooooffff ppppoooossssssssiiiibbbblllleeee vvvvaaaalllluuuueeeessss ffffoooorrrr tttthhhhiiiissss ttttyyyyppppeeee aaaarrrreeee                  ||||

       XXXXmmmmSSSSTTTTRRRRIIIINNNNGGGG____DDDDIIIIRRRREEEECCCCTTTTIIIIOOOONNNN____LLLL____TTTTOOOO____RRRR                                     ||||
       XXXXmmmmSSSSTTTTRRRRIIIINNNNGGGG____DDDDIIIIRRRREEEECCCCTTTTIIIIOOOONNNN____RRRR____TTTTOOOO____LLLL


       8-4









                                           Additional Functionality


       ttttyyyyppppeeeeddddeeeeffff cccchhhhaaaarrrr **** XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt ////****oooocccctttteeeetttt cccchhhhaaaarrrrssss,,,, nnnnuuuullllllll tttteeeerrrrmmmmiiiinnnnaaaatttteeeedddd****////||||

       ttttyyyyppppeeeeddddeeeeffff cccchhhhaaaarrrr **** XXXXmmmmSSSSttttrrrriiiinnnngggg  ////****ooooppppaaaaqqqquuuueeee ttttoooo uuuusssseeeerrrrssss****////                  ||||

       ttttyyyyppppeeeeddddeeeeffff uuuunnnnssssiiiiggggnnnneeeedddd cccchhhhaaaarrrr XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppoooonnnneeeennnnttttTTTTyyyyppppeeee ////****ccccoooommmmppppoooonnnneeeennnntttt ttttaaaagggg ttttyyyyppppeeeessss****////||||

       The set of currently possible values for this type are:       ||||
       #define XmSTRING_COMPONENT_UNKNOWN 0                          ||||
       #define XmSTRING_COMPONENT_CHARSET 1
       #define XmSTRING_COMPONENT_TEXT  2
       #define XmSTRING_COMPONENT_DIRECTION 3
       #define XmSTRING_COMPONENT_SEPARATOR 4
       #define XmSTRING_COMPONENT_END  126 /*no more components*/    |
       #define XmSTRING_COMPONENT_RESERVED 127 /*0-127 reserved for Motif*/|
       #define XmSTRING_DEFAULT_CHARSET (-1) /*The universal character set*/|

       8888....1111....2222  CCCCoooommmmppppoooouuuunnnndddd SSSSttttrrrriiiinnnngggg FFFFuuuunnnnccccttttiiiioooonnnnssss

       You can use a number of functions associated with compound    |
       strings.  The following table lists these functions along
       with a brief description of what each can do.  Subsequent
       sections describe the functions in more detail.  A short      |
       sample program at the end of the list of functions shows how  |
       to use some of them.                                          |





























                                                                8-5












                  TTTTAAAABBBBLLLLEEEE 8888----1111....  Compound String Functions              |

       FFFFuuuunnnnccccttttiiiioooonnnn NNNNaaaammmmeeee               DDDDeeeessssccccrrrriiiippppttttiiiioooonnnn                                            |
       ___________________________________________________________________________________|
7                                |7|
                                                                                          ||
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttAAAAdddddddd               Adds an entry to an existing font list.                |
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttCCCCooooppppyyyy              Copies a font list.                                    |
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttCCCCrrrreeeeaaaatttteeee            Creates a new font list.                               |
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttFFFFrrrreeeeeeee              Recovers memory used by a font list.                   |
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttFFFFrrrreeeeeeeeFFFFoooonnnnttttCCCCoooonnnntttteeeexxxxtttt   Recovers memory used by a font list context.           |
       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttGGGGeeeettttNNNNeeeexxxxttttFFFFoooonnnntttt       Accesses fonts and character sets in a font list.      |
                                   Creates a context for accessing fonts and character      ||
                                   sets in a font list.                                     ||
77       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttIIIInnnniiiittttFFFFoooonnnnttttCCCCoooonnnntttteeeexxxxtttt                                                          |

                                   Returns the number of pixels between the top of the      |
                                   character box and the baseline of the first line of      |
                                   text in the specified compound string.                   |
777       XXXXmmmmSSSSttttrrrriiiinnnnggggBBBBaaaasssseeeelllliiiinnnneeee


                                   Returns True or False as the result of a byte-by-byte    |
                                   comparison of two specified compound strings.            |
77       XXXXmmmmSSSSttttrrrriiiinnnnggggBBBByyyytttteeeeCCCCoooommmmppppaaaarrrreeee

                                   Returns True if two compound strings have the same text  |
                                   components, directions, and separators.                  |
77       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppaaaarrrreeee

       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnnccccaaaatttt              Appends one compound string to another.
       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCooooppppyyyy                Returns a copy of the specified compound string.
       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeee              Creates a compound string.
       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeLLLLttttooooRRRR          Creates a compound string in a left-to-right direction.
                                   Creates a compound string in the current language        ||
                                   environment.                                             ||
77       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeSSSSiiiimmmmpppplllleeee                                                               |

                                   Creates a compound string with just one component, the   |
                                   specified direction.                                     |
77       XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnnCCCCrrrreeeeaaaatttteeee

       XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww                Draws a compound string in an X window.
                                   This function is identical to XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww except that   |
                                   it also paints both the foreground and background bits
                                   of each character.
777       XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwIIIImmmmaaaaggggeeee


                                   Identical to XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww except that if the specified   |
                                   substring is matched in the main string, then the sub-
                                   string is underlined.
777       XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwUUUUnnnnddddeeeerrrrlllliiiinnnneeee


       XXXXmmmmSSSSttttrrrriiiinnnnggggEEEEmmmmppppttttyyyy               Returns True if all text segments are empty.
                                   Determines the height and width (in pixels) of the
                                   smallest rectangle that will enclose the specified com-
                                   pound string.
777       XXXXmmmmSSSSttttrrrriiiinnnnggggEEEExxxxtttteeeennnntttt


       XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeee                Frees the memory used by a compound string.
       XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeeeCCCCoooonnnntttteeeexxxxtttt         Frees a previously established context.
                                   Returns True if a segment can be found in the input
                                   compound string that matches the specified character-    |
                                   set identifier.
777       XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttLLLLttttooooRRRR


       XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt    Returns the next component.
       XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttSSSSeeeeggggmmmmeeeennnntttt      Returns the bytes in the next segment.                 *
                                   Indicates whether one compound string is contained|
                                   within another.                   |
77       XXXXmmmmSSSSttttrrrriiiinnnnggggHHHHaaaassssSSSSuuuubbbbssssttttrrrriiiinnnngggg                                                               |

                                   Returns the height (in pixels) of the sum of all the
                                   line heights of the specified compound string.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggHHHHeeeeiiiigggghhhhtttt

7                                |7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|
















































7                                |7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|
















































       8-6









                                           Additional Functionality


       FFFFuuuunnnnccccttttiiiioooonnnn NNNNaaaammmmeeee               DDDDeeeessssccccrrrriiiippppttttiiiioooonnnn
       ___________________________________________________________________________________
7                                |7|
                                                                                          |
                                   Specifies a context used to read the contents of a com-  |
                                   pound string segment- by-segment.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggIIIInnnniiiittttCCCCoooonnnntttteeeexxxxtttt

       XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLeeeennnnggggtttthhhh              Returns the length of the specified compound string.
                                   Returns the number of lines of text in the specified
                                   compound string.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLiiiinnnneeeeCCCCoooouuuunnnntttt

                                   Appends a specified number of bytes from one compound
                                   string to another.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCoooonnnnccccaaaatttt

                                   Returns a copy of a specified portion of a compound
                                   string.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCooooppppyyyy

       XXXXmmmmSSSSttttrrrriiiinnnnggggPPPPeeeeeeeekkkkNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt   Returns the type of the next component.
       XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeggggmmmmeeeennnnttttCCCCrrrreeeeaaaatttteeee       Creates a compound string segment.
       XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeppppaaaarrrraaaattttoooorrrrCCCCrrrreeeeaaaatttteeee     Creates a compound string with only a separator.
                                   Returns the width (in pixels) of the longest sequence
                                   of text components in the specified compound string.
77       XXXXmmmmSSSSttttrrrriiiinnnnggggWWWWiiiiddddtttthhhh

7                                |7|7|7|7|7|7|7|7|7|7|7|7|7|














       8.1.2.1  XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttAAAAdddddddd

       This function adds an entry to an existing font list.

       XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttAAAAdddddddd(_o_l_d_l_i_s_t, _f_o_n_t, _c_h_a_r_s_e_t)              |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _o_l_d_l_i_s_t;                                       |
           XXXXFFFFoooonnnnttttSSSSttttrrrruuuucccctttt *_f_o_n_t;                                        |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                  |

       _o_l_d_l_i_s_t   Specifies a pointer to the font list to which an    |
                 entry will be added.                                |

       _f_o_n_t      Specifies a pointer to the font structure to be     |
                 added to the list.                                  |

       _c_h_a_r_s_e_t   Specifies the character-set identifier for the      |
                 font being added to the list. This can be           |
                 XmSTRING_DEFAULT_CHARSET.                           |

       XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttAAAAdddddddd creates a new font list consisting of the con-  |
       tents of _o_l_d_l_i_s_t and the new font list element being added.
       Note that this function de-allocates the _o_l_d_l_i_s_t after
       extracting the required information; _o_l_d_l_i_s_t should not be
       referenced thereafter.  The following code segment shows you  |
       how this function is used.

       XmFontList font list1, font list2;                            |

       XmFontStruct *font1, *font2;

       font list1 = XmFontListCreate(font1, "chset1");               |
       font list2 = XmFontListAdd(font list1, font2, "chset2");      |




                                                                8-7












       _T_h_e _v_a_r_i_a_b_l_e_s _c_h_s_e_t_1 _a_n_d _c_h_s_e_t_2 _a_r_e _s_e_t _i_n _a_n _a_p_p-_d_e_f_a_u_l_t     _|
       _f_i_l_e, _a_s _s_h_o_w_n _i_n _t_h_e _s_a_m_p_l_e _p_r_o_g_r_a_m _a_t _t_h_e _e_n_d _o_f _t_h_i_s _s_e_c_-  _|
       _t_i_o_n.

       _8._1._2._2  XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttCCCCrrrreeeeaaaatttteeee

       This function creates a new font list.  See the preceding     |
       segment for an example of how to use this function.

       XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttCCCCrrrreeeeaaaatttteeee(_f_o_n_t, _c_h_a_r_s_e_t)                    |
          XXXXFFFFoooonnnnttttSSSSttttrrrruuuucccctttt     *_f_o_n_t;                                     |
          XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                   |


       _f_o_n_t      Specifies a pointer to a font structure for which
                 the new font list is generated.

       _c_h_a_r_s_e_t   Specifies the character-set identifier for the      |
                 font.  This can be XmSTRING_DEFAULT_CHARSET.

       The XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttCCCCrrrreeeeaaaatttteeee function creates a new font list with a  |
       single element specified by the provided font and character
       set. It also allocates the space for the font list.

       8.1.2.3   XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttFFFFrrrreeeeeeee

       This function frees the memory used by a font list.

       vvvvooooiiiidddd XXXXmmmmFFFFoooonnnnttttLLLLiiiissssttttFFFFrrrreeeeeeee (_l_i_s_t)                                    |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _l_i_s_t;                                          |

       _l_i_s_t         Specifies the font list to be freed.             |

       8.1.2.4  XXXXmmmmSSSSttttrrrriiiinnnnggggBBBBaaaasssseeeelllliiiinnnneeee

       This function returns the number of pixels between the top
       of the character box and the baseline of the first line of
       text in the specified compound string.

       DDDDiiiimmmmeeeennnnssssiiiioooonnnn XXXXmmmmSSSSttttrrrriiiinnnnggggBBBBaaaasssseeeelllliiiinnnneeee ((((_f_o_n_t _l_i_s_t, _s_t_r_i_n_g))))                |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                     |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |

       8888....1111....2222....5555  XXXXmmmmSSSSttttrrrriiiinnnnggggBBBByyyytttteeeeCCCCoooommmmppppaaaarrrreeee

       This function determines whether two compound strings are     |
       identical.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggBBBByyyytttteeeeCCCCoooommmmppppaaaarrrreeee (_s_1, _s_2)                          |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1, _s_2;                                          |



       8-8









                                           Additional Functionality


       This function returns True if the comparison shows the two
       specified compound strings to be identical and False if they
       are not.

       It is important to note that when a compound string is        |
       placed in a widget, it is converted into an internal form to
       allow faster processing.  Part of the conversion process
       strips out unnecessary or redundant information.  The result
       is that if an application subsequently executes a call to
       XXXXttttGGGGeeeettttVVVVaaaalllluuuueeeessss to retrieve a compound string from a widget
       (specifically XmLabel and all of its subclasses), no guaran-  |
       tee can be given that the compound string returned will be
       the same byte-for-byte as the original string in the widget.

       8.1.2.6  XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppaaaarrrreeee

       This function determines whether or not two compound strings  |
       are _s_e_m_a_n_t_i_c_a_l_l_y (but not necessarily byte-for-byte)
       equivalent.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppaaaarrrreeee (_s_1, _s_2)                              |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1, _s_2;                                          |

       This function returns True if the two compound strings are    |
       semantically equivalent and False otherwise.  Semantically    |
       equivalent means that the strings have the same text com-     |
       ponents, directions, and separators.  If character sets are
       specified, they must be equal as well.

       8.1.2.7  XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnnccccaaaatttt

       This function appends a copy of one compound string to
       another compound string.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnnccccaaaatttt (_s_1, _s_2)                              |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1, _s_2;                                          |

       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnnccccaaaatttt appends _s_2 to the end of _s_1 and returns the
       resulting compound string.  The original strings are
       preserved.  The space for the resulting compound string is
       allocated within the function.  After using this function,
       you should free this space by calling XXXXttttFFFFrrrreeeeeeee.                 |

       8.1.2.8  XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCooooppppyyyy

       This function creates a copy of a compound string.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCooooppppyyyy (_s_1)                                    |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1;                                              |

       This function returns a copy of _s_1.  The space for the


                                                                8-9












       resulting compound string is allocated within the function.
       The application is responsible for managing the the allo-
       cated space.  The memory can be recovered by calling XXXXttttFFFFrrrreeeeeeee.  |

       8.1.2.9  XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeee

       This function creates a compound string.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeee (_t_e_x_t, _c_h_a_r_s_e_t)                       |
           cccchhhhaaaarrrr  *_t_e_x_t;                                              |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                  |

       _t_e_x_t      Specifies a pointer to a null terminated string.    |

       _c_h_a_r_s_e_t   Specifies the character-set identifier to be asso-  |
                 ciated with the given text. This can be             |
                 XmSTRING_DEFAULT_CHARSET.                           |

       This function creates a compound string with two components:
       a character set and text.

       8.1.2.10  XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeLLLLttttooooRRRR

       This function creates a compound string with a default
       direction of left-to-right.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeLLLLttttooooRRRR (_t_e_x_t, _c_h_a_r_s_e_t)                   |
           cccchhhhaaaarrrr  *_t_e_x_t;                                              |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                  |


       _t_e_x_t      Specifies a pointer to a null terminated string.    |

       _c_h_a_r_s_e_t   Specifies the character-set identifier to be asso-  |
                 ciated with the given text.  This can be
                 XmSTRING_DEFAULT_CHARSET.                           |

       This function is similar to XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeee except that it
       scans the text for newline characters in the text.  When one
       is found, the text up to that point is put into a segment
       followed by a separator component.  No final separator com-
       ponent is appended to the end of the compound string.  The
       direction is defaulted to left-to-right.  Finally, note that
       this function assumes that the encoding is single octet
       rather than double or quadruple octet per character of text.








       8-10









                                           Additional Functionality


       8.1.2.11  XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnnCCCCrrrreeeeaaaatttteeee

       This function creates a compound string with a single com-
       ponent, a direction with the specified value.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnnCCCCrrrreeeeaaaatttteeee (_d_i_r_e_c_t_i_o_n)                  |
           XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnn _d_i_r_e_c_t_i_o_n;                              |

       _d_i_r_e_c_t_i_o_n     Specifies the value of the directional component.|

       8.1.2.12  XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww

       This function is used to draw a compound string in an X win-
       dow.

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww (_d, _w, _f_o_n_t _l_i_s_t, _s_t_r_i_n_g, _g_c, _x, _y,         |
                               _w_i_d_t_h, _a_l_i_g_n_m_e_n_t, _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n, _c_l_i_p);|
           DDDDiiiissssppppllllaaaayyyy  *_d;                                              |
           WWWWiiiinnnnddddoooowwww _w;                                                 |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                     |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |
           GGGGCCCC  _g_c;                                                   |
           PPPPoooossssiiiittttiiiioooonnnn _x,_y;                                             |
           DDDDiiiimmmmeeeennnnssssiiiioooonnnn _w_i_d_t_h;                                          |
           BBBByyyytttteeee  _a_l_i_g_n_m_e_n_t;                                          |
           BBBByyyytttteeee  _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n;                                   |
           XXXXRRRReeeeccccttttaaaannnngggglllleeee *_c_l_i_p;                                         |

       The _x and _y parameters identify the top left coordinate of    |
       the rectangle that contains the displayed compound string.    |
       The _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n parameter controls the direction in      |
       which the segments of the compound string are laid out.  It   |
       is also used to determine the meaning of the alignment
       parameter.  The _c_l_i_p parameter allows the application to      |
       restrict the area into which the compound string will be
       drawn.  If it is NULL, no clipping is done.

       8.1.2.13  XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwIIIImmmmaaaaggggeeee

       This function is identical to XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww except that it
       paints both the foreground and background bits of each char-
       acter (equivalent to XXXXDDDDrrrraaaawwwwIIIImmmmaaaaggggeeeeSSSSttttrrrriiiinnnngggg).

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwIIIImmmmaaaaggggeeee (_d, _w, _f_o_n_t _l_i_s_t, _s_t_r_i_n_g, _g_c, _x, _y,    |
                                  _w_i_d_t_h, _a_l_i_g_n_m_e_n_t, _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n, _c_l_i_p);|
            DDDDiiiissssppppllllaaaayyyy  *_d;                                             |
            WWWWiiiinnnnddddoooowwww  _w;                                               |
            XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                    |
            XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                         |
            GGGGCCCC  _g_c;                                                  |
            PPPPoooossssiiiittttiiiioooonnnn _x,_y;                                            |


                                                               8-11












            DDDDiiiimmmmeeeennnnssssiiiioooonnnn _w_i_d_t_h;                                         |
            BBBByyyytttteeee  _a_l_i_g_n_m_e_n_t;                                         |
            BBBByyyytttteeee  _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n;                                  |
            XXXXRRRReeeeccccttttaaaannnngggglllleeee *_c_l_i_p;                                        |

       8.1.2.14  XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwUUUUnnnnddddeeeerrrrlllliiiinnnneeee

       This function is equivalent to XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwww with the addi-    |
       tion that if the substring identified by _u_n_d_e_r_l_i_n_e can be     |
       matched in _s_t_r_i_n_g then the substring will be underlined.      |
       Once a match has occurred, no further matches or underlining
       will be done.

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDrrrraaaawwwwUUUUnnnnddddeeeerrrrlllliiiinnnneeee (_d_i_s_p, _d, _f_o_n_t _l_i_s_t, _s_t_r_i_n_g, _g_c, _x, _y, _w_i_d_t_h,|
         aaaalllliiiiggggnnnnmmmmeeeennnntttt,,,, llllaaaayyyyoooouuuutttt____ddddiiiirrrreeeeccccttttiiiioooonnnn,,,, cccclllliiiipppp,,,, uuuunnnnddddeeeerrrrlllliiiinnnneeee))));;;;              |
            DDDDiiiissssppppllllaaaayyyy  *_d_i_s_p;                                          |
            DDDDrrrraaaawwwwaaaabbbblllleeee _d;                                              |
            XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                    |
            XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                         |
            GGGGCCCC  _g_c;                                                  |
            PPPPoooossssiiiittttiiiioooonnnn _x,_y;                                            |
            DDDDiiiimmmmeeeennnnssssiiiioooonnnn _w_i_d_t_h;                                         |
            BBBByyyytttteeee  _a_l_i_g_n_m_e_n_t;                                         |
            BBBByyyytttteeee  _l_a_y_o_u_t__d_i_r_e_c_t_i_o_n;                                  |
            XXXXRRRReeeeccccttttaaaannnngggglllleeee *_c_l_i_p;                                        |
            XXXXmmmmSSSSttttrrrriiiinnnngggg _u_n_d_e_r_l_i_n_e;                                      |

       8.1.2.15  XXXXmmmmSSSSttttrrrriiiinnnnggggEEEEmmmmppppttttyyyy

       This function determines whether a compound string is empty.  |

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggEEEEmmmmppppttttyyyy (_s_1)                                    |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1;                                              |

       This function returns True or False depending on whether not  |
       any nonzero text components exist in the provided compound
       string.  It returns True if all text segments are empty or
       if the specified string parameter is NULL, and False other-
       wise.

       8.1.2.16  XXXXmmmmSSSSttttrrrriiiinnnnggggEEEExxxxtttteeeennnntttt

       This function determines the width and height (in pixels) of
       the smallest rectangle that will enclose the specified com-
       pound string.

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggEEEExxxxtttteeeennnntttt (_f_o_n_t _l_i_s_t, _s_t_r_i_n_g, _w_i_d_t_h, _h_e_i_g_h_t)        |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                     |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |
           DDDDiiiimmmmeeeennnnssssiiiioooonnnn *_w_i_d_t_h, *_h_e_i_g_h_t;                                |



       8-12









                                           Additional Functionality


       8.1.2.17  XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeee

       This function frees the memory used by a compound string.

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeee (_s_t_r_i_n_g)                                    |
          XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                           |

       _s_t_r_i_n_g       Specifies the compound string to be freed        |

       8.1.2.18  XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeeeCCCCoooonnnntttteeeexxxxtttt

       This function instructs the Intrinsics that the context is    |
       no longer needed and will not be used without reinitializa-
       tion.

       vvvvooooiiiidddd XXXXmmmmSSSSttttrrrriiiinnnnggggFFFFrrrreeeeeeeeCCCCoooonnnntttteeeexxxxtttt (_c_o_n_t_e_x_t)                            |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnntttteeeexxxxtttt _c_o_n_t_e_x_t;                                  |

       8.1.2.19  XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttLLLLttttooooRRRR

       This function returns True if a segment can be found in the   |
       input compound string that matches the given character-set
       identifier.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttLLLLttttooooRRRR (_s_t_r_i_n_g, _c_h_a_r_s_e_t, _t_e_x_t)               |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                  |
           cccchhhhaaaarrrr  **_t_e_x_t;                                             |
       On return, _t_e_x_t will have a null-terminated octet sequence
       containing the matched segment.

       8.1.2.20  XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt

       This function returns the type and value of the next com-
       ponent in the compound string identified by the specified
       context.

       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppoooonnnneeeennnnttttTTTTyyyyppppeeee XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt (_c_o_n_t_e_x_t,      |
          _t_e_x_t, _c_h_a_r_s_e_t, _d_i_r_e_c_t_i_o_n, _u_n_k_n_o_w_n__t_a_g, _u_n_k_n_o_w_n__l_e_n_g_t_h, _u_n_k_n_o_w_n__v_a_l_u_e)
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnntttteeeexxxxtttt *_c_o_n_t_e_x_t;                                 |
           cccchhhhaaaarrrr  **_t_e_x_t;                                             |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt *_c_h_a_r_s_e_t;                                 |
           XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnn *_d_i_r_e_c_t_i_o_n;                             |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppoooonnnneeeennnnttttTTTTyyyyppppeeee *_u_n_k_n_o_w_n__t_a_g;                       |
           sssshhhhoooorrrrtttt  *_u_n_k_n_o_w_n__l_e_n_g_t_h                                    |
           cccchhhhaaaarrrr  **_u_n_k_n_o_w_n__v_a_l_u_e;                                    |

       This is a low-level component fetch function. Components are
       returned one at a time.  Only some output parameters will be
       valid on return, and this can be determined by examining the
       return status.  In the case of _t_e_x_t, _c_h_a_r_s_e_t, or _d_i_r_e_c_t_i_o_n    |


                                                               8-13












       components, only one output parameter is valid.  If the
       return status indicates that an unknown component was         |
       encountered, the _t_a_g, _l_e_n_g_t_h and _v_a_l_u_e are returned.  This
       function will allocate the space necessary to hold returned
       values; freeing this space is the caller's responsibility.

       8.1.2.21  XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttSSSSeeeeggggmmmmeeeennnntttt

       This function returns the bytes in the next segment of the
       specified compound string.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttSSSSeeeeggggmmmmeeeennnntttt (_c_o_n_t_e_x_t, _t_e_x_t, _c_h_a_r_s_e_t, _d_i_r_e_c_t_i_o_n,|
          _s_e_p_a_r_a_t_o_r)
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnntttteeeexxxxtttt *_c_o_n_t_e_x_t;                                 |
           cccchhhhaaaarrrr  **_t_e_x_t;                                             |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt *_c_h_a_r_s_e_t;                                 |
           XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnn *_d_i_r_e_c_t_i_o_n;                             |
           BBBBoooooooolllleeeeaaaannnn  *_s_e_p_a_r_a_t_o_r;                                      |

       The _t_e_x_t, _c_h_a_r_s_e_t, and _d_i_r_e_c_t_i_o_n of the fetched segment are   |
       returned.  The separator parameter indicates whether the      |
       next component of the compound string is a _s_e_p_a_r_a_t_o_r.  True   |
       or False is returned to indicate whether a valid segment was
       successfully parsed.

       8.1.2.22  XXXXmmmmSSSSttttrrrriiiinnnnggggHHHHeeeeiiiigggghhhhtttt

       This function returns the height in pixels of the sum of all
       the line heights of the given compound string.

       DDDDiiiimmmmeeeennnnssssiiiioooonnnn XXXXmmmmSSSSttttrrrriiiinnnnggggHHHHeeeeiiiigggghhhhtttt (_f_o_n_t _l_i_s_t, _s_t_r_i_n_g)                  |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                     |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |

       Separator components delimit lines.

       8.1.2.23  XXXXmmmmSSSSttttrrrriiiinnnnggggIIIInnnniiiittttCCCCoooonnnntttteeeexxxxtttt

       This function establishes the context for a subsequent
       segment-by-segment read of the specified compound string.     |

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmSSSSttttrrrriiiinnnnggggIIIInnnniiiittttCCCCoooonnnntttteeeexxxxtttt (_c_o_n_t_e_x_t, _s_t_r_i_n_g)                 |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnntttteeeexxxxtttt *_c_o_n_t_e_x_t;                                 |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |

       In order to allow applications to read the contents of a
       compound string segment-by-segment some _c_o_n_t_e_x_t needs to be   |
       maintained.  This function establishes the context for such
       a  read.  A True or False value is returned to indicate       |
       whether the input string could be parsed.



       8-14









                                           Additional Functionality


       8.1.2.24  XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLeeeennnnggggtttthhhh

       This function obtains the length of a compound string.        |

       iiiinnnntttt XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLeeeennnnggggtttthhhh (_s_1)                                       |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1;                                              |

       This function returns the number of bytes in _s_1, including    |
       the string header (0000xxxx7777ffff) and all tags, direction indicators,
       and separators.  Zero is returned if the compound string has
       an invalid structure.

       8.1.2.25  XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLiiiinnnneeeeCCCCoooouuuunnnntttt

       This function returns the number of lines of text in the
       specified compound string.                                    |

       iiiinnnntttt XXXXmmmmSSSSttttrrrriiiinnnnggggLLLLiiiinnnneeeeCCCCoooouuuunnnntttt (_s_t_r_i_n_g)                                |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |

       8.1.2.26  XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCoooonnnnccccaaaatttt

       This function appends a specified number of bytes from one
       compound string to another.

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCoooonnnnccccaaaatttt (_s_1, _s_2, _n_u_m__b_y_t_e_s)                  |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1, _s_2;                                          |
           iiiinnnntttt _n_u_m__b_y_t_e_s;                                            |

       XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCoooonnnnccccaaaatttt appends _n_u_m__b_y_t_e_s bytes from _s_2 to _s_1,
       including tags, directional indicators, and separators.  It
       then returns the resulting compound string.  If _n_u_m__b_y_t_e_s is
       less than the length of _s_2, the resulting string will not be
       a valid compound string  the original strings are preserved.
       The space for the resulting compound string is allocated
       within the function.  The application is responsible for
       managing the allocated space.  The memory can be recovered
       by calling  XXXXttttFFFFrrrreeeeeeee.

       8.1.2.27  XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCooooppppyyyy

       This function copies a specified portion of a given compound
       string.

       XXXXmmmmSSSSttttrrrriiiinnnnggggNNNNCCCCooooppppyyyy (_s_1, _n_u_m__b_y_t_e_s)                                 |
         XXXXmmmmSSSSttttrrrriiiinnnngggg _s_1;                                                |
         iiiinnnntttt _n_u_m__b_y_t_e_s;                                              |

       This function creates a copy of _s_1 which contains _n_u_m__b_y_t_e_s
       bytes from _s_1, including tags, directional indicators, and
       separators.  It then returns the resulting copy.  If


                                                               8-15












       _n_u_m__b_y_t_e_s is less than the length of _s_1, the resulting        |
       string will not be a valid compound string and the original
       string is preserved.  For this reason, you should normally
       use XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCooooppppyyyy. The space for the resulting compound
       string is allocated within the function.  The application is
       responsible for managing the allocated space.  The memory
       can be recovered by calling  XXXXttttFFFFrrrreeeeeeee.

       8.1.2.28  XXXXmmmmSSSSttttrrrriiiinnnnggggPPPPeeeeeeeekkkkNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt

       This function examines the next component that would be
       fetched by XXXXmmmmSSSSttttrrrriiiinnnnggggGGGGeeeettttNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt and returns the com-
       ponent type.

       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooommmmppppoooonnnneeeennnnttttTTTTyyyyppppeeee XXXXmmmmSSSSttttrrrriiiinnnnggggPPPPeeeeeeeekkkkNNNNeeeexxxxttttCCCCoooommmmppppoooonnnneeeennnntttt (_c_o_n_t_e_x_t)     |
           XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCoooonnnntttteeeexxxxtttt *_c_o_n_t_e_x_t;                                 |

       8.1.2.29  XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeggggmmmmeeeennnnttttCCCCrrrreeeeaaaatttteeee

       This is a high-level function that assembles a compound
       string consisting of a character-set identifier, a direction  |
       component, a text component, and, optionally, a separator
       component. If _s_e_p_a_r_a_t_o_r is False, then the compound string
       does not have a separator component at the end.  If it is
       True, the compound string has a separator component immedi-
       ately following the text component.                           |

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeggggmmmmeeeennnnttttCCCCrrrreeeeaaaatttteeee (_t_e_x_t, _c_h_a_r_s_e_t, _d_i_r_e_c_t_i_o_n, _s_e_p_a_r_a_t_o_r)|
            cccchhhhaaaarrrr  *_t_e_x_t;                                             |
            XXXXmmmmSSSSttttrrrriiiinnnnggggCCCChhhhaaaarrrrSSSSeeeetttt _c_h_a_r_s_e_t;                                 |
            XXXXmmmmSSSSttttrrrriiiinnnnggggDDDDiiiirrrreeeeccccttttiiiioooonnnn _d_i_r_e_c_t_i_o_n;                             |
            BBBBoooooooolllleeeeaaaannnn  _s_e_p_a_r_a_t_o_r;                                      |


       _t_e_x_t      Specifies a pointer to a null-terminated string.    |

       _c_h_a_r_s_e_t   Specifies the character-set identifier to be asso-  |
                 ciated with the text. This can be                   |
                 XmSTRING_DEFAULT_CHARSET.                           |

       _d_i_r_e_c_t_i_o_n Specifies the direction of the text.                |

       _s_e_p_a_r_a_t_o_r Specifies if a separator should be added to the     |
                 compound string segment being constructed.          |

       8.1.2.30  XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeppppaaaarrrraaaattttoooorrrrCCCCrrrreeeeaaaatttteeee

       This function creates a compound string with a single com-
       ponent, a _s_e_p_a_r_a_t_o_r.                                          |

       XXXXmmmmSSSSttttrrrriiiinnnngggg XXXXmmmmSSSSttttrrrriiiinnnnggggSSSSeeeeppppaaaarrrraaaattttoooorrrrCCCCrrrreeeeaaaatttteeee (_s_e_p_a_r_a_t_o_r)                  |


       8-16









                                           Additional Functionality


            BBBBoooooooolllleeeeaaaannnn _s_e_p_a_r_a_t_o_r;                                       |

       8.1.2.31  XXXXmmmmSSSSttttrrrriiiinnnnggggWWWWiiiiddddtttthhhh

       This function returns the width in pixels of the longest
       sequence of text components in the provided compound string.
       Separator components are used to delimit sequences of text
       components.

       DDDDiiiimmmmeeeennnnssssiiiioooonnnn XXXXmmmmSSSSttttrrrriiiinnnnggggWWWWiiiiddddtttthhhh (_f_o_n_t _l_i_s_t, _s_t_r_i_n_g)                   |
           XXXXmmmmFFFFoooonnnnttttLLLLiiiisssstttt _f_o_n_t _l_i_s_t;                                     |
           XXXXmmmmSSSSttttrrrriiiinnnngggg _s_t_r_i_n_g;                                          |

       8.1.3  AAAA SSSSaaaammmmpppplllleeee PPPPrrrrooooggggrrrraaaammmm

       This section contains a listing and defaults file for a sam-  |
       ple program that illustrates how you can use the compound
       string functions in applications.  This program creates a
       PushButton, the Label for which is Hello World.  Each word    |
       in the Label appears in a different font as specified in the  |
       applications-defaults file for the program.

       8.1.3.1  PPPPrrrrooooggggrrrraaaammmm LLLLiiiissssttttiiiinnnngggg

       The program listing follows.                                  |

       #include <X11/Xlib.h>                                         |
       #include <Xt/Intrinsic.h>
       #include <Xt/Shell.h>
       #include <Xm/Xm.h>
       #include <Xm/PushB.h>

       Widget toplevel,pbutton;
       Arg myArgs[10];

       void main(argc, argv)
            unsigned int argc;
            char **argv;
       {
            int i;
            XmString s1,s2,string,ButtonText;
            char *word1="Hello ",*word2="World";
            XtAppContext app_context;                                |
            char *appclass = "LAB0";

            toplevel = XtAppInitialize(&app_context, appclass, NULL, 0,|
                                         &argc, argv, NULL, NULL, 0);|
            s1=XmStringSegmentCreate(word1,"chset1",XmSTRING_DIRECTION_L_TO_R,|
                False);                                              |
            s2=XmStringSegmentCreate(word2,"chset2",XmSTRING_DIRECTION_L_TO_R,|
                True);                                               |


                                                               8-17












            string=XmStringConcat(s1,s2);

            i=0;
            XtSetArg(myArgs[i], XmNlabelString, string); i++;
            pbutton = XmCreatePushButton(toplevel,"x01",myArgs,i);
            XtManageChild(pbutton);
            XtRealizeWidget(toplevel);
            XtAppMainLoop(app_context);                              |
       }


       8.1.3.2  DDDDeeeeffffaaaauuuullllttttssss FFFFiiiilllleeee

       The applications-default file follows.                        |

       !                                                             |
       !   Apps default file LAB0 for compound string function sample program
       *foreground: Yellow                                           *
       *background: SlateBlue
       *FontList: hp8.8x16b=chset1, hp8.8x16=chset2

       Note that font lists can be specified in a defaults file by   |
       setting the font list resource to a string of the form        |
       _f_o_n_t_n_a_m_e = _c_h_a_r_a_c_t_e_r _s_e_t.  The widget will build a font list  |
       consisting of the specified font and character set.  If the
       character set is omitted, the character set will default to
       XXXXmmmmSSSSTTTTRRRRIIIINNNNGGGG____DDDDEEEEFFFFAAAAUUUULLLLTTTT____CCCCHHHHAAAARRRRSSSSEEEETTTT.

       Strings can be specified by setting the string resource to
       the desired text.  For example, ooookkkkllllaaaabbbbeeeellll....llllaaaabbbbeeeellllSSSSttttrrrriiiinnnngggg::::  OOOOKKKK
       sets a label's text to OK.  Specifying a string in a          |
       defaults file is the same as creating the string using
       XXXXmmmmSSSSttttrrrriiiinnnnggggCCCCrrrreeeeaaaatttteeeeLLLLttttooooRRRR with the default character set
       XXXXmmmmSSSSTTTTRRRRIIIINNNNGGGG____DDDDEEEEFFFFAAAAUUUULLLLTTTT____CCCCHHHHAAAARRRRSSSSEEEETTTT.

       8.2   CCCCuuuutttt aaaannnndddd PPPPaaaasssstttteeee FFFFuuuunnnnccccttttiiiioooonnnnssss

       The Motif clipboard is used to hold data that is to be
       transferred between applications.  Motif provides the func-
       tions necessary to modify the type and value of the data
       that is to be transferred via the clipboard.  These func-     |
       tions are known as cut and paste functions.  An application
       can interface to the Motif clipboard through calls to the
       cut and paste functions.

       The table below gives a brief description of each function.   |
       Detailed information on each function is presented in the
       sections that follow.                                         |





       8-18









                                           Additional Functionality


                   TTTTAAAABBBBLLLLEEEE 8888----2222....  Cut and Paste Functions               *

       FFFFuuuunnnnccccttttiiiioooonnnn NNNNaaaammmmeeee                    DDDDeeeessssccccrrrriiiippppttttiiiioooonnnn
       _______________________________________________________________________________
                                        Set up storage and data structures for clip-    |
                                        board copying.
77       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy

       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy                  Copies a data item to the clipboard.          |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee            Copies a data item passed by name.            |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy            Cancels a copy to clipboard.                  |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnddddooooCCCCooooppppyyyy              Deletes the last item placed on the clipboard.|
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy               Ends copy to clipboard.
       _______________________________________________________________________________
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeCCCCoooouuuunnnntttt          Returns the number of data item formats.      |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeFFFFoooorrrrmmmmaaaatttt         Returns a specified format name.              |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeLLLLeeeennnnggggtttthhhh         Returns the length of the stored data.        |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeePPPPeeeennnnddddiiiinnnnggggIIIItttteeeemmmmssss   Returns a list of data id/private id pairs.   |
       _______________________________________________________________________________
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee         Starts copy from clipboard.                   |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee              Retrieves a data item from the clipboard.     |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee           Ends copy from clipboard.
       _______________________________________________________________________________
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk                  Locks the clipboard.                          |
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeeggggiiiisssstttteeeerrrrFFFFoooorrrrmmmmaaaatttt        Registers a new format.
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk                Unlocks the clipboard.                        |
                                        Indicates the application no longer wants to
                                        supply a data item.
77       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddWWWWiiiitttthhhhddddrrrraaaawwwwFFFFoooorrrrmmmmaaaatttt

7                                     |7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|7|
























       8.2.1  CCCClllliiiippppbbbbooooaaaarrrrdddd CCCCooooppppyyyy FFFFuuuunnnnccccttttiiiioooonnnnssss

       The following sections describe clipboard copy functions.     |

       8.2.1.1  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy

       This function sets up storage and data structures to receive
       clipboard data.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy(_d_i_s_p_l_a_y, _w_i_n_d_o_w, _c_l_i_p__l_a_b_e_l, _t_i_m_e_s_-  |
       _t_a_m_p,
                                       _w_i_d_g_e_t, _c_a_l_l_b_a_c_k, _i_t_e_m__i_d)    |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        |
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            XXXXmmmmSSSSttttrrrriiiinnnngggg _c_l_i_p__l_a_b_e_l;;;;                                     ||||
            TTTTiiiimmmmeeee _t_i_m_e_s_t_a_m_p;;;;                                          ||||
            WWWWiiiiddddggggeeeetttt _w_i_d_g_e_t;;;;                                           ||||
            VVVVooooiiiiddddPPPPrrrroooocccc _c_a_l_l_b_a_c_k;;;;                                       ||||
            lllloooonnnngggg ****_i_t_e_m__i_d;;;;

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |




                                                               8-19












       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _c_l_i_p__l_a_b_e_l Specifies the label to be associated with the
                 data item.  This argument is used to identify the
                 data item, for example, in a clipboard viewer.  An
                 example of a label is the name of the application
                 that places the data in the clipboard.

       _t_i_m_e_s_t_a_m_p The time of the event that triggered the copy.

       _w_i_d_g_e_t    Specifies the ID of the widget that will receive
                 messages requesting data previously passed by
                 name.  This argument must be present in order to
                 pass data by name.  Any valid widget ID in your
                 application can be used for this purpose and all
                 the message handling is taken care of by the cut
                 and paste functions.                                |

       _c_a_l_l_b_a_c_k  Specifies the address of the callback function
                 that is called when the clipboard needs data that
                 was originally passed by name.  This is also the
                 callback to receive the DELETE message for items
                 that were originally passed by name.  This argu-
                 ment must be present in order to pass data by
                 name.

       _i_t_e_m__i_d   Specifies the number assigned to this data item.
                 The application uses this number in calls to
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy, XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy, and XXXXmmmmCCCClllliiiipppp----
                 bbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy function sets up storage and data
       structures to receive clipboard data.  An application calls
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy during a cut or copy operation.  The
       data item that these structures receive then becomes the      |
       next paste item in the clipboard.

       Copying a large piece of data to the clipboard can take
       time.  It is possible that, once copied, no application will
       ever request that data.  Motif provides a mechanism so that
       an application does not need to actually pass data to the
       clipboard until the data has been requested by some applica-
       tion.  Instead, the application passes format and length
       information in XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy to the clipboard functions,
       along with a widget ID and a callback function address that   |
       is passed in XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.  The widget ID is needed


       8-20









                                           Additional Functionality


       for communications between the clipboard functions in the
       application that owns the data and the clipboard functions
       in the application that requests the data.  Your callback
       functions are responsible for copying the actual data to the
       clipboard (via XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee).  The callback func-
       tion is also called if the data item is removed from the
       clipboard, and the actual data is therefore no longer
       needed.

       For more information on passing data by name, see XXXXmmmmCCCClllliiiipppp----     |
       bbbbooooaaaarrrrddddCCCCooooppppyyyy and XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee.

       The _w_i_d_g_e_t and  _c_a_l_l_b_a_c_k arguments must be present in order
       to pass data by name. The callback format is as follows:

       ffffuuuunnnnccccttttiiiioooonnnn nnnnaaaammmmeeee((((_w_i_d_g_e_t,,,, _d_a_t_a__i_d,,,, _p_r_i_v_a_t_e,,,, _r_e_a_s_o_n))))               |
            WWWWiiiiddddggggeeeetttt ****_w_i_d_g_e_t;;;;                                          ||||
            iiiinnnntttt ****_d_a_t_a__i_d;;;;                                            ||||
            iiiinnnntttt ****_p_r_i_v_a_t_e;;;;                                            ||||
            iiiinnnntttt ****_r_e_a_s_o_n;;;;                                             ||||

       _w_i_d_g_e_t    Specifies the ID of the widget passed to XXXXmmmmCCCClllliiiipppp----    |
                 bbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy                                      |

       _d_a_t_a__i_d   Specifies the identifying number returned by
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy, which identifies the pass-by-name
                 data.

       _p_r_i_v_a_t_e   Specifies the private information passed to
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy.

       _r_e_a_s_o_n    Specifies the reason, either                        |
                 XXXXmmmmCCCCRRRR____CCCCLLLLIIIIPPPPBBBBOOOOAAAARRRRDDDD____DDDDAAAATTTTAAAA____DDDDEEEELLLLEEEETTTTEEEE or                       |
                 XXXXmmmmCCCCRRRR____CCCCLLLLIIIIPPPPBBBBOOOOAAAARRRRDDDD____DDDDAAAATTTTAAAA____RRRREEEEQQQQUUUUEEEESSSSTTTT.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |






                                                               8-21












       8.2.1.2  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy

       This function copies a data item to temporary clipboard
       storage.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _i_t_e_m__i_d,,,, _f_o_r_m_a_t__n_a_m_e,,,,    |
                             _b_u_f_f_e_r,,,, _l_e_n_g_t_h,,,, _p_r_i_v_a_t_e__i_d,,,, _d_a_t_a__i_d))))    ||||
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            lllloooonnnngggg _i_t_e_m__i_d;;;;                                            ||||
            cccchhhhaaaarrrr ****_f_o_r_m_a_t__n_a_m_e;;;;                                       ||||
            cccchhhhaaaarrrr ****_b_u_f_f_e_r;;;;                                            ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg _l_e_n_g_t_h;;;;                                    ||||
            iiiinnnntttt _p_r_i_v_a_t_e__i_d;;;;                                          ||||
            iiiinnnntttt ****_d_a_t_a__i_d;;;;                                            ||||

       _d_i_s_p_l_a_y             Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy
                           structure that was returned in a previ-
                           ous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.                |

       _w_i_n_d_o_w              Specifies the window ID that relates the
                           application window to the clipboard.
                           The same application instance should
                           pass the same window ID to each of the
                           clipboard functions that it calls.  Note  |
                           that this window must be associated with  |
                           a widget.

       _i_t_e_m__i_d             Specifies the number assigned to this
                           data item.  This number was returned by
                           a previous call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.

       _f_o_r_m_a_t__n_a_m_e         Specifies the name of the format in
                           which the data item is stored on the      |
                           clipboard.  Format is referred to as      |
                           target in the _I_n_t_e_r-_C_l_i_e_n_t _C_o_m_m_u_n_i_c_a_t_i_o_n  |
                           _C_o_n_v_e_n_t_i_o_n_s _M_a_n_u_a_l.

       _b_u_f_f_e_r              Specifies the buffer from which the
                           clipboard copies the data.

       _l_e_n_g_t_h              Specifies the length of the data being
                           copied to the clipboard.

       _p_r_i_v_a_t_e__i_d          Specifies the private data that the
                           application wants to store with the data
                           item.

       _d_a_t_a__i_d             Specifies an identifying number assigned
                           to the data item that uniquely identi-
                           fies the data item and the format.  This


       8-22









                                           Additional Functionality


                           argument is required only for data that
                           is passed by name.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy function copies a data item to temporary
       clipboard storage.  The data item is moved from temporary
       storage to the clipboard data structure when a call to
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy is made.  Additional calls to XXXXmmmmCCCClllliiiipppp----
       bbbbooooaaaarrrrddddCCCCooooppppyyyy before a call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy add more data   |
       item formats to the same data item or append data to an
       existing format.

       If the  _b_u_f_f_e_r argument is NULL, the data is considered
       passed by name.  If data passed by name is later needed by
       another application, the application that owns the data
       receives a callback with a request for the data.  The appli-
       cation that owns the data must then transfer the data to the
       clipboard with the XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee function.  When a
       data item that was passed by name is deleted from the clip-
       board, the application that owns the data receives a call-
       back that states that the data is no longer needed.

       For information on the callback function, see the callback
       argument description for XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.1.3  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyybbbbyyyyNNNNaaaammmmeeee

       This function copies a data item to the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _d_a_t_a__i_d,,,, _b_u_f_f_e_r,,,,   |
                                              _l_e_n_g_t_h,,,, _p_r_i_v_a_t_e__i_d))))    ||||
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            iiiinnnntttt _d_a_t_a__i_d;;;;                                             ||||
            cccchhhhaaaarrrr ****_b_u_f_f_e_r;;;;                                            ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg _l_e_n_g_t_h;;;;                                    ||||
            iiiinnnntttt _p_r_i_v_a_t_e__i_d;;;;




                                                               8-23












       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that   ||||
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.                                             |

       _d_a_t_a__i_d   Specifies an identifying number assigned to the
                 data item that uniquely identifies the data item
                 and the format.  This number was assigned by
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy to the data item.                   |

       _b_u_f_f_e_r    Specifies the buffer from which the clipboard
                 copies the data.                                    |

       _l_e_n_g_t_h    Specifies the number of bytes in the data item.     |

       _p_r_i_v_a_t_e__i_d Specifies the private data that the application
                 wants to store with the data item.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee function copies the actual data
       for a data item that was previously passed by name to the
       clipboard.  Data is considered to be passed by name when a
       call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy is made with the _b_u_f_f_e_r parameter
       is set to NULL.  Additional calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee
       append new data to the existing data.  The clipboard should
       be locked before making such calls by using XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk   |
       to ensure the integrity of the clipboard data.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.1.4  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy

       This function cancels any copy to the clipboard that is in
       progress and frees any temporary storage in use.




       8-24









                                           Additional Functionality


       vvvvooooiiiidddd XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _i_t_e_m__i_d))))          |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            lllloooonnnngggg _i_t_e_m__i_d;;;;                                            ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _i_t_e_m__i_d   Specifies the number assigned to this data item.
                 This number was returned by a previous call to
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy function cancels any copy-to-
       clipboard that is in progress and frees any temporary
       storage in use.  When a copy is performed, XXXXmmmmCCCClllliiiipppp----
       bbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy allocates temporary storage for the clipboard
       data.  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy places the data in the temporary
       storage.  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy copies the data to the clip-
       board data structure and frees the temporary data storage.

       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy also frees up temporary storage.  If
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy is called, then XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy
       does not have to be called.  A call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCaaaannnncccceeeellllCCCCooooppppyyyy
       is valid only after a call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy and
       before a call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy.

       8.2.1.5  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnddddooooCCCCooooppppyyyy

       This function deletes the last item placed on the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnddddooooCCCCooooppppyyyy((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w))))                      |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.



                                                               8-25












       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnddddooooCCCCooooppppyyyy function deletes the last item
       placed on the clipboard if the item was placed there by an
       application with the passed _d_i_s_p_l_a_y and _w_i_n_d_o_w arguments.
       Any data item deleted from the clipboard by the original
       call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy is restored.  If the _d_i_s_p_l_a_y or _w_i_n_-
       _d_o_w IDs do not match the last copied item, no action is
       taken and this function has no effect.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrdddd SSSSuuuucccccccceeeessssssss The function is successful.                 |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.1.6  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy

       This function has several uses: to lock the clipboard, to
       place data in the clipboard data structure, and to unlock
       the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _i_t_e_m__i_d))))              |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            lllloooonnnngggg _i_t_e_m__i_d;;;;                                            ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _i_t_e_m__i_d   Specifies the number assigned to this data item.
                 This number was returned by a previous call to
                 XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy function locks the clipboard from
       access by other applications, places data in the clipboard
       data structure, and unlocks the clipboard.  Data items
       copied to the clipboard by XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy are not actually
       entered in the clipboard data structure until the call to


       8-26









                                           Additional Functionality


       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy.  It also frees the temporary storage
       that was allocated by XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.2  CCCClllliiiippppbbbbooooaaaarrrrdddd IIIInnnnqqqquuuuiiiirrrreeee FFFFuuuunnnnccccttttiiiioooonnnnssss

       This section describes the Clipboard Inquire functions,       |
       which obtain information about data in the Clipboard.

       8.2.2.1  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeCCCCoooouuuunnnntttt

       This function returns the maximum length for all data item
       formats.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeCCCCoooouuuunnnntttt ((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _c_o_u_n_t,,,,          |
            _m_a_x__f_o_r_m_a_t__n_a_m_e__l_e_n_g_t_h))))                                  ||||
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            iiiinnnntttt ****_c_o_u_n_t;;;;                                              ||||
            iiiinnnntttt ****_m_a_x__f_o_r_m_a_t__n_a_m_e__l_e_n_g_t_h;;;;

       _d_i_s_p_l_a_y             Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy
                           structure that was returned in a previ-
                           ous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.                |

       _w_i_n_d_o_w              Specifies the window ID that relates the
                           application window to the clipboard.
                           The same application instance should
                           pass the same window ID to each of the
                           clipboard functions that it calls.  Note  |
                           that this window must be associated with  |
                           a widget.

       _c_o_u_n_t               Returns the number of data item formats
                           available for the next paste item in the  |
                           clipboard.  If no formats are available,
                           this argument equals zero.  The count
                           includes the formats that were passed by
                           name.


                                                               8-27












       _m_a_x__f_o_r_m_a_t__n_a_m_e__l_e_n_g_t_h Specifies the maximum length of all    |
                           format names for the next paste item in
                           the clipboard.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeCCCCoooouuuunnnntttt function returns the number of
       data item formats available for the next paste item in the    |
       clipboard.  This function also returns the maximum name
       length for all formats in which the next paste item is        |
       stored.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       CCCClllliiiippppBBBBooooaaaarrrrddddNNNNooooDDDDaaaattttaaaa The function could not find data on the
                      clipboard that corresponds to the format
                      requested.  This could occur because the
                      clipboard is empty, there is no data on the
                      clipboard in the format requested, or the
                      data requested was passed by name and is no
                      longer available.                              |

       8.2.2.2  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeFFFFoooorrrrmmmmaaaatttt

       This function obtains the format name for the next paste
       data item in the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeFFFFoooorrrrmmmmaaaatttt((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _i_n_d_e_x,,,,          |
       _f_o_r_m_a_t__n_a_m_e__b_u_f,,,,
                                              _b_u_f_f_e_r__l_e_n,,,,            ||||
       _c_o_p_i_e_d__l_e_n))))
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            iiiinnnntttt _i_n_d_e_x;;;;                                               ||||
            cccchhhhaaaarrrr ****_f_o_r_m_a_t__n_a_m_e__b_u_f;;;;                                   ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg _b_u_f_f_e_r__l_e_n;;;;                                ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg ****_c_o_p_i_e_d__l_e_n;;;;                               ||||

       _d_i_s_p_l_a_y             Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy
                           structure that was returned in a previ-
                           ous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.                |



       8-28









                                           Additional Functionality


       _w_i_n_d_o_w              Specifies the window ID that relates the
                           application window to the clipboard.
                           The same application instance should
                           pass the same window ID to each of the
                           clipboard functions that it calls.  Note  |
                           that this window must be associated with  |
                           a widget.                                 |

       _i_n_d_e_x               Specifies which of the ordered format
                           names to be obtained.  If this index _i
                           is greater than the number of formats
                           for the data item, XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeee----
                           FFFFoooorrrrmmmmaaaatttt returns a zero in the _c_o_p_i_e_d__l_e_n
                           argument.

       _f_o_r_m_a_t__n_a_m_e__b_u_f     Specifies the buffer that receives the
                           format name.

       _b_u_f_f_e_r__l_e_n          Specifies the number of bytes in the
                           format name buffer.

       _c_o_p_i_e_d__l_e_n          Specifies the number of bytes in the
                           string copied to the buffer.  If this
                           argument equals zero, there is no _n_t_h
                           format for the next paste item.           |

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeFFFFoooorrrrmmmmaaaatttt function returns a specified
       format name for the next paste item in the clipboard.  If     |
       the name must be truncated, the function returns a warning
       status.  This function can return one of the following
       status return constants:                                      |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd  The function failed because the clipboard
                        was locked by another application.  The
                        application can continue to call the func-
                        tion again with the same parameters until
                        the lock goes away.  This gives the appli-
                        cation the opportunity to ask if the user
                        wants to keep trying or to give up on the    |
                        operation.                                   |

       CCCClllliiiippppbbbbooooaaaarrrrddddTTTTrrrruuuunnnnccccaaaatttteeee The data returned is truncated because the
                        user did not provide a buffer that was
                        large enough to hold the data.               |

       CCCClllliiiippppBBBBooooaaaarrrrddddNNNNooooDDDDaaaattttaaaa  The function could not find data on the
                        clipboard that corresponds to the format
                        requested.  This could occur because the
                        clipboard is empty, there is no data on the


                                                               8-29












                        clipboard in the format requested, or the
                        data requested was passed by name and is no
                        longer available.                            |

       8.2.2.3  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeLLLLeeeennnnggggtttthhhh

       This function obtains the length of the data stored under a
       specified format.                                             |

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeLLLLeeeennnnggggtttthhhh((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,,                 |
            _f_o_r_m_a_t__n_a_m_e,,,, _l_e_n_g_t_h))))                                     ||||
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            cccchhhhaaaarrrr ****_f_o_r_m_a_t__n_a_m_e;;;;                                       ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg ****_l_e_n_g_t_h;;;;                                   ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _f_o_r_m_a_t__n_a_m_e Specifies the name of the format for the next     |
                 paste item.

       _l_e_n_g_t_h    Specifies the length of the next data item in the
                 specified format.  This argument equals zero if no
                 data is found for the specified format, or if
                 there is no item on the clipboard.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeLLLLeeeennnnggggtttthhhh function returns the length of
       the data stored under a specified format name for the clip-
       board data item.  This is accomplished by passing a pointer
       to the length in the _l_e_n_g_t_h parameter in the function.

       If no data is found for the specified format, or if there is
       no item on the clipboard, XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeeLLLLeeeennnnggggtttthhhh returns a
       value of zero.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function


       8-30









                                           Additional Functionality


                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       CCCClllliiiippppBBBBooooaaaarrrrddddNNNNooooDDDDaaaattttaaaa The function could not find data on the
                      clipboard that corresponds to the format
                      requested.  This could occur because the
                      clipboard is empty, there is no data on the
                      clipboard in the format requested, or the
                      data requested was passed by name and is no
                      longer available.                              |

       8.2.2.4  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeePPPPeeeennnnddddiiiinnnnggggIIIItttteeeemmmmssss

       This function obtains a format name's list of data ID or      |
       private ID pairs.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeePPPPeeeennnnddddiiiinnnnggggIIIItttteeeemmmmssss((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,,           |
       _f_o_r_m_a_t__n_a_m_e,,,,
                                                    _i_t_e_m__l_i_s_t,,,,       ||||
       _c_o_u_n_t))))
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            cccchhhhaaaarrrr ****_f_o_r_m_a_t__n_a_m_e;;;;                                       ||||
            XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddPPPPeeeennnnddddiiiinnnnggggLLLLiiiisssstttt ****_i_t_e_m__l_i_s_t;;;;                       ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg ****_c_o_u_n_t;;;;

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _f_o_r_m_a_t__n_a_m_e Specifies a string that contains the name of the
                 format for which the list of data ID/private ID     |
                 pairs is to be obtained.

       _i_t_e_m__l_i_s_t Specifies the address of the array of data          |
                 ID/private ID pairs for the specified format name.
                 This argument is a type XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddPPPPeeeennnnddddiiiinnnnggggLLLLiiiisssstttt.
                 The application is responsible for freeing the
                 memory provided by this function for storing the
                 list.

       _i_t_e_m__c_o_u_n_t Specifies the number of items returned in the
                 list.  If there is no data for the specified


                                                               8-31












                 format name, or if there is no item on the clip-
                 board, this argument equals zero.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddIIIInnnnqqqquuuuiiiirrrreeeePPPPeeeennnnddddiiiinnnnggggIIIItttteeeemmmmssss function returns a list    |
       of data ID/private ID pairs for a specified format name.
       For the purposes of this function, a data item is considered
       pending if the application originally passed it by name, the  |
       application has not yet copied the data, and the item has     |
       not been deleted from the clipboard.

       The application is responsible for freeing the memory pro-
       vided by this function to store the list.

       This function is used by an application when exiting to
       determine if the data that it passed by name should be sent
       to the clipboard.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.3  CCCClllliiiippppbbbbooooaaaarrrrdddd RRRReeeettttrrrriiiieeeevvvveeee FFFFuuuunnnnccccttttiiiioooonnnnssss

       This section describes the Clipboard Retrieve functions,      |
       which you use to retrieve data from the Clipboard.

       8.2.3.1  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee

       This function begins copying data incrementally from the
       clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee (_d_i_s_p_l_a_y, _w_i_n_d_o_w, _t_i_m_e_s_t_a_m_p);    |
          DDDDiiiissssppppllllaaaayyyy *_d_i_s_p_l_a_y;                                          |
          WWWWiiiinnnnddddoooowwww   _w_i_n_d_o_w;                                           |
          TTTTiiiimmmmeeee     _t_i_m_e_s_t_a_m_p;                                        |

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to


       8-32









                                           Additional Functionality


                 each of the clipboard functions that it calls.

       _t_i_m_e_s_t_a_m_p The time of the event that triggered the copy.

       This routine tells the cut and paste routines that the        |
       application is ready to start copying an item from the clip-
       board.  The clipboard will be locked by this routine and
       will stay locked until XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee is called.
       Between an XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee and an XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeee----
       ttttrrrriiiieeeevvvveeee, multiple calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee with the same
       format name will result in data being incrementally copied
       from the clipboard until the data in that format has all
       been copied.  The return value CCCClllliiiippppbbbbooooaaaarrrrddddTTTTrrrruuuunnnnccccaaaatttteeee from calls
       to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee indicates that more data remains to
       be copied in the given format.  It is recommended that any
       calls to the INQUIRE functions that the application needs to
       make to effect the copy from the clipboard be made between
       the call to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee and the first call to
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee.  That way, the application does not
       need to call XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk and XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk.  Appli-
       cations do not need to use XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee and
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee, in which case XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee
       works as it did before.                                       |

       8.2.3.2  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee

       This function obtains the current next paste data item from
       clipboard storage.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _f_o_r_m_a_t__n_a_m_e,,,,         |
       _b_u_f_f_e_r,,,,
                    _l_e_n_g_t_h,,,, _n_u_m__b_y_t_e_s,,,, _p_r_i_v_a_t_e__i_d))))                   ||||
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            cccchhhhaaaarrrr ****_f_o_r_m_a_t__n_a_m_e;;;;                                       ||||
            cccchhhhaaaarrrr ****_b_u_f_f_e_r;;;;                                            ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg _l_e_n_g_t_h;;;;                                    ||||
            uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg ****_n_u_m__b_y_t_e_s;;;;                                ||||
            iiiinnnntttt ****_p_r_i_v_a_t_e__i_d;;;;

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.




                                                               8-33












       _f_o_r_m_a_t__n_a_m_e Specifies the name of a format in which the data
                 is stored on the clipboard.

       _b_u_f_f_e_r    Specifies the buffer to which the application
                 wants the clipboard to copy the data.               |

       _l_e_n_g_t_h    Specifies the length of the application buffer.

       _n_u_m__b_y_t_e_s Specifies the number of bytes of data copied into
                 the application buffer.

       _p_r_i_v_a_t_e__i_d Specifies the private data stored with the data
                 item by the application that placed the data item
                 on the clipboard.  If the application did not
                 store private data with the data item, this argu-
                 ment returns zero.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee function retrieves the current data
       item from clipboard storage.  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee returns a   *
       warning under the following circumstances:

          +o The data needs to be truncated because the buffer
            length is too short.

          +o The clipboard is locked.

          +o There is no data on the clipboard.

       This function can return one of the following status return   *
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd  The function failed because the clipboard
                        was locked by another application.  The
                        application can continue to call the func-
                        tion again with the same parameters until
                        the lock goes away.  This gives the appli-
                        cation the opportunity to ask if the user
                        wants to keep trying or to give up on the
                        operation.                                   |

       CCCClllliiiippppbbbbooooaaaarrrrddddTTTTrrrruuuunnnnccccaaaatttteeee The data returned is truncated because the
                        user did not provide a buffer that was
                        large enough to hold the data.               |

       CCCClllliiiippppbbbbooooaaaarrrrddddNNNNooooDDDDaaaattttaaaa  The function could not find data on the
                        clipboard corresponding to the format
                        requested.  This could occur because (1)
                        the clipboard is empty; (2) there is data
                        on the clipboard but not in the requested


       8-34









                                           Additional Functionality


                        format; and (3) the data in the requested    |
                        format was passed by name and is no longer   |
                        available.                                   |

       8.2.3.3  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee

       This function suspends copying data incrementally from the
       clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee (_d_i_s_p_l_a_y, _w_i_n_d_o_w);                 |
          DDDDiiiissssppppllllaaaayyyy *_d_i_s_p_l_a_y;                                          |
          WWWWiiiinnnnddddoooowwww   _w_i_n_d_o_w;                                           |

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that   |
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.

       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee tells the cut and paste routines the
       application is through copying an item to the clipboard.
       Until XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee is called, data items can be
       retrieved incrementally from the clipboard by calling
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeettttrrrriiiieeeevvvveeee.  If the application calls XXXXmmmmCCCClllliiiipppp----
       bbbbooooaaaarrrrddddSSSSttttaaaarrrrttttRRRReeeettttrrrriiiieeeevvvveeee, it has to call XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee.
       If data is not being copied incrementally, XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrr----
       ttttRRRReeeettttrrrriiiieeeevvvveeee and XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddRRRReeeettttrrrriiiieeeevvvveeee do not need to be
       called.

       8.2.4  MMMMiiiisssscccceeeellllllllaaaannnneeeeoooouuuussss CCCClllliiiippppbbbbooooaaaarrrrdddd FFFFuuuunnnnccccttttiiiioooonnnnssss

       This section describes several additional clipboard func-     |
       tions.

       8.2.4.1  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk

       This function locks the clipboard from access by other
       applications.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w))))                          |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that   ||||
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to


                                                               8-35












                 each of the clipboard functions that it calls.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk function locks the clipboard from access
       by another application until you call XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk.
       All clipboard functions lock and unlock the clipboard to
       prevent simultaneous access.  The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk and
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk functions allow the application to keep
       the clipboard data from changing between calls to the
       inquire functions and other clipboard functions.  The appli-
       cation does not need to lock the clipboard between calls to
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddSSSSttttaaaarrrrttttCCCCooooppppyyyy and XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddEEEEnnnnddddCCCCooooppppyyyy, but it should
       do so before multiple calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee.

       If the clipboard is already locked by another application,
       XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk returns an error status.

       Multiple calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk by the same application
       increase the lock level.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.4.2  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeeggggiiiisssstttteeeerrrrFFFFoooorrrrmmmmaaaatttt

       This function registers a new format.

       iiiinnnntttt CCCClllliiiippppbbbbooooaaaarrrrddddRRRReeeeggggiiiisssstttteeeerrrrFFFFoooorrrrmmmmaaaatttt (_d_i_s_p_l_a_y, _f_o_r_m_a_t__n_a_m_e, _f_o_r_m_a_t__l_e_n_g_t_h)|
          DDDDiiiissssppppllllaaaayyyy      *_d_i_s_p_l_a_y;                                     |
          cccchhhhaaaarrrr         *_f_o_r_m_a_t__n_a_m_e;                                 |
          uuuunnnnssssiiiiggggnnnneeeedddd lllloooonnnngggg _f_o_r_m_a_t__l_e_n_g_t_h;                               |

       _d_i_s_p_l_a_y     Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure      |
                   that was returned in a previous call to XXXXttttOOOOppppeeeennnn----   |
                   DDDDiiiissssppppllllaaaayyyy.

       _f_o_r_m_a_t__n_a_m_e Specifies the string name for the new format.

       _f_o_r_m_a_t__l_e_n_g_t_h Specifies the format length in bits (8, 16, or
                   32).




       8-36









                                           Additional Functionality


       Each format stored on the clipboard should have a length
       associated with it and known to the cut and paste routines.
       All of the formats specified by the _I_n_t_e_r-_C_l_i_e_n_t _C_o_m_m_u_n_i_c_a_-   |
       _t_i_o_n _C_o_n_v_e_n_t_i_o_n_s _M_a_n_u_a_l are pre-registered (formats are       |
       referred to as targets in the ICCCM).  Any other format that
       the application wants to use must be registered via this
       routine.  Failure to register the length of the data will
       result in applications not being compatible across platforms
       having different byte swapping orders.

       8.2.4.3  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk

       This function unlocks the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _r_e_m_o_v_e__a_l_l__l_o_c_k_s))))      |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            BBBBoooooooolllleeeeaaaannnn _r_e_m_o_v_e__a_l_l__l_o_c_k_s;;;;                                ||||

       _d_i_s_p_l_a_y        Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure
                      that was returned in a previous call to XXXXttttOOOO----   |
                      ppppeeeennnnDDDDiiiissssppppllllaaaayyyy.                                    |

       _w_i_n_d_o_w         Specifies the window ID that relates the
                      application window to the clipboard.  The
                      same application instance should pass the
                      same window ID to each of the clipboard func-
                      tions that it calls.  Note that this window    |
                      must be associated with a widget.              |

       _r_e_m_o_v_e__a_l_l__l_o_c_k_s Specifies a Boolean value that, when True,
                      indicates that all nested locks should be
                      removed.  If False, indicates that only one    |
                      level of lock should be removed.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk function unlocks the clipboard, ena-
       bling it to be accessed by other applications.

       If multiple calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkk have occurred, then the  |
       same number of calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddUUUUnnnnlllloooocccckkkk is necessary to
       unlock the clipboard, unless the _r_e_m_o_v_e__a_l_l__l_o_c_k_s argument    |
       is True.

       The application should lock the clipboard before making mul-
       tiple calls to XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyyBBBByyyyNNNNaaaammmmeeee and should unlock the
       clipboard after completion.

       This function can return one of the following status return
       constants:                                                    |




                                                               8-37












       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |

       8.2.4.4  XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddWWWWiiiitttthhhhddddrrrraaaawwwwFFFFoooorrrrmmmmaaaatttt

       This function indicates that the application is no longer
       willing to supply a data item to the clipboard.

       iiiinnnntttt XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddWWWWiiiitttthhhhddddrrrraaaawwwwFFFFoooorrrrmmmmaaaatttt((((_d_i_s_p_l_a_y,,,, _w_i_n_d_o_w,,,, _d_a_t_a__i_d))))       |
            DDDDiiiissssppppllllaaaayyyy ****_d_i_s_p_l_a_y;;;;                                        ||||
            WWWWiiiinnnnddddoooowwww _w_i_n_d_o_w;;;;                                           ||||
            iiiinnnntttt _d_a_t_a__i_d;;;;                                             ||||

       _d_i_s_p_l_a_y   Specifies a pointer to the DDDDiiiissssppppllllaaaayyyy structure that
                 was returned in a previous call to XXXXttttOOOOppppeeeennnnDDDDiiiissssppppllllaaaayyyy.   |

       _w_i_n_d_o_w    Specifies the window ID that relates the applica-
                 tion window to the clipboard.  The same applica-
                 tion instance should pass the same window ID to
                 each of the clipboard functions that it calls.      |
                 Note that this window must be associated with a     |
                 widget.

       _d_a_t_a__i_d   Specifies an identifying number assigned to the
                 data item that uniquely identifies the data item
                 and the format.  This was assigned to the item
                 when it was originally passed by XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddCCCCooooppppyyyy.

       The XXXXmmmmCCCClllliiiippppbbbbooooaaaarrrrddddWWWWiiiitttthhhhddddrrrraaaawwwwFFFFoooorrrrmmmmaaaatttt function indicates that the     |
       application will no longer supply a data item to the clip-
       board that the application had previously passed by name.

       This function can return one of the following status return
       constants:                                                    |

       CCCClllliiiippppbbbbooooaaaarrrrddddSSSSuuuucccccccceeeessssssss The function is successful.                  |

       CCCClllliiiippppbbbbooooaaaarrrrddddLLLLoooocccckkkkeeeedddd The function failed because the clipboard
                      was locked by another application.  The
                      application can continue to call the function
                      again with the same parameters until the lock
                      goes away.  This gives the application the
                      opportunity to ask if the user wants to keep
                      trying or to give up on the operation.         |


       8-38









                                           Additional Functionality


       8.3  DDDDyyyynnnnaaaammmmiiiicccc RRRReeeessssoooouuuurrrrcccceeee DDDDeeeeffffaaaauuuullllttttiiiinnnngggg

       Dynamic resource defaulting is a mechanism that incorporates
       a processing function into a widget's resource definitions.
       The widget can use this mechanism to calculate a default
       resource value when it (the widget) is created, instead of
       having the resource default be static.  The widget set uses
       this capability to determine much of its visual resource
       defaults at run time.  This allows the widget to make more
       sensible choices for color and pixmap defaults.

       All of the color resources and pixmap resources that
       represent visual data are dynamically defaulted.  This
       includes the resources XXXXmmmmNNNNffffoooorrrreeeeggggrrrroooouuuunnnndddd,,,, XXXXmmmmNNNNbbbbaaaacccckkkkggggrrrroooouuuunnnndddd,,,,
       XXXXmmmmNNNNbbbbaaaacccckkkkggggrrrroooouuuunnnnddddPPPPiiiixxxxmmmmaaaapppp,,,, XXXXmmmmNNNNttttooooppppSSSShhhhaaaaddddoooowwwwCCCCoooolllloooorrrr,,,, XXXXmmmmNNNNttttooooppppSSSShhhhaaaaddddoooowwwwPPPPiiiixxxxmmmmaaaapppp,,,,
       XXXXmmmmNNNNbbbboooottttttttoooommmmSSSShhhhaaaaddddoooowwwwCCCCoooolllloooorrrr,,,, XXXXmmmmNNNNbbbboooottttttttoooommmmSSSShhhhaaaaddddoooowwwwPPPPiiiixxxxmmmmaaaapppp,,,,
       XXXXmmmmNNNNhhhhiiiigggghhhhlllliiiigggghhhhttttCCCCoooolllloooorrrr, and XXXXmmmmNNNNhhhhiiiigggghhhhlllliiiigggghhhhttttPPPPiiiixxxxmmmmaaaapppp.

       Color and pixmap data are set as follows:                     |

          +o Set to black and white if a monochrome system is used    |

          +o If a color system is used:                               |

               - A default color scheme, or                          |

               - A color scheme based on the background resource,
                 XXXXmmmmNNNNbbbbaaaacccckkkkggggrrrroooouuuunnnndddd.

       Part of the design for the widget set and window manager      |
       includes an algorithmic approach for generating color
       schemes.  This means that by specifying the background
       color, the foreground and two shadowing colors are calcu-
       lated.

       8.4  LLLLooooccccaaaalllliiiizzzzaaaattttiiiioooonnnn

       The Motif toolkit supports the Xt Intrinsics mechanisms for   |
       localization of resource files.  You can specify a language   |
       by using the xxxxnnnnllllLLLLaaaannnngggguuuuaaaaggggeeee resource or the LLLLAAAANNNNGGGG environment     |
       variable.  Elements of this variable are then used to estab-  |
       lish a path to the proper resource files.  The following      |
       substitutions are used in building the path:

          +o %N is replaced by class name of the application.         |

          +o %L is replaced by the display's language specification   |
            (from the xxxxnnnnllllLLLLaaaannnngggguuuuaaaaggggeeee resource or, if that resource is   |
            not defined, the LLLLAAAANNNNGGGG environment variable).




                                                               8-39












          +o %l is replaced by the language part of the language      |
            specification.

          +o %t is replaced by the territory part of the language     |
            specification.

          +o %c is replaced by the codeset part of the language       |
            specification.

          +o %% is replaced by %.

       If the xxxxnnnnllllLLLLaaaannnngggguuuuaaaaggggeeee resource or the LLLLAAAANNNNGGGG environment variable  |
       is not defined, or if one of its parts is missing, then a %   |
       element that references it is replaced by NULL.

       The paths contain a series of elements separated by colons.
       Each element denotes a filename, and the filenames are        |
       looked up left-to-right until one of them succeeds.  Before   |
       doing the lookup, substitutions are performed.

       NNNNOOOOTTTTEEEE: The Intrinsics use the X/Open convention of collapsing  |
       multiple adjoining slashes in a filename into one slash.

       The XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttaaaalllliiiizzzzeeee function loads the resource database   |
       by merging in resources from these sources, in order:

          +o Application-specific class resource file on the local    |
            host

          +o Application-specific user resource file on the local     |
            host

          +o Resource property on the server or user preference
            resource file on the local host                          |

          +o Per-host user environment resource file on the local     |
            host

          +o The application command line                             |

       To load the application-specific class resource file,         |
       XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee performs the appropriate substitutions    |
       on the path specified by the XXXXFFFFIIIILLLLEEEESSSSEEEEAAAARRRRCCCCHHHHPPPPAAAATTTTHHHH environment      |
       variable.  If that fails, or if XXXXFFFFIIIILLLLEEEESSSSEEEEAAAARRRRCCCCHHHHPPPPAAAATTTTHHHH is not        |
       defined, XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee uses the following as the path:

       ////uuuussssrrrr////lllliiiibbbb////XXXX11111111////%%%%LLLL////aaaapppppppp----ddddeeeeffffaaaauuuullllttttssss////%%%%NNNN::::////uuuussssrrrr////lllliiiibbbb////XXXX11111111////%%%%llll////aaaapppppppp----          |
       ddddeeeeffffaaaauuuullllttttssss////%%%%NNNN::::////uuuussssrrrr////lllliiiibbbb////XXXX11111111////aaaapppppppp----ddddeeeeffffaaaauuuullllttttssss////%%%%NNNN

       If the language is not specified (or the first path lookup    |
       using the language specification fails), the lookup defaults  |


       8-40









                                           Additional Functionality


       to the current non-language-specific location                 |
       (////uuuussssrrrr////lllliiiibbbb////XXXX11111111////aaaapppppppp____ddddeeeeffffaaaauuuullllttttssss////%%%%NNNN).

       If no application-specific class resource file is found,      |
       XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee looks for any fallback resources that     |
       may have been defined by a call to XXXXttttAAAAppppppppIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee or         |
       XXXXttttAAAAppppppppSSSSeeeettttFFFFaaaallllllllbbbbaaaacccckkkkRRRReeeessssoooouuuurrrrcccceeeessss.

       To load the user's application resource file, XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiii----   |
       ttttiiiiaaaalllliiiizzzzeeee performs the following steps:

         1.  Use XXXXUUUUSSSSEEEERRRRFFFFIIIILLLLEEEESSSSEEEEAAAARRRRCCCCHHHHPPPPAAAATTTTHHHH to look up the file, perform-   |
             ing appropriate substitutions.

         2.  If that fails, or if XXXXUUUUSSSSEEEERRRRFFFFIIIILLLLEEEESSSSEEEEAAAARRRRCCCCHHHHPPPPAAAATTTTHHHH is not         |
             defined, and if XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR is defined, use the fol-
             lowing as the path:                                     |

             $$$$XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR////%%%%LLLL////%%%%NNNN::::$$$$XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR////%%%%llll////%%%%NNNN::::$$$$XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR////%%%%NNNN::::$$$$HHHHOOOOMMMMEEEE////%%%%NNNN|

             where $$$$XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR is the value of the XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR      |
             environment variable and $$$$HHHHOOOOMMMMEEEE is the user's home       |
             directory.                                              |

         3.  If XXXXAAAAPPPPPPPPLLLLRRRREEEESSSSDDDDIIIIRRRR is not defined, use the following as     |
             the path:                                               |

             $$$$HHHHOOOOMMMMEEEE////%%%%LLLL////%%%%NNNN::::$$$$HHHHOOOOMMMMEEEE////%%%%llll////%%%%NNNN::::$$$$HHHHOOOOMMMMEEEE////%%%%NNNN

       To load the server resource property or user preference       |
       file, XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee first looks for a RESOURCE_MANAGER  |
       property on the root window of the display's screen 0.  If    |
       that property does not exist, XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee looks for   |
       the file $$$$HHHHOOOOMMMMEEEE////....XXXXddddeeeeffffaaaauuuullllttttssss.                                    |

       To load the per-host user environment resources, XXXXttttDDDDiiiissssppppllllaaaayyyy----   |
       IIIInnnniiiittttiiiiaaaalllliiiizzzzeeee uses the filename specified by the XXXXEEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT    |
       environment variable.  If XXXXEEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT is not defined,        |
       XXXXttttDDDDiiiissssppppllllaaaayyyyIIIInnnniiiittttiiiiaaaalllliiiizzzzeeee looks for the file $$$$HHHHOOOOMMMMEEEE////....XXXXddddeeeeffffaaaauuuullllttttssss----      |
       _h_o_s_t, where _h_o_s_t is the name of the host on which the appli-  |
       cation is running.

       8.5  PPPPiiiixxxxmmmmaaaapppp CCCCaaaacccchhhhiiiinnnngggg FFFFuuuunnnnccccttttiiiioooonnnnssss

       The pixmap caching functions provide the application and
       widget writer with a means of associating an image with a
       name.  Given this association, these functions can generate
       pixmaps through references to a ....XXXXddddeeeeffffaaaauuuullllttttssss file (by name)     |
       and through an argument list (by pixmap), for all widgets
       that have pixmap resources.  A cache of all pixmaps is
       automatically maintained.  This improves performance and


                                                               8-41












       decreases server data space when requesting identical pix-
       maps.

       The pixmap caching provides four functions by which the
       application or widget writer can install images, uninstall
       images, create pixmaps, and destroy pixmaps.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmIIIInnnnssssttttaaaallllllllIIIImmmmaaaaggggeeee (_i_m_a_g_e, _i_m_a_g_e__n_a_m_e)                    |
           XXXXIIIImmmmaaaaggggeeee    * _i_m_a_g_e;                                        |
           cccchhhhaaaarrrr      * _i_m_a_g_e__n_a_m_e;                                   |

       _i_m_a_g_e     Points to the image structure to be installed.      |
                 The installation process does not make a local
                 copy of the image, therefore the application
                 should not destroy the image until it is installed
                 from the caching functions.

       _i_m_a_g_e__n_a_m_e Specifies a string that the application uses to    |
                 name the image.  After installation, this name can  |
                 be used in a ....XXXXddddeeeeffffaaaauuuullllttttssss file for referencing the
                 image.  A local copy of the name is created by the
                 image caching functions.

       XXXXmmmmIIIInnnnssssttttaaaallllllllIIIImmmmaaaaggggeeee is used to give to the caching routines an
       image that can later be used to generate a pixmap.  Part of
       the installation process is to extend the resource converter
       used to reference these images.  The resource converter can
       access the image name so that the image can be referenced in  |
       a ....XXXXddddeeeeffffaaaauuuullllttttssss file.  Since an image can be referenced by a
       widget through its pixmap resources, it is up to the appli-
       cation to ensure that the image is installed before the
       widget is created.  _i_m_a_g_e is a pointer to the image struc-
       ture to be installed.  The installation process does not
       make a local copy of the image.  Therefore, the application
       should not destroy the image until it is uninstalled from
       the caching functions.  _i_m_a_g_e__n_a_m_e is a string the applica-
       tion uses to name the image.  After installation this name    |
       can be used in a ....XXXXddddeeeeffffaaaauuuullllttttssss file for referencing the image.
       A local copy of the name is created by the image caching
       functions.

       The image caching functions provide a set of eight prein-
       stalled images.  These names can be used within a ....XXXXddddeeeeffffaaaauuuullllttttssss  |
       file for generating pixmaps for the resource they are pro-
       vided for.                                                    |








       8-42









                                           Additional Functionality


                     TTTTAAAABBBBLLLLEEEE 8888----3333....  Preinstalled Images

       IIIImmmmaaaaggggeeee NNNNaaaammmmeeee      DDDDeeeessssccccrrrriiiippppttttiiiioooonnnn
       ____________________________________________________________
       background      A tile of solid background
       25_foreground   A tile of 25% foreground, 75% background
       50_foreground   A tile of 50% foreground, 50% background
       75_foreground   A tile of 75% foreground, 25% background
       horizontal      A tile of horizontal lines of the two colors
       vertical        A tile of vertical lines of the two colors
       slant_right     A tile of slanting lines of the two colors
       slant_left      A tile of slanting lines of the two colors
7                    |7|7|7|7|7|7|7|7|7|










       BBBBoooooooolllleeeeaaaannnn XXXXmmmmUUUUnnnniiiinnnnssssttttaaaallllllllIIIImmmmaaaaggggeeee (_i_m_a_g_e)                              |
           XXXXmmmmIIIImmmmaaaaggggeeee    *_i_m_a_g_e;                                        |

       _i_m_a_g_e     Points to the image structure given to the XXXXmmmmIIIInnnn----
                 ssssttttaaaallllllllIIIImmmmaaaaggggeeee routine                                  |

       XmUninstallImage provides the mechanism by which an image
       can be removed from the caching routines.  _i_m_a_g_e is a         |
       pointer to the image given to the XXXXmmmmIIIInnnnssssttttaaaallllllllIIIImmmmaaaaggggeeee routine.

       An application or widget makes a call to extract a pixmap
       when the images have been installed or to access a set of
       the predefined images.  When an application or widget is
       finished with a pixmap, it can call a function to destroy     |
       the pixmap.  These functions are defined as follows:

       PPPPiiiixxxxmmmmaaaapppp XXXXmmmmGGGGeeeettttPPPPiiiixxxxmmmmaaaapppp (_s_c_r_e_e_n, _i_m_a_g_e__n_a_m_e, _f_o_r_e_g_r_o_u_n_d, _b_a_c_k_-     |
       _g_r_o_u_n_d)
          SSSSccccrrrreeeeeeeennnn   * _s_c_r_e_e_n;                                         |
          cccchhhhaaaarrrr     * _i_m_a_g_e__n_a_m_e;                                     |
          PPPPiiiixxxxeeeellll    _f_o_r_e_g_r_o_u_n_d;                                       |
          PPPPiiiixxxxeeeellll    _b_a_c_k_g_r_o_u_n_d;                                       |

       _s_c_r_e_e_n    Specifies the display screen on which the pixmap
                 is to be drawn and is used to ensure that the pix-
                 map matches the visual required for the screen.

       _i_m_a_g_e__n_a_m_e Specifies the name of the image to be used to
                 generate the pixmap.

       _f_o_r_e_g_r_o_u_n_d Combines the image with the foreground color to    |
                 create the pixmap if the image referenced is a
                 bit-per-pixel image.

       _b_a_c_k_g_r_o_u_n_d Combines the image with the background color to    |
                 create the pixmap if the image referenced is a
                 bit-per-pixel image.



                                                               8-43












       XXXXmmmmGGGGeeeettttPPPPiiiixxxxmmmmaaaapppp uses the parameter data to perform a lookup in
       the pixmap cache to see if a pixmap has already been gen-
       erated that matches the data for the specified screen.  If
       one is found, a reference count is incremented and the pix-
       map is returned.  If one is not found, the image correspond-
       ing to _i_m_a_g_e__n_a_m_e is used to generate a pixmap which is then
       cached and returned.  _s_c_r_e_e_n contains the display screen on
       which the pixmap is to be drawn and is used to ensure the
       pixmap matches the visual required for the screen.
       _i_m_a_g_e__n_a_m_e is the name of the image to be used to generate
       the pixmap.  If a bit-per-pixel image is being accessed,      |
       _f_o_r_e_g_r_o_u_n_d and _b_a_c_k_g_r_o_u_n_d are combined with the image to      |
       create the pixmap.

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmDDDDeeeessssttttrrrrooooyyyyPPPPiiiixxxxmmmmaaaapppp (_s_c_r_e_e_n, _p_i_x_m_a_p)                      |
          SSSSccccrrrreeeeeeeennnn    * _s_c_r_e_e_n;                                        |
          PPPPiiiixxxxmmmmaaaapppp    _p_i_x_m_a_p;                                          |

       _s_c_r_e_e_n    Specifies the display screen for which the pixmap   |
                 was requested

       _p_i_x_m_a_p    Specifes the pixmap to be destroyed                 |

       XXXXmmmmDDDDeeeessssttttrrrrooooyyyyPPPPiiiixxxxmmmmaaaapppp is used to remove pixmaps that are no longer  |
       needed.  A pixmap is completely freed only when there is no   |
       further reference to it.

       8.6  RRRReeeessssoooolllluuuuttttiiiioooonnnn IIIInnnnddddeeeeppppeeeennnnddddeeeennnncccceeee

       The OSF/Motif widget set has a built-in mechanism called      |
       resolution independence.  Resolution independence allows
       applications to create and display images that are the same
       physical size regardless of the resolution of the display.
       This frees the application developer from the task of ensur-
       ing that an application can be used on a wide range of sys-
       tems.

       The resolution independence mechanism provides resource data
       to the widgets in various unit types, including millimeters,
       inches, points, and font units.  All widget resources con-
       nected with size, position, thickness, padding, and spacing   |
       can be set using the preceding unit types.  The application
       or user of the application can provide resolution indepen-
       dent data through ....XXXXddddeeeeffffaaaauuuullllttttssss and applications-defaults        |
       files, command line arguments, or argument lists.








       8-44









                                           Additional Functionality


       8.6.1  TTTThhhheeee RRRReeeessssoooolllluuuuttttiiiioooonnnn IIIInnnnddddeeeeppppeeeennnnddddeeeennnncccceeee MMMMeeeecccchhhhaaaannnniiiissssmmmm

       The unit a widget uses is defined by the resource XmNunit-    |
       Type, which can be found in the base classes of XmPrimitive,
       XmGadget, and XmManager.  Since all widgets are built from
       these base classes, it follows that all widgets support       |
       resolution independence. XmNunitType can have five values:

          +o XXXXmmmmPPPPIIIIXXXXEEEELLLLSSSS - All values provided to the widget are
            treated as normal pixel values.  This is the default
            value for the resource.

          +o XXXXmmmm111100000000TTTTHHHH____MMMMIIIILLLLLLLLIIIIMMMMEEEETTTTEEEERRRRSSSS - All values provided to the widget
            are treated as 1/100 of a millimeter.

          +o XXXXmmmm1111000000000000TTTTHHHH____IIIINNNNCCCCHHHHEEEESSSS - All values provided to the widget are
            treated as 1/1000 of an inch.

          +o XXXXmmmm111100000000TTTTHHHH____PPPPOOOOIIIINNNNTTTTSSSS - All values provided to the widget are
            treated as 1/100 of a point.  A point is a unit typi-
            cally used in text processing applications and is
            defined as 1/72 of an inch.

          +o XXXXmmmm111100000000TTTTHHHH____FFFFOOOONNNNTTTT____UUUUNNNNIIIITTTTSSSS - All values provided to the widget
            are treated as 1/100 of a font unit.  The value to be    |
            used for the font unit is determined in one of three     |
            ways:                                                    |

               - The application can use XXXXmmmmSSSSeeeettttFFFFoooonnnnttttUUUUnnnniiiitttt to specify    |
                 the font unit values.  This function is described   |
                 later in this section.                              |

               - If the application has not called XXXXmmmmSSSSeeeettttFFFFoooonnnnttttUUUUnnnniiiitttt,    |
                 the font units can be derived from a font.  The     |
                 user specifies this font by using the font          |
                 resource in a defaults file or on the command       |
                 line, or by using the standard command line         |
                 options ----ffffnnnn and ----ffffoooonnnntttt.                              |

               - If the application has not called XXXXmmmmSSSSeeeettttFFFFoooonnnnttttUUUUnnnniiiitttt     |
                 and the user has not specified a font resource,     |
                 the horizontal and vertical font units default to   |
                 10.

            A horizontal font unit is derived from a font as fol-    |
            lows:                                                    |

               +o If the font has an AAAAVVVVEEEERRRRAAAAGGGGEEEE____WWWWIIIIDDDDTTTTHHHH property, the      |
                 horizontal font unit is the AAAAVVVVEEEERRRRAAAAGGGGEEEE____WWWWIIIIDDDDTTTTHHHH property  |
                 divided by 10.                                      |



                                                               8-45












               +o If the font has no AAAAVVVVEEEERRRRAAAAGGGGEEEE____WWWWIIIIDDDDTTTTHHHH property but has   |
                 a QQQQUUUUAAAADDDD____WWWWIIIIDDDDTTTTHHHH property, the horizontal font unit is  |
                 the QQQQUUUUAAAADDDD____WWWWIIIIDDDDTTTTHHHH property.                            |

               +o If the font has no AAAAVVVVEEEERRRRAAAAGGGGEEEE____WWWWIIIIDDDDTTTTHHHH or QQQQUUUUAAAADDDD____WWWWIIIIDDDDTTTTHHHH      |
                 property, the horizontal font unit is the sum of    |
                 the font struct's min_bounds.width and              |
                 max_bounds.width divided by 2.3.                    |

            A vertical font unit is derived from a font as follows:  |

               +o If the font has a PPPPIIIIXXXXEEEELLLL____SSSSIIIIZZZZEEEE property, the verti-   |
                 cal font unit is the PPPPIIIIXXXXEEEELLLL____SSSSIIIIZZZZEEEE property divided    |
                 by 1.8.                                             |

               +o If the font has no PPPPIIIIXXXXEEEELLLL____SSSSIIIIZZZZEEEE property but has      |
                 PPPPOOOOIIIINNNNTTTT____SSSSIIIIZZZZEEEE and RRRREEEESSSSOOOOLLLLUUUUTTTTIIIIOOOONNNN____YYYY properties, the verti-  |
                 cal font unit is the product of the PPPPOOOOIIIINNNNTTTT____SSSSIIIIZZZZEEEE and  |
                 RRRREEEESSSSOOOOLLLLUUUUTTTTIIIIOOOONNNN____YYYY properties divided by 1400.            |

               +o If the font has no PPPPIIIIXXXXEEEELLLL____SSSSIIIIZZZZEEEE, PPPPOOOOIIIINNNNTTTT____SSSSIIIIZZZZEEEE, or       |
                 RRRREEEESSSSOOOOLLLLUUUUTTTTIIIIOOOONNNN____YYYY properties, the vertical font unit is  |
                 the sum of the font struct's max_bounds.ascent and  |
                 max_bounds.descent divided by 2.2.                  |

       There are two reasons for the unit types to be fractional:    |

          +o It allows all calculations to be done in integer
            representation.  This ensures maximum performance for
            type conversions.

          +o There is no way to supply a floating-point number to a   |
            widget through an argument list.  This is because the
            value field in the argument list is of type cccchhhhaaaarrrr ****.
            When a floating-point value is forced into a cccchhhhaaaarrrr ****      |
            variable, the fractional part is truncated.

       When a widget is created and its unit type is something
       other than pixels, it converts the data specified by the
       application or the user into pixel values, taking into
       account the resolution of the screen.  These converted pixel
       values are then placed into the internal data space of the
       widget, and the widget operates as it would normally.  The
       same process occurs when the application issues an XXXXttttSSSSeeeetttt----     |
       VVVVaaaalllluuuueeeessss to a widget. The new values are converted from unit
       type to pixels and placed back into the widget.

       When the application issues an XXXXttttGGGGeeeettttVVVVaaaalllluuuueeeessss to a widget, the   |
       pixel values are taken out of the widget, converted back to
       the unit type, and inserted into the argument list to be
       returned.


       8-46









                                           Additional Functionality


       The conversion and storing of unit type values to pixel
       values can cause some rounding errors.  Therefore, when an
       application issues an XXXXttttGGGGeeeettttVVVVaaaalllluuuueeeessss, it should not expect       |
       exactly the same data to be returned as was originally
       specified.  This rounding error will only occur once and
       will not get progressively worse.  For example, if a
       widget's width is set to 1000/1000 inches (1 inch), XXXXttttGGGGeeeetttt----    |
       VVVVaaaalllluuuueeeessss may return 993/1000 inches.  If this value is then
       used to set the width of a second widget and the application  |
       calls XXXXttttGGGGeeeettttVVVVaaaalllluuuueeeessss on the second widget, 993/1000 inches will
       be returned.

       8.6.2  SSSSeeeettttttttiiiinnnngggg tttthhhheeee FFFFoooonnnntttt UUUUnnnniiiittttssss

       Applications may want to specify resolution independent data
       based on a global font size.  The widget set provides an
       external function to use to initialize the font unit values.
       This function needs to be called before any widgets with
       resolution independent data are created.

           XXXXmmmmSSSSeeeettttFFFFoooonnnnttttUUUUnnnniiiitttt (_d_i_s_p_l_a_y, _f_o_n_t__u_n_i_t__v_a_l_u_e)                  |
           DDDDiiiissssppppllllaaaayyyy * _d_i_s_p_l_a_y;                                        |
           iiiinnnntttt _f_o_n_t__u_n_i_t__v_a_l_u_e;                                      |

       The parameters for this function are as follows:              |

       _d_i_s_p_l_a_y        Defines the display for which this font unit
                      value is to be applied.                        |

       _f_o_n_t__u_n_i_t__v_a_l_u_e Specifies the value to be used for both hor-  |
                      izontal and vertical font units in the         |
                      conversion calculations.

       8.6.3  CCCCoooonnnnvvvveeeerrrrttttiiiinnnngggg BBBBeeeettttwwwweeeeeeeennnn UUUUnnnniiiitttt TTTTyyyyppppeeeessss

       The widgets use a general conversion function to convert
       between pixels and other unit types.  This function can con-
       vert values between any of the defined unit types, and is
       available to the application for its use.

       iiiinnnntttt XXXXmmmmCCCCoooonnnnvvvveeeerrrrttttUUUUnnnniiiittttssss (_w_i_d_g_e_t, _o_r_i_e_n_t_a_t_i_o_n, _f_r_o_m__u_n_i_t__t_y_p_e, _f_r_o_m__v_a_l_u_e,|
       _t_o__u_n_i_t__t_y_p_e)
           WWWWiiiiddddggggeeeetttt * _w_i_d_g_e_t;                                          |
           iiiinnnntttt _o_r_i_e_n_t_a_t_i_o_n;                                          |
           iiiinnnntttt _f_r_o_m__u_n_i_t__t_y_p_e;                                       |
           iiiinnnntttt _f_r_o_m__v_a_l_u_e;                                           |
           iiiinnnntttt _t_o__u_n_i_t__t_y_p_e;                                         |

       XXXXmmmmCCCCoooonnnnvvvveeeerrrrttttUUUUnnnniiiittttssss uses the parameter data to convert the value
       and return it as the return value from the function.  The
       parameters for this function are as follows:                  |


                                                               8-47












       _w_i_d_g_e_t                   Specifies the widget for which the
                                data is to be converted.             |

       _o_r_i_e_n_t_a_t_i_o_n              Specifies whether the converter
                                should use the horizontal screen
                                resolution or vertical screen reso-
                                lution when performing the conver-
                                sions.  _o_r_i_e_n_t_a_t_i_o_n can have values
                                of XXXXmmmmHHHHOOOORRRRIIIIZZZZOOOONNNNTTTTAAAALLLL or XXXXmmmmVVVVEEEERRRRTTTTIIIICCCCAAAALLLL.       |

       _f_r_o_m__u_n_i_t__t_y_p_e           Specifies the current unit type of
                                the supplied value.                  |

       _f_r_o_m__v_a_l_u_e               Specifies the value to be con-
                                verted.                              |

       _t_o__u_n_i_t__t_y_p_e             Specifies the unit type into which
                                the value should be converted.

       8.7  IIIInnnntttteeeerrrraaaaccccttttiiiinnnngggg WWWWiiiitttthhhh tttthhhheeee MMMMoooottttiiiiffff WWWWiiiinnnnddddoooowwww MMMMaaaannnnaaaaggggeeeerrrr

       This section explains the procedures an application can use
       to interact with the WM_PROTOCOLS and system menu facilities
       provided by MWM.  Be sure that you have read at least the     |
       discussion of MWM properties in the Motif Window Manager      |
       chapters before reading this section.  You should also be     |
       familiar with the concepts presented in the _I_n_t_e_r-_C_l_i_e_n_t      |
       _C_o_m_m_u_n_i_c_a_t_i_o_n_s _C_o_n_v_e_n_t_i_o_n_s _M_a_n_u_a_l (ICCCM).

       8.7.1  PPPPrrrroooottttooooccccoooollll MMMMaaaannnnaaaaggggeeeemmmmeeeennnntttt

       The protocol management functions are a set of general pur-   |
       pose routines for interacting with properties that contain
       atom arrays, client messages, and associated callbacks.
       They are used to support the existing entries for the
       WM_PROTOCOLS and  _MOTIF_WM_MESSAGES properties.  See the     |
       section about configuring the OSF/Motif window manager for    |
       more information.

       NNNNOOOOTTTTEEEE:::: In the following discussion, the names of atoms or      |
       properties are in upper case and are obtained by interning    |
       the strings with the server.  Use XXXXmmmmIIIInnnntttteeeerrrrnnnnAAAAttttoooommmm to convert     |
       these strings to a 32-bit tag.  The following code segment    |
       shows how to obtain the _MOTIF_WM_MESSAGES atom.

       Atom motif_wm_messages;                                       |

          motif_wm_messages = XmInternAtom(display,                  |
               "_MOTIF_WM_MESSAGES", true);                          |




       8-48









                                           Additional Functionality


       Alternatively, you could use _XA_MOTIF_WM_MESSAGES (defined
       in XXXX11111111////MMMMwwwwmmmmUUUUttttiiiillll....hhhh) as the second argument to XXXXmmmmIIIInnnntttteeeerrrrnnnnAAAAttttoooommmm.     |

       A protocol is a 32-bit tag used by clients to communicate     |
       with the window manager.  This tag is either an X Atom or an
       arbitrary long integer variable whose value is shared by the  |
       parties to the protocol communication.  The client indicates
       interest in certain communications protocols by adding these
       tags to a tag array that is the value of a special property
       on its top-level window.  For predefined ICCC protocols,      |
       this property is WM_PROTOCOLS.  For MWM, this property is     |
       _MOTIF_WM_MESSAGES.  The window manager sends a protocol      |
       message (when appropriate) in the form of a client message    |
       event with the _m_e_s_s_a_g_e__t_y_p_e field of the CCCClllliiiieeeennnnttttMMMMeeeessssssssaaaaggggeeee
       structure set to the property and the _d_a_t_a._l[_0] field set to
       the protocol.  The client can associate a callback list with
       the protocol that is invoked when the client message event
       is received.

       Each shell can have one protocol manager per property  asso-
       ciated with it, and the protocol manager can have multiple    |
       protocols registered.  Each protocol is identified by its
       tag (WM_SAVE_YOURSELF, for example).  The protocols can have
       any number of client callbacks associated with them, in       |
       addition to prehook and posthook callbacks (usually
       registered by the widget set) for each protocol.

       The protocol manager does the following:                      |

          +o Tracks the state of the protocols whether or not they    |
            are active

          +o Tracks the state of the Shell and creates and updates    |
            the protocol property accordingly

          +o Processes the client messages received and invokes the   |
            appropriate callbacks

       8.7.1.1  ____MMMMOOOOTTTTIIIIFFFF____WWWWMMMM____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS

       The client uses the _MOTIF_WM_MESSAGES property to indicate
       to MWM which messages (sent by MWM when an sssseeeennnndddd____mmmmssssgggg function  |
       is invoked from the MWM system menu) it is currently han-
       dling.  A client can add ffff....sssseeeennnndddd____mmmmssssgggg entries to the menu by    |
       using the ....mmmmwwwwmmmmrrrrcccc file or by using the XXXXmmmmNNNNmmmmwwwwmmmmMMMMeeeennnnuuuu resource of
       VendorShell.  This resource is a string that is parsed by
       MWM to determine what to display in the system menu and how   |
       to react to an item's selection.  When the action associated
       with an item is ffff....sssseeeennnndddd____mmmmssssgggg, MWM sends the client a message    |
       if the specified protocol is active.  The protocol is the
       integer argument to the ffff....sssseeeennnndddd____mmmmssssgggg action.  A menu protocol   |


                                                               8-49












       is active if the protocol is in the _MOTIF_WM_MESSAGES pro-
       perty and the _MOTIF_WM_MESSAGES atom is in the WM_PROTOCOLS
       property.  Otherwise, the protocol is inactive and the menu   |
       label will be grayed out.

       8.7.1.2  WWWWMMMM____PPPPRRRROOOOTTTTOOOOCCCCOOOOLLLLSSSS

       A corresponding macro is provided for each of the general     |
       protocol manager routines to simplify their use.  The only
       difference between them is that the general routines are
       passed a protocol property in all calls while the macros      |
       always force this property to WM_PROTOCOLS.  These macros
       are useful if you want to interact with ICCC protocols such
       as  WM_DELETE_WINDOW or WM_SAVE_YOURSELF.

       Note that if you are using the protocol manager for the sys-
       tem menu, the property should be the atom corresponding to
       _MOTIF_WM_MESSAGES.

       8.7.2  PPPPrrrroooottttooooccccoooollll MMMMaaaannnnaaaaggggeeeerrrr FFFFuuuunnnnccccttttiiiioooonnnnssss

       The following sections list the protocol manager functions.   |
       A sample program, xxxxmmmmpppprrrroooottttooooccccoooollll, in the  ....////ddddeeeemmmmoooossss directory adds
       or deactivates entries to the system menu.  You can use the
       methods presented in that program to get an idea of how to
       use the functions discussed in this section.

       Note that the statement

       #include <X11/Protocols.h>

       mmmmuuuusssstttt bbbbeeee pppprrrreeeesssseeeennnntttt iiiinnnn aaaannnnyyyy pppprrrrooooggggrrrraaaammmm uuuussssiiiinnnngggg tttthhhheeeesssseeee ffffuuuunnnnccccttttiiiioooonnnnssss....         ||||

       TTTThhhheeee ffffuuuunnnnccccttttiiiioooonnnnssss tttthhhhaaaatttt hhhhaaaavvvveeee tttthhhheeee lllleeeetttttttteeeerrrrssss WWWWMMMM aaaarrrreeee tttthhhheeee mmmmaaaaccccrrrroooossss         ||||
       rrrreeeeffffeeeerrrrrrrreeeedddd ttttoooo eeeeaaaarrrrlllliiiieeeerrrr....  EEEEaaaacccchhhh ffffuuuunnnnccccttttiiiioooonnnn hhhhaaaassss aaaa ccccoooorrrrrrrreeeessssppppoooonnnnddddiiiinnnngggg
       mmmmaaaaccccrrrroooo....  FFFFoooorrrr eeeexxxxaaaammmmpppplllleeee,,,, XXXXmmmmAAAAddddddddPPPPrrrroooottttooooccccoooollllssss hhhhaaaassss aaaa ccccoooorrrrrrrreeeessssppppoooonnnnddddiiiinnnngggg
       mmmmaaaaccccrrrroooo XXXXmmmmAAAAddddddddWWWWMMMMPPPPrrrroooottttooooccccoooollllssss....  TTTThhhheeee mmmmaaaaccccrrrroooo ssssiiiimmmmppppllllyyyy ccccaaaallllllllssss XXXXmmmmAAAAddddddddPPPPrrrroooottttoooo----
       ccccoooollllssss wwwwiiiitttthhhh tttthhhheeee _p_r_o_p_e_r_t_y ppppaaaarrrraaaammmmeeeetttteeeerrrr sssseeeetttt ttttoooo XXXXAAAA____WWWWMMMM____PPPPRRRROOOOTTTTOOOOCCCCOOOOLLLL....

       8888....7777....2222....1111  AAAAdddddddd aaaannnndddd RRRReeeemmmmoooovvvveeee FFFFuuuunnnnccccttttiiiioooonnnnssss

       The following routine adds the protocols to the protocol      |
       manager corresponding to the specified property and allocate
       the internal tables. The protocols are initialized to
       active.                                                       |

       vvvvooooiiiidddd XXXXmmmmAAAAddddddddWWWWMMMMPPPPrrrroooottttooooccccoooollllssss (_s_h_e_l_l, _p_r_o_t_o_c_o_l_s, _n_u_m__p_r_o_t_o_c_o_l_s)       |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   *_p_r_o_t_o_c_o_l_s;                                            |
       CCCCaaaarrrrddddiiiinnnnaaaallll   _n_u_m__p_r_o_t_o_c_o_l_s;                                     |



       8-50









                                           Additional Functionality


       vvvvooooiiiidddd XXXXmmmmAAAAddddddddPPPPrrrroooottttooooccccoooollllssss (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l_s, _n_u_m__p_r_o_t_o_c_o_l_s)|
       WWWWiiiiddddggggeeeetttt      _s_h_e_l_l;                                            |
       AAAAttttoooommmm      _p_r_o_p_e_r_t_y;                                           |
       AAAAttttoooommmm      *_p_r_o_t_o_c_o_l_s;                                         |
       CCCCaaaarrrrddddiiiinnnnaaaallll      _n_u_m__p_r_o_t_o_c_o_l_s;                                  |

       The following routine removes the protocols from the proto-   |
       col manager and deallocates the internal tables.  It also
       updates the handlers and the property if any of the proto-
       cols are active and the shell referenced in the _s_h_e_l_l param-
       eter is realized.                                             |

       vvvvooooiiiidddd XXXXmmmmRRRReeeemmmmoooovvvveeeeWWWWMMMMPPPPrrrroooottttooooccccoooollllssss (_s_h_e_l_l, _p_r_o_t_o_c_o_l_s, _n_u_m__p_r_o_t_o_c_o_l_s)    |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   *_p_r_o_t_o_c_o_l;                                             |
       CCCCaaaarrrrddddiiiinnnnaaaallll _n_u_m__p_r_o_t_o_c_o_l_s;                                       |

       vvvvooooiiiidddd XXXXmmmmRRRReeeemmmmoooovvvveeeePPPPrrrroooottttooooccccoooollllssss (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l_s, _n_u_m__p_r_o_t_o_c_o_l_s)|
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_p_e_r_t_y;                                              |
       AAAAttttoooommmm   *_p_r_o_t_o_c_o_l_s;                                            |
       CCCCaaaarrrrddddiiiinnnnaaaallll _n_u_m__p_r_o_t_o_c_o_l_s;                                       |

       8.7.2.2  PPPPrrrroooottttooooccccoooollll SSSSttttaaaatttteeee

       It is sometimes useful to allow a protocol's state informa-
       tion (callback lists for example) to persist, even though
       the client may choose to temporarily resign from the
       interaction.  The main use of this capability is to gray out
       f.send_msg labels in the system menu. This is supported by
       allowing a protocol to be in one of two states, active or
       inactive.  If the protocol is active and the shell is real-
       ized, then the property contains the protocol atom.  If the
       protocol is inactive, then the atom is not present in the
       property.                                                     *

       If the protocol is inactive, the following routine updates    |
       the handlers and adds the protocol to the property if the
       shell is realized.                                            |

       vvvvooooiiiidddd XXXXmmmmAAAAccccttttiiiivvvvaaaatttteeeeWWWWMMMMPPPPrrrroooottttooooccccoooollll (_s_h_e_l_l, _p_r_o_t_o_c_o_l)                   |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |

       vvvvooooiiiidddd XXXXmmmmAAAAccccttttiiiivvvvaaaatttteeeePPPPrrrroooottttooooccccoooollll (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l)           |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_p_e_r_t_y;                                              |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |

       If the protocol is inactive, this routine updates the
       handlers and the property if the shell is realized.           |


                                                               8-51












       vvvvooooiiiidddd XXXXmmmmDDDDeeeeaaaaccccttttiiiivvvvaaaatttteeeeWWWWMMMMPPPPrrrroooottttooooccccoooollll (_s_h_e_l_l, _p_r_o_t_o_c_o_l)                 |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |

       vvvvooooiiiidddd XXXXmmmmDDDDeeeeaaaaccccttttiiiivvvvaaaatttteeeePPPPrrrroooottttooooccccoooollll (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l)         |
       AAAAttttoooommmm   _p_r_o_p_e_r_t_y;                                              |
       CCCCaaaarrrrddddiiiinnnnaaaallll _n_u_m__p_r_o_t_o_c_o_l_s;                                       |

       8.7.2.3  PPPPrrrroooottttooooccccoooollll CCCCaaaallllllllbbbbaaaacccckkkkssss

       When a client message associated with a protocol is received
       by the protocol manager, it checks to see if the protocol is
       active.  If it is, then any callbacks associated with the     |
       protocol are called.  Three callback lists can be associated  |
       with a protocol.  One is for client use and is accessed by    |
       XXXXmmmmAAAAddddddddPPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk and XXXXmmmmRRRReeeemmmmoooovvvveeeePPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk.  The      |
       other two (the pre-hook and post-hook callbacks) are          |
       intended for toolkit use and are accessed by the XXXXmmmmSSSSeeeettttPPPPrrrroooottttoooo----
       ccccoooollllHHHHooooooookkkkssss routine.  The hook routines are called before and
       after the client callbacks (if any) are called.  The proto-
       col callbacks have a reason field of XmCR_PROTOCOLS and a
       type of XmAnyCallbackStruct.

       The following routine checks to see if the protocol is        |
       registered and if not, it calls XXXXmmmmAAAAddddddddPPPPrrrroooottttooooccccoooollllssss.  It then
       adds the callbacks to the internal list.  These callbacks
       are called when the corresponding client message is           |
       received.

       vvvvooooiiiidddd XXXXmmmmAAAAddddddddWWWWMMMMPPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk (_s_h_e_l_l, _p_r_o_t_o_c_o_l, _c_a_l_l_b_a_c_k,      |
           _c_l_o_s_u_r_e)                                                  |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc _c_a_l_l_b_a_c_k;                                      |
       ccccaaaaddddddddrrrr____tttt _c_l_o_s_u_r_e;                                              |

       vvvvooooiiiidddd XXXXmmmmAAAAddddddddPPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l,        |
           _c_a_l_l_b_a_c_k, _c_l_o_s_u_r_e)                                        |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_p_e_r_t_y;                                              |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc _c_a_l_l_b_a_c_k;                                      |
       ccccaaaaddddddddrrrr____tttt _c_l_o_s_u_r_e;                                              |

       The following routine removes the callback from the internal list.|

       vvvvooooiiiidddd XXXXmmmmRRRReeeemmmmoooovvvveeeeWWWWMMMMPPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk (_s_h_e_l_l, _p_r_o_t_o_c_o_l, _c_a_l_l_b_a_c_k,   |
           _c_l_o_s_u_r_e)                                                  |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc _c_a_l_l_b_a_c_k;                                      |


       8-52









                                           Additional Functionality


       ccccaaaaddddddddrrrr____tttt _c_l_o_s_u_r_e;                                              |

       vvvvooooiiiidddd XXXXmmmmRRRReeeemmmmoooovvvveeeePPPPrrrroooottttooooccccoooollllCCCCaaaallllllllbbbbaaaacccckkkk (_s_h_e_l_l, _p_r_o_p_e_r_t_y, _p_r_o_t_o_c_o_l,     |
           _c_a_l_l_b_a_c_k, _c_l_o_s_u_r_e)                                        |
       WWWWiiiiddddggggeeeetttt   _s_h_e_l_l;                                               |
       AAAAttttoooommmm   _p_r_o_p_e_r_t_y;                                              |
       AAAAttttoooommmm   _p_r_o_t_o_c_o_l;                                              |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc _c_a_l_l_b_a_c_k;                                      |
       ccccaaaaddddddddrrrr____tttt _c_l_o_s_u_r_e;                                              |

       The following routine is used by toolkit widgets that want    |
       to have before and after actions executed when a protocol     |
       message is received from the window manager.  Since there is
       no guaranteed ordering in execution of event handlers or
       callback lists, this allows the shell to control the flow     |
       while leaving the protocol manager structures private. The    |
       callback procedure's _C_a_l_l__d_a_t_a argument will contain the
       same pointer as that passed to the client callbacks.          |

       vvvvooooiiiidddd XXXXmmmmSSSSeeeettttWWWWMMMMPPPPrrrroooottttooooccccoooollllHHHHooooooookkkkssss (_s_h_e_l_l, _p_r_o_t_o_c_o_l, _p_r_e_h_o_o_k, _p_r_e__c_l_o_s_u_r_e,|
           _p_o_s_t_h_o_o_k, _p_o_s_t__c_l_o_s_u_r_e)                                   |
       WWWWiiiiddddggggeeeetttt      _s_h_e_l_l;                                            |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc    _p_r_e_h_o_o_k, _p_o_s_t_h_o_o_k;                          |
       ccccaaaaddddddddrrrr____tttt _p_r_e__c_l_o_s_u_r_e, _p_o_s_t__c_l_o_s_u_r_e;                            |

       vvvvooooiiiidddd XXXXmmmmSSSSeeeettttPPPPrrrroooottttooooccccoooollllHHHHooooooookkkkssss (_s_h_e_l_l, _p_r_o_t_o_c_o_l, _p_r_o_p_e_r_t_y, _p_r_e_h_o_o_k,  |
           _p_r_e__c_l_o_s_u_r_e, _p_o_s_t_h_o_o_k, _p_o_s_t__c_l_o_s_u_r_e)                      |
       WWWWiiiiddddggggeeeetttt      _s_h_e_l_l;                                            |
       AAAAttttoooommmm      _p_r_o_p_e_r_t_y;                                           |
       XXXXttttCCCCaaaallllllllbbbbaaaacccckkkkPPPPrrrroooocccc    _p_r_e_h_o_o_k, _p_o_s_t_h_o_o_k;                          |
       ccccaaaaddddddddrrrr____tttt    _p_r_e__c_l_o_s_u_r_e, _p_o_s_t__c_l_o_s_u_r_e;                         |

       8.7.3  AAAAttttoooommmm MMMMaaaannnnaaaaggggeeeemmmmeeeennnntttt

       The atom management routines mirror the Xlib interfaces for
       atom management, but provide client-side caching.  When (and  |
       where) caching is provided in Xlib, the routines will become
       pseudonyms for the Xlib routines.  Note that the statement

       #include <Xm/AtomMgr.h>                                       |

       must be present in any program using these functions.         |

       AAAAttttoooommmm XXXXmmmmIIIInnnntttteeeerrrrnnnnAAAAttttoooommmm (_d_i_s_p_l_a_y, _n_a_m_e, _o_n_l_y__i_f__e_x_i_s_t_s)             |
          DDDDiiiissssppppllllaaaayyyy  *_d_i_s_p_l_a_y;                                         |
          SSSSttttrrrriiiinnnngggg   _n_a_m_e;                                             |
          BBBBoooooooolllleeeeaaaannnn  _o_n_l_y__i_f__e_x_i_s_t_s;                                   |

       SSSSttttrrrriiiinnnngggg XXXXmmmmGGGGeeeettttAAAAttttoooommmmNNNNaaaammmmeeee (_d_i_s_p_l_a_y, _a_t_o_m)                          |
          DDDDiiiissssppppllllaaaayyyy   *_d_i_s_p_l_a_y;                                        |
          AAAAttttoooommmm      _a_t_o_m;                                            |


                                                               8-53












       8.8  MMMMoooottttiiiiffff VVVVeeeerrrrssssiiiioooonnnn NNNNuuuummmmbbbbeeeerrrr

       Motif provides a macro, XXXXmmmmVVVVeeeerrrrssssiiiioooonnnn, that returns the current
       Motif version.  Essentially, the macro multiplies the ver-
       sion number of the library by 1000 and adds the revision
       number.  For example, in the first release of Motif Version
       1.0, the macro would return 1000.

       Additionally, a global variable, XXXXmmmmUUUUsssseeeeVVVVeeeerrrrssssiiiioooonnnn is provided.    |
       The value of this variable is set to reflect the value
       returned by XXXXmmmmVVVVeeeerrrrssssiiiioooonnnn as soon as the first widget is created
       (the setting takes place during the class initialization
       procedure of the widget).  In the future, an application may
       be able to set this variable to specify the kind of behavior
       the widget library should provide.

       8.9  MMMMoooottttiiiiffff WWWWiiiinnnnddddoooowwww MMMMaaaannnnaaaaggggeeeerrrr PPPPrrrreeeesssseeeennnncccceeee

       Users often need to determine whether MWM is running on a     |
       given display.  The Motif XXXXmmmmIIIIssssMMMMoooottttiiiiffffWWWWMMMMRRRRuuuunnnnnnnniiiinnnngggg function can     |
       provide this information.

       ####iiiinnnncccclllluuuuddddeeee <<<<XXXXmmmm////XXXXmmmm....hhhh>>>>                                            |

       BBBBoooooooolllleeeeaaaannnn XXXXmmmmIIIIssssMMMMoooottttiiiiffffWWWWMMMMRRRRuuuunnnnnnnniiiinnnngggg (_s_h_e_l_l)

         Widget  _s_h_e_l_l;                                              |

       _s_h_e_l_l       Specifies the shell whose screen should be        |
       tested for MWM's presence.  The function returns True if MWM
       is running, False if it is not.






















       8-54





