















































































       5.  WWWWiiiinnnnddddoooowwww MMMMaaaannnnaaaaggggeeeerrrr DDDDeeeessssiiiiggggnnnn PPPPrrrriiiinnnncccciiiipppplllleeeessss

       A window manager is a specialized application.  In designing
       a window manager you must follow the same principles as for
       any other application.  A window manager must also follow
       the style guidelines for input, navigation, and selection
       models as set forth in Chapters 2 and 3.

       There are a few elements of user interface design that are
       specific to window managers.  This chapter discusses those
       elements.

          +o Configurability

          +o Window support

          +o Window decorations

          +o Window placement

          +o Window navigation

          +o Icons

       5.1  CCCCoooonnnnffffiiiigggguuuurrrraaaabbbbiiiilllliiiittttyyyy

       This chapter describes only those elements of window manager
       design that help create a consistent user interface.  A win-
       dow manager can supply a mechanism that allows the user to
       configure the window manager.  The window manager can make
       any element user configurable, including key bindings, Menu
       contents, default window decorations, or any other rules and
       element defined in this guide.  Any window manager that sup-
       plies a configuration mechanism must also include support
       for toggling between the current user configuration and the
       default configuration as mandated by this guide.  The confi-
       guration toggle key press, MMMMAAAAlllltttt MMMMSSSShhhhiiiifffftttt MMMMCCCCttttrrrrllll !!!!, must ini-
       tiate a configuration toggle.  Any request for toggling the
       configuration should request user verification before
       proceeding.






                                                                5-1












       5.2  WWWWiiiinnnnddddoooowwww SSSSuuuuppppppppoooorrrrtttt

       Users communicate with applications using windows.  A window
       is an area of the screen (usually rectangular) that provides
       the user with the functional means to communicate with an
       application and through which an application can communicate
       with them.

       A typical environment has several applications in operation
       simultaneously.  Each application typically has a main or
       primary window that displays data and in which the user car-
       ries on primary interaction with the application.  Applica-
       tions can have additional windows to communicate context-
       specific interactions with the user of the application.
       These additional windows are called secondary windows, or
       transient windows.  DialogBoxes are often used to create
       secondary windows.  Figure 5-1 illustrates a typical
       OSF/Motif environment.

            FFFFiiiigggguuuurrrreeee 5555----1111....  A Typical OSF/Motif User Environment



























       While each application can be made up of many windows, each
       window is one of only three basic types:




       5-2









                                   Window Manager Design Principles


          +o A primary window, the main application windows.

          +o A secondary window, a window that provides secondary
            and transient interaction with the user.

          +o A menu window, a temporary window for displaying a menu
            of choices for the user.

       A window manager must support multiple applications, each
       with one or more primary windows.  The window manager must
       also recognize and support secondary windows.  Also, it must
       associate each secondary window with a primary window or
       another secondary window.

       5.2.1  PPPPrrrriiiimmmmaaaarrrryyyy WWWWiiiinnnnddddoooowwww

       A primary window is the window from which all the other win-
       dows used by an application are generated.  The window
       manager must support one or more primary windows for each
       windowing application.  When an application has multiple
       primary windows, the window manager should treat each pri-
       mary window as if it were an independent application.

       When a primary window is iconized (minimized), the window
       and all of its associated secondary windows must be removed
       from the display and replaced with a single icon represent-
       ing the primary window.  Iconizing a window must not
       automatically suspend any processes of the window.  However,
       a client can notice that a primary window has been unmaped
       and adjust its processing accordingly.  When the icon of the
       window is opened, the primary window and all the current
       associated secondary windows must be restored.  The window
       manager should try to place the windows in the same position
       from which they were iconified.

       When a primary window is closed, the window and its icon
       must be removed from the display.  All secondary windows
       associated with the primary window must also be closed.  If
       the last primary window of an application is closed, the
       application must also be closed.

       5.2.2  SSSSeeeeccccoooonnnnddddaaaarrrryyyy WWWWiiiinnnnddddoooowwwwssss ((((DDDDiiiiaaaalllloooogggg))))

       Applications use secondary windows to conduct context-
       specific dialog with the user.  Such context-specific dia-
       logs are usually transitory, and the secondary windows can
       be removed when they are no longer needed.  When a secondary
       window is closed, its parent must not be affected, and any
       secondary windows that are children of it must also be
       closed.



                                                                5-3












       Secondary windows are always related to a parent window.
       Sometimes the parent is a primary window, sometimes another
       secondary window.  Any window can have any number of secon-
       dary window children.

       Secondary windows are not constrained to be clipped within
       their parent window, but they must always appear on top of
       that parent window in the window hierarchy.  In a layered
       window manager, you can think of a primary window and its
       associated secondary windows as occupying one layer in the
       window hierarchy.  Whenever one window is moved in the
       hierarchy, all of the associated windows must move accord-
       ingly.  Thus, lowering a window must move that window and
       all associated windows to the bottom of the window hierar-
       chy:  Giving a window the focus must raise that window and
       all of the associated windows to the top of the hierarchy.

       Secondary windows may limit how a user can interact with
       windows in order to force the order of interaction.  A win-
       dow manager must support the following four types, known as
       modes, of interaction with secondary windows.

       MMMMooooddddeeeelllleeeessssssss              Allows interaction with the secondary
                             window and all other windows.

       PPPPrrrriiiimmmmaaaarrrryyyy mmmmooooddddaaaallll         Does not allow interaction with any
                             ancestor of the window.

       AAAApppppppplllliiiiccccaaaattttiiiioooonnnn mmmmooooddddaaaallll     Does not allow interaction with any
                             window created by the same application
                             even if the application has multiple
                             primary windows.

       SSSSyyyysssstttteeeemmmm mmmmooooddddaaaallll          Does not allow interaction with any
                             window on the screen.  This includes
                             windows from all other applications
                             and any icon box.  To indicate a sys-
                             tem modal secondary window, the
                             pointer should change shape to a cau-
                             tion pointer whenever it leaves the
                             system modal secondary window.

       A window manager must not allow focus to be given to any
       window that is not allowed to accept input because of the
       modality of a DialogBox.








       5-4









                                   Window Manager Design Principles


       5.2.3  MMMMeeeennnnuuuu WWWWiiiinnnnddddoooowwwwssss

       Menu windows are used to present Menus.  They are not
       specifically created by applications, but by the components
       used to create the application.  Menu windows are always
       related to a parent window.  The parent can be either a pri-
       mary window, secondary window, or another menu window.  A
       window can only have one menu window child at a time.

       A menu window is very short lived.  It is only available to
       a client while no mouse or button actions are being per-
       formed elsewhere on the screen.  Once interaction starts in
       another window on the screen, except a child menu window,
       the menu window must be removed.  Some systems have menu
       windows, called Tear-off Menus, that can be made to remain
       on the screen during other interactions.  Once these menus
       are made permanent, they must become secondary windows.

       Menu windows are not constrained to be clipped within their
       parent window, but they must always appear on top of that
       parent window in the window hierarchy.  he window manager
       must not supply any window decoration to menu windows.

       5.3  WWWWiiiinnnnddddoooowwww DDDDeeeeccccoooorrrraaaattttiiiioooonnnnssss

       A window manager can provide windows with a window frame
       that contains components, often called decorations.  The
       window decorations allow user interaction with the window
       manager.  Along with the frame components, a window manager
       contains a client area.  The client area is the display area
       for an application.  Figure 5-2 shows a typical window and
       its decorations.





















                                                                5-5













              FFFFiiiigggguuuurrrreeee 5555----2222....  A Typical OSF/Motif Window Layout


























       A window manager can support any number of window decora-
       tions, but must support the client area and the window
       frame.  A window manager must support the following window
       frame components:

          +o Title area

          +o Maximize button

          +o Minimize button

          +o Resize border

          +o Window Menu button

       Each window must have a client area.  A window manager must
       allow each window to choose which combination of decorations
       to include, except that a window must not have any buttons
       without a title area.  A primary window must by default have
       all the decorations: window Menu button, maximize button,
       minimize button, title area and resize border.  A secondary
       window must by default have a window Menu button, and title
       area.  In a secondary window, resize borders and a maximize


       5-6









                                   Window Manager Design Principles


       button can be provided if there is a reason to resize the
       window.

       Clicking BBBBSSSSeeeelllleeeecccctttt on the window frame should give the window
       focus and raise the window to the top of the window hierar-
       chy, except when dialog modality disallows focus to be set
       in the window.

       5.3.1  CCCClllliiiieeeennnntttt AAAArrrreeeeaaaa

       The client area is the portion of the window in which the
       user performs most application-level tasks.  For example, if
       the user is working with a graphics editor or a text editor,
       the client area contains the figure or document being
       edited. The client area is inside the window frame and can
       be composed of multiple work areas.  Figure 5-2 shows the
       client area in a typical window.

       5.3.2  TTTTiiiittttlllleeee AAAArrrreeeeaaaa

       The title area, also called the title bar, supplies a place
       to identify the window.  If a window includes a title area,
       it must be a horizontal bar at the top of the window.  It
       must be just above the client area and lie horizontally
       between the window Menu (or other buttons) on the left and
       the window control buttons on the right.  Figure 5-2 shows
       the title area in a typical window.


       The title area should contain a short string called the
       title that labels the contents of the window.  The title
       must be settable at window startup both by the user and by
       the application.  For applications with a single primary
       window, the title should be the name of the application.
       For applications with multiple primary windows, the title
       should indicate the purpose of the window.  The title in
       secondary windows should indicate the purpose of the window.
       The title can also contain other useful information, such as
       the machine on which the application is running, the current
       directory, or similar relatively static information.

       Besides supplying a location for a label, the title area
       also acts as a position, or handle, for moving a window.
       Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg in the title area and dragging the
       pointer must move the window relative to the moving pointer.








                                                                5-7












       5.3.3  MMMMaaaaxxxxiiiimmmmiiiizzzzeeee BBBBuuuuttttttttoooonnnn

       The maximize button provides mouse users a shortcut to the
       mmmmaaaaxxxxiiiimmmmiiiizzzzeeee entry in the window Menu.  If a window includes a
       maximize button, it must be just above the client area and
       its right border must align with the right border of the
       client area.  Figure 5-2 shows the maximize button in a typ-
       ical window.  Primary windows should have a maximize button.
       Secondary windows generally do not have a maximize button.

       The graphic in the maximize button should be a large square
       or an up arrow.  If the maximize button uses an up arrow as
       its graphic, a maximized window should use a double-headed
       arrow to indicate that it is maximized.  If the maximized
       button uses a large square as its graphic, a maximized win-
       dow can show the graphic in a different state.  Activating
       the maximize button must increase the size of the window to
       the maximum allowable size.  As a shortcut for mouse users
       to the RRRReeeessssttttoooorrrreeee entry in the window Menu, activating the max-
       imize button of a maximized window must restore the window
       to its size and location before being maximized.

       5.3.4  MMMMiiiinnnniiiimmmmiiiizzzzeeee BBBBuuuuttttttttoooonnnn

       The minimize button provides mouse users a shortcut to the
       MMMMiiiinnnniiiimmmmiiiizzzzeeee entry in the window Menu.  If a window includes a
       minimize button, it must be just above the client area and
       directly to the left of the maximize button.  Figure 5-2
       shows the minimize button in a typical window.  Primary win-
       dows should have a minimize button.  Secondary windows must
       not have a minimize button.

       The graphic in the minimize button should be a small square
       or a down arrow.  Activating the minimize button must icon-
       ify the window unless the window family contains a system
       modal DialogBox.

       5.3.5  OOOOtttthhhheeeerrrr BBBBuuuuttttttttoooonnnnssss

       You can bind additional window manager functions to buttons
       on the window frame.  Any additional buttons must be placed
       directly to the left of the minimize button or directly to
       the right of the window Menu button and above the client
       area.  Each button action must correspond to a entry in the
       window Menu.








       5-8









                                   Window Manager Design Principles


       5.3.6  RRRReeeessssiiiizzzzeeee BBBBoooorrrrddddeeeerrrrssss

       Applications may suggest the initial size of their windows
       to the window manager.  Window sizes can vary according to
       the work performed in them.  At any time, a user should be
       able to alter the size of most windows.  The SSSSiiiizzzzeeee entry in
       the window Menu provides a method for the user to alter the
       size of windows.  The resize borders provide a shortcut for
       mouse users for the SSSSiiiizzzzeeee entry in the window Menu.  Resize
       borders are not generally provided on secondary windows.

       The resize borders are the outermost components of the win-
       dow manager frame. They are made up of two components: the
       corner handles and the edge handles.  If a window includes
       resize borders, there must be one corner handle in each
       corner of the window at its extremes, and one edge handle
       between each pair of corner handles.  There must be no win-
       dow components outside the boundary formed by the resize
       borders.  Figure 5-2 shows resize borders in a typical win-
       dow.

       Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg in a corner handle and dragging
       the pointer must change the height and width of the window
       relative to the moving pointer without changing the position
       of the opposite corner.  Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg in a top
       or bottom edge handle and dragging the pointer must change
       the height of the window relative to the moving pointer
       without changing the width or the position of the opposite
       edge.  Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg in a side edge handle and
       dragging the pointer must change the width of the window
       relative to the moving pointer without changing the height
       or the position of the opposite edge.

       5.3.7  WWWWiiiinnnnddddoooowwww MMMMeeeennnnuuuu

       The window Menu, sometimes called the system Menu or control
       Menu, is used to display the list of window actions.  All
       actions possible for a window should be displayed in the
       window Menu because keyboard-only users interact with the
       window manager through this Menu.  Because of this, it is
       rare that a window does not need a window Menu.  The window
       Menu can be configured out by the application or by the
       user, but should not be removed by the window manager.

       If a window includes a window Menu, the window Menu button
       must be located just above the client area, the left edge of
       the button must align with the left edge of the client area,
       and the button must be just to the left of the title area,
       unless other buttons are included between the window Menu
       button and the title area.



                                                                5-9












       Double-clicking the window Menu button can be used to close
       the window, unless focus is disallowed in the window.  A
       user must be able to activate the window Menu button for the
       window with the focus by using KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu.  KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu is
       usually bound to MMMMSSSShhhhiiiifffftttt KKKKEEEEssssccccaaaappppeeee or MMMMAAAAlllltttt KKKKSSSSppppaaaacccceeee as shown in
       the following table.

                     TTTTAAAABBBBLLLLEEEE 5555----1111....  KWindowMenu Bindings

                     _______________________________
                    | VVVViiiirrrrttttuuuuaaaallll KKKKeeeeyyyy   DDDDeeeeffffaaaauuuulllltttt BBBBiiiinnnnddddiiiinnnngggg|
                    |_______________________________|
                    | KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu   MMMMSSSShhhhiiiifffftttt <<<<EEEEssssccccaaaappppeeee>>>>|
                    |               MMMMAAAAlllltttt KKKKSSSSeeeelllleeeecccctttt   |
                    | KKKKSSSSeeeelllleeeecccctttt       <<<<SSSSeeeelllleeeecccctttt>>>>       |
                    |               KKKKSSSSppppaaaacccceeee         |
                    |               MMMMCCCCttttrrrrllll KKKKSSSSppppaaaacccceeee   |
                    | KKKKSSSSppppaaaacccceeee        <<<<SSSSppppaaaacccceeee>>>>        |
                    |_______________________________|

       Figure 5-3 shows a typical window Menu.

        FFFFiiiigggguuuurrrreeee 5555----3333....  The Window Menu Button with Menu Pulled Down


















       A primary window Menu must have the following entries in the
       order listed:

       R____RRReeeessssttttoooorrrreeee        AAAAlllltttt++++FFFF5555 Restores a minimized or maximized win-
                           dow to the previous size and location of
                           the window.  This entry must be deem-
                           phasized (grayed out) when the window is
                           in its normal state. This action must
                           have the mnemonic RRRR.  If this action has
                           an accelerator, it must be MMMMAAAAlllltttt <<<<FFFF5555>>>> if


       5-10









                                   Window Manager Design Principles


                           <<<<FFFF5555>>>> is available.

       M____MMMoooovvvveeee            AAAAlllltttt++++FFFF7777 Moves a window around the workspace.
                           This action must have the mnemonic MMMM.
                           If this action has an accelerator, it
                           must be MMMMAAAAlllltttt <<<<FFFF7777>>>> if <<<<FFFF7777>>>> is available.

       S____SSSiiiizzzzeeee             AAAAlllltttt++++FFFF8888 Changes the height and width of the
                           window in the direction indicated by the
                           pointer.  This action must have the
                           mnemonic SSSS.  If this action has an
                           accelerator, it must be MMMMAAAAlllltttt <<<<FFFF8888>>>> if
                           <<<<FFFF8888>>>> is available.

       MMMMiiiin____nnniiiimmmmiiiizzzzeeee     AAAAlllltttt++++FFFF9999 Changes a window into an icon.  This
                           action must have the mnemonic NNNN.  If
                           this action has an accelerator, it must
                           be MMMMAAAAlllltttt <<<<FFFF9999>>>> if <<<<FFFF9999>>>> is available.

       MMMMaaaax____xxxiiiimmmmiiiizzzzeeee   AAAAlllltttt++++FFFF11110000  Enlarges a window to its maximum size.
                           This action must have the mnemonic XXXX.
                           If this action has an accelerator, it
                           must be MMMMAAAAlllltttt <<<<FFFF11110000>>>> if <<<<FFFF11110000>>>> is avail-
                           able.

       L____LLLoooowwwweeeerrrr         AAAAlllltttt++++FFFF3333 Moves a window to the bottom of the
                           window hierarchy.  This action can be
                           omitted.  This action must have the
                           mnemonic LLLL.  If this action has an
                           accelerator, it must be MMMMAAAAlllltttt <<<<FFFF3333>>>> if
                           <<<<FFFF3333>>>> is available.

       C____CCClllloooosssseeee         AAAAlllltttt++++FFFF4444 Closes a window and removes it from the
                           workspace.  This action must have the
                           mnemonic CCCC.  If this action has an
                           accelerator, it must be MMMMAAAAlllltttt <<<<FFFF4444>>>> if
                           <<<<FFFF4444>>>> is available.  Applications should
                           prompt the user to save any unsaved
                           changes when a window is closed.

       A secondary window Menu must have the following entries in
       the order listed:  RRRReeeessssttttoooorrrreeee, MMMMoooovvvveeee, SSSSiiiizzzzeeee, and CCCClllloooosssseeee.  A secon-
       dary window Menu can also include LLLLoooowwwweeeerrrr between SSSSiiiizzzzeeee and
       CCCClllloooosssseeee, but the lower option on a secondary window lowers all
       the windows secondary to that window's primary window.  A
       secondary window must not include an entry for MMMMiiiinnnniiiimmmmiiiizzzzeeee.

       Additional Menu items can be added to the window Menus of
       both primary and secondary windows according to the guide-
       lines for Menus described in Chapter 4.



                                                               5-11












       5.4  WWWWiiiinnnnddddoooowwww NNNNaaaavvvviiiiggggaaaattttiiiioooonnnn

       Moving the focus among windows using the keyboard is called
       window navigation.  Because applications should not warp the
       mouse pointer, a window manager need not support window
       navigation when the focus policy is in pointer mode.  Window
       managers must support window navigation when the focus pol-
       icy is in explicit mode.

       The window navigation model can be divided into two levels:

         1.  Moving among window families (among primary windows)

         2.  Moving within a window family (among secondary win-
             dows)

       A window family consists of a single primary window and all
       of its associated secondary windows.  A window manager must
       support moving the keyboard focus among windows in a window
       family using the KKKKNNNNeeeexxxxttttFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww key.  KKKKNNNNeeeexxxxttttFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww
       is usually bound to MMMMAAAAlllltttt <<<<FFFF6666>>>> if <<<<FFFF6666>>>> is available.  A win-
       dow manager may support moving the keyboard focus in the
       opposite direction from KKKKNNNNeeeexxxxttttFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww using the
       KKKKPPPPrrrreeeevvvvFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww key.  KKKKPPPPrrrreeeevvvvFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww is usually bound
       to MMMMSSSShhhhiiiifffftttt MMMMAAAAlllltttt <<<<FFFF6666>>>> if <<<<FFFF6666>>>> is available.

       Moving the focus between window families must be done using
       KKKKNNNNeeeexxxxttttWWWWiiiinnnnddddoooowwww and KKKKPPPPrrrreeeevvvvWWWWiiiinnnnddddoooowwww.  KKKKPPPPrrrreeeevvvvWWWWiiiinnnnddddoooowwww should move the
       focus among the windows in the opposite direction from
       KKKKNNNNeeeexxxxttttWWWWiiiinnnnddddoooowwww.  KKKKNNNNeeeexxxxttttWWWWiiiinnnnddddoooowwww is usually bound to MMMMAAAAlllltttt KKKKTTTTaaaabbbb.
       KKKKPPPPrrrreeeevvvvWWWWiiiinnnnddddoooowwww is usually bound to MMMMAAAAlllltttt KKKKBBBBaaaacccckkkkTTTTaaaabbbb.  If there is
       no icon box, KKKKNNNNeeeexxxxttttWWWWiiiinnnnddddoooowwww and KKKKPPPPrrrreeeevvvvWWWWiiiinnnnddddoooowwww must move among the
       icons as well as the windows.  When focus moves into a win-
       dow family, the focus should go to the window in the window
       family that last had the focus.  If no window in the family
       has ever had the focus, it should go to the most recently
       opened secondary window. The following table shows the com-
       mon window navigation bindings.

                  TTTTAAAABBBBLLLLEEEE 5555----2222....  Window Navigation Bindings

               ___________________________________________
              | VVVViiiirrrrttttuuuuaaaallll KKKKeeeeyyyy         DDDDeeeeffffaaaauuuulllltttt BBBBiiiinnnnddddiiiinnnngggg      |
              |___________________________________________|
              | KKKKNNNNeeeexxxxttttPPPPaaaannnneeee           <<<<FFFF6666>>>>                 |
              | KKKKNNNNeeeexxxxttttFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww   MMMMAAAAlllltttt KKKKNNNNeeeexxxxttttPPPPaaaannnneeee       |
              | KKKKPPPPrrrreeeevvvvFFFFaaaammmmiiiillllyyyyWWWWiiiinnnnddddoooowwww   MMMMAAAAlllltttt MMMMSSSShhhhiiiifffftttt KKKKNNNNeeeexxxxttttPPPPaaaannnneeee|
              |___________________________________________|





       5-12









                                   Window Manager Design Principles


              | KKKKNNNNeeeexxxxttttWWWWiiiinnnnddddoooowwww         MMMMAAAAlllltttt KKKKTTTTaaaabbbb            |
              | KKKKPPPPrrrreeeevvvvWWWWiiiinnnnddddoooowwww         MMMMAAAAlllltttt KKKKBBBBaaaacccckkkkTTTTaaaabbbb        |
              |___________________________________________|

       5.5  IIIIccccoooonnnnssss

       An icon is a stylized representation of an object.  A window
       icon is a minimized representation of a window or window
       family that can help organize windows and tasks in the
       display.  Iconifying a window is also known as minimizing a
       window.  The window manager must iconify all windows of win-
       dow family together.  It must not iconify any single window,
       primary or secondary, from a window family without also
       iconifying all the other windows in the window family.  The
       iconic representation of a window family should not change
       any state in the windows except the visual representation of
       the window.  The application running inside of a window must
       continue running even when the application is iconified. The
       application can adjust its own state when it is iconified.

       5.5.1  IIIIccccoooonnnn DDDDeeeeccccoooorrrraaaattttiiiioooonnnn

       An icon is made up of an image and a label.  Figure 5-4
       shows a typical Motif icon.

                  FFFFiiiigggguuuurrrreeee 5555----4444....  A Typical OSF/Motif Icon









       The image must be surrounded by a border that indicates when
       the icon has the keyboard focus.  The image area can contain
       text or a bitmap.  The label must be located just below the
       image and its border.  The label can also indicate when the
       icon has the keyboard focus by highlighting along with the
       image area.

       The label should contain the same text as the title area of
       the corresponding primary window, or an abbreviated form of
       it.  When the icon does not have the keyboard focus, the
       width of the label must be the same as the width of the
       image area and its border, truncating text if necessary.
       When the icon has the keyboard focus, the width of the label
       can expand to display the entire text.




                                                               5-13












       5.5.2  IIIIccccoooonnnn MMMMeeeennnnuuuu

       Clicking BBBBSSSSeeeelllleeeecccctttt in an icon must give the icon the keyboard
       focus and post the icon Menu.  The icon Menu must be the
       same Menu as the window Menu for the associated primary win-
       dow. SSSSiiiizzzzeeee and MMMMiiiinnnniiiimmmmiiiizzzzeeee must not be available from the icon
       Menu.  Navigating to the icon must also give the icon the
       keyboard focus and post the icon Menu.

       Double-clicking BBBBSSSSeeeelllleeeecccctttt anywhere in the icon must restore
       the window family, just as the icon Menu item RRRReeeessssttttoooorrrreeee does.
       Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg anywhere in the icon and dragging
       the mouse pointer must move the icon to track the pointer,
       just as the icon Menu item MMMMoooovvvveeee does.

       If the Window Manager has been customized by the user so
       that the icon Menu does not popup when the icon gets the
       focus, KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu, KKKKMMMMeeeennnnuuuu, and BBBBMMMMeeeennnnuuuu must popup the icon
       Menu.

       5.5.3  IIIIccccoooonnnn BBBBooooxxxx

       An icon box is a specialized window that acts as a storage
       location for icons.  An icon box acts like a typical window
       in the sense that it has a window frame and frame com-
       ponents.  The client area of an icon box must have an area
       for holding icons and horizontal and vertical scroll bars
       for moving around the icon area.  Figure 5-5 shows a typical
       icon box.

                FFFFiiiigggguuuurrrreeee 5555----5555....  A Typical OSF/Motif Icon Box















       The icon box must have all the same components as any other
       primary window.  Like other windows it can be sized, moved,
       minimized, maximized, restored, and lowered.  However, the
       window manager must not allow the icon box to be closed.
       The system Menu action CCCClllloooosssseeee must be replaced with the


       5-14









                                   Window Manager Design Principles


       system Menu action PPPPaaaacccckkkk IIIIccccoooonnnnssss in an icon box.  Double-
       clicking BBBBSSSSeeeelllleeeecccctttt in the icon box system Menu must only open
       the icon box system Menu.  It must not close the icon box.
       PPPPaaaacccckkkk IIIIccccoooonnnnssss arranges the icons as close as possible together
       in the visible icon area if possible.  PPPPaaaacccckkkk IIIIccccoooonnnnssss must have
       the mnemonic PPPP.  If PPPPaaaacccckkkk IIIIccccoooonnnnssss has an accelerator, it must
       be MMMMAAAAlllltttt <<<<FFFF11112222>>>> if <<<<FFFF11112222>>>> is available.  When the input focus
       is in the icon box, KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu must pop up the icon box
       system Menu if the Menu is unposted.  If the Menu is already
       posted, KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu must unpost the Menu.

       The icon box can contain an icon for each window family,
       even if it is active.  The icon for minimized window fami-
       lies must be the same as the icon would be outside of the
       icon box.  The icon for an active window family should be
       similar to the minimized icon, deemphasized somehow.

       Clicking BBBBSSSSeeeelllleeeecccctttt in an icon must give the icon keyboard
       focus and post the icon Menu.  The icon Menu must be the
       same Menu as the window Menu for the associated primary win-
       dow.  If the icon represents an active window family,
       RRRReeeessssttttoooorrrreeee and SSSSiiiizzzzeeee must not be available from the icon Menu.
       If the icon represents a minimized window family, SSSSiiiizzzzeeee and
       MMMMiiiinnnniiiimmmmiiiizzzzeeee must not be available from the icon Menu.  If the
       window manager is customized so that the icon with the focus
       does not have its window Menu automatically posted, BBBBMMMMeeeennnnuuuu or
       KKKKMMMMeeeennnnuuuu must post its Menu.

       Double-clicking BBBBSSSSeeeelllleeeecccctttt anywhere in an icon that represents
       a minimized window family must restore the window family,
       just as the icon Menu item RRRReeeessssttttoooorrrreeee does.  Double-clicking
       BBBBSSSSeeeelllleeeecccctttt anywhere in an icon that represents an active window
       family must raise the window family to the top of the window
       hierarchy.  Pressing BBBBSSSSeeeelllleeeecccctttt or BBBBDDDDrrrraaaagggg anywhere in the icon
       and dragging the mouse pointer must move the icon within the
       icon area to track the pointer, just as the icon Menu item
       MMMMoooovvvveeee does.

       KKKKDDDDoooowwwwnnnn, KKKKUUUUpppp, KKKKRRRRiiiigggghhhhtttt and KKKKLLLLeeeefffftttt, must navigate among the icons
       in the icon box.  KKKKDDDDoooowwwwnnnn, KKKKUUUUpppp, KKKKRRRRiiiigggghhhhtttt and KKKKLLLLeeeefffftttt, are usually
       bound to the arrow keys, as shown in the table at the end of
       this section.  Icon navigation must behave as described in
       the following text.  Note that KKKKDDDDoooowwwwnnnn and KKKKRRRRiiiigggghhhhtttt do not need
       to traverse icons in the same order.

       KKKKDDDDoooowwwwnnnn   in a left-to-right direction language environment,
               must move the location cursor through the icons in
               the icon box, starting at the upper-left icon and
               ending at the lower-right icon then wrapping back up
               to the upper-left.  In a right-to-left direction
               language environment, the location cursor can move,


                                                               5-15












               starting at the upper-right and moving to the
               lower-left.

       KKKKLLLLeeeefffftttt   must move the location cursor through the icons in
               the opposite direction of KKKKRRRRiiiigggghhhhtttt.

       KKKKRRRRiiiigggghhhhtttt  in a left-to-right direction language environment,
               must move the location cursor through the icons in
               the icon box, starting at the upper-left icon and
               ending at the lower-right icon then wrapping back up
               to the upper-left.  In a right-to-left direction
               language environment, the location cursor can move,
               starting at the upper-right and moving to the
               lower-left.

       KKKKUUUUpppp     must move the location cursor through the icons in
               the opposite direction of KKKKDDDDoooowwwwnnnn.

       Traversal can be either through all the icons in the icon
       box, regardless of whether they are in the visible portion
       of the icon box, or only through the icons in the visible
       portion of the icon box.  If traversal only goes through the
       visible portion of the icon box, the ScrollBars in the icon
       box must be traversable using KKKKNNNNeeeexxxxttttFFFFiiiieeeelllldddd and KKKKPPPPrrrreeeevvvvFFFFiiiieeeelllldddd,
       which move the location cursor among the ScrollBars and the
       icon area, if the icon area contains any visible icons.  If
       traversal goes through all icons in the icon box, the
       ScrollBars should not be traversable, and the visible por-
       tion of the icon area must be scaled to keep the location
       cursor visible.

                 TTTTAAAABBBBLLLLEEEE 5555----3333....  Icon Box Traversal Bindings

                     ________________________________
                    | VVVViiiirrrrttttuuuuaaaallll KKKKeeeeyyyy   DDDDeeeeffffaaaauuuulllltttt BBBBiiiinnnnddddiiiinnnnggggssss|
                    |________________________________|
                    | KKKKTTTTaaaabbbb          <<<<TTTTaaaabbbb>>>>           |
                    | KKKKBBBBaaaacccckkkkTTTTaaaabbbb      MMMMSSSShhhhiiiifffftttt <<<<TTTTaaaabbbb>>>>    |
                    | KKKKNNNNeeeexxxxttttFFFFiiiieeeelllldddd    KKKKTTTTaaaabbbb            |
                    |               MMMMCCCCttttrrrrllll KKKKTTTTaaaabbbb      |
                    | KKKKPPPPrrrreeeevvvvFFFFiiiieeeelllldddd    KKKKBBBBaaaacccckkkkTTTTaaaabbbb        |
                    |               MMMMCCCCttttrrrrllll KKKKBBBBaaaacccckkkkTTTTaaaabbbb  |
                    | KKKKWWWWiiiinnnnddddoooowwwwMMMMeeeennnnuuuu   MMMMSSSShhhhiiiifffftttt KKKKEEEEssssccccaaaappppeeee  |
                    |               MMMMAAAAlllltttt KKKKSSSSppppaaaacccceeee     |
                    | KKKKMMMMeeeennnnuuuu         <<<<MMMMeeeennnnuuuu>>>> oooorrrr <<<<FFFF4444>>>>  |
                    | KKKKDDDDoooowwwwnnnn         <<<<|vv|||vv>>>>             |
                    | KKKKLLLLeeeefffftttt         <<<<<<<<---->>>>            |
                    |________________________________|





       5-16









                                   Window Manager Design Principles


                    | KKKKRRRRiiiigggghhhhtttt        <<<<---->>>>>>>>            |
                    | KKKKUUUUpppp           <<<<|^^|||^^>>>>             |
                    |________________________________|


















































                                                               5-17





