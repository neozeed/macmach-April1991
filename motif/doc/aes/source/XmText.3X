.\" **
.\" **  (c) Copyright 1989, 1990, 1991 Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmText 3X "" "" "" ""
.SH NAME
\fBXmText \(em the Text widget class.\fP
.iX "XmText"
.iX "widget class" "Text"
.sp 1
.SH "AES SUPPORT LEVEL"
Full-use
.SH SYNOPSIS
\fB#include <Xm/Text.h>\fP
.sp 1
.SH DESCRIPTION
Text provides a single-line and multiline text editor for customizing both user and 
programmatic interfaces.  It can be used for single-line string entry, 
forms entry with verification procedures, and full-window editing.  
It provides an application with a consistent editing system for 
textual data.  The screen's textual data adjusts to the 
application writer's needs.
.PP
Text provides separate callback lists to verify
movement of the insert cursor, modification of the text, and
changes in input focus.  Each of
these callbacks provides the verification function with the
widget instance, the event that caused the callback, and a
data structure specific to the verification type.  From this
information the function can verify if the application considers
this to be a legitimate state change and can signal the widget
whether to continue with the action.
.PP
The user interface tailors a new set
of translations.  The default translations provide key bindings
for insert cursor movement, deletion, insertion, and selection
of text.
.PP 
Text allows the user to select regions of text.
Selection is based on the model specified in the \fIInter-Client
Communication Conventions Manual\fP (ICCCM).
Text supports primary and secondary selection.
.sp 1
.SS "Mouse Selection"
The Text widget allows text to be edited, inserted, and selected.
The user can cut, copy, and paste text using the clipboard, primary
transfer, or secondary transfer.
.PP
The insertion cursor, displayed as an I-beam, shows where input is
inserted.
Clicking \fBBSelect\fP moves the insertion cursor and deselects the
current selection if it is in the Text widget.
Clicking \fBBToggle\fP moves the insertion cursor but does not change
the current selection.
.PP
The Text widget allows the user to select a range of text.
Pressing \fBBSelect\fP starts a new primary selection.
Dragging \fBBSelect\fP selects all text between the position of the
pointer and the position where \fBBSelect\fP was pressed.
.PP
\fBBExtend\fP extends a selection using the balance-beam method.
When the user presses \fBBExtend\fP, the selection becomes anchored at
the edge of the selection farthest from the pointer position.
When the user releases \fBBExtend\fP, the selection extends from the
anchor to the position where \fBBExtend\fP is released, and any text
outside that range is deselected.
.PP
Clicking \fBBDrag\fP copies the current selection to the insertion
cursor, whether the current selection is in the same widget or a
different widget.
Clicking \fBMAlt BDrag\fP cuts the current selection to the insertion
cursor.
.PP
The destination cursor shows the last place that text was inserted,
edited, or selected.
When it is separate from the insertion cursor, it is shown as a caret.
When the user pastes data from the clipboard, the data go to the
destination cursor.
Clicking \fBBSelect\fP moves the destination cursor.
Clicking \fBBToggle\fP also moves the destination cursor, but only if no
text is selected in the widget.
.PP
Pressing \fBBDrag\fP starts a new secondary selection.
Dragging \fBBDrag\fP makes a secondary selection consisting of all text
between the position of the pointer and the position where \fBBDrag\fP
was pressed.
Releasing \fBBDrag\fP copies the secondary selection to the destination
cursor, whether the destination cursor is in the same 
widget or a
different widget.
Dragging \fBMAlt BDrag\fP also makes a secondary selection, and
releasing \fBMAlt BDrag\fP cuts the secondary selection to the
destination cursor.
.sp 1
.SS "Keyboard Selection"
All selection operations available from the mouse are also available
from the keyboard.
Text has two keyboard selection modes, Normal Mode and Add Mode.
In Normal Mode, if text is selected, a navigation operation deselects
the selected text and moves the destination cursor to the insertion
cursor before navigating.
In Add Mode, navigation operations have no effect other than navigation.
In both modes, pressing \fBKSelect\fP has the same effect as pressing
\fBBSelect\fP at that position.
.PP
Pressing \fBKExtend\fP extends the current selection to the insertion
cursor using the balance-beam method.
The current selection becomes anchored at the edge of the selection
farthest from the insertion cursor.
The selection then extends from the anchor to the insertion cursor, and
any text outside that range is deselected.
If no text is selected, \fBKExtend\fP selects the text between the
destination cursor and the insertion cursor.
.PP
Shifted navigation operations also extend a selection.
In Normal Mode, if no text is selected or if the selection is disjoint
from the insertion cursor, a shifted navigation operation selects the
navigated text and deselects any text outside that range.
In Add Mode, if no text is selected, a shifted navigation operation
first navigates and then selects the text between the destination cursor
and the insertion cursor.
.PP
In the remaining cases \(em Normal Mode with the insertion cursor at or
inside a selection, and Add Mode with any selection \(em a shifted
navigation operation extends the selection using the balance-beam method.
Before navigation, the current selection becomes anchored at the edge of
the selection farthest from the insertion cursor.
After navigation, the selection extends from the anchor to the insertion
cursor, and any text outside that range is deselected.
.PP
\fBKPrimaryCopy\fP copies the current selection to the insertion cursor.
\fBKPrimaryCut\fP cuts the current selection to the insertion cursor.
.PP
\fBKQuickCopy\fP and \fBKQuickCut\fP start a secondary selection at the
insertion cursor.
Navigation operations extend the secondary selection.
\fBKQuickExtend\fP then copies or cuts the secondary selection to
the destination cursor.
.sp 1
.SS "Classes"
Text inherits behavior and resources from \fBCore\fP and \fBPrimitive\fP 
classes.
.PP
The class pointer is \fBxmTextWidgetClass\fP.
.PP
The class name is \fBXmText\fP.
.sp 1
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the 
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \fBXmN\fP or
\fBXmC\fP prefix and use the remaining letters.  To specify one of the defined 
values for a resource in a .Xdefaults file, remove the \fBXm\fP prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (\fBC\fP),
set by using \fBXtSetValues\fP (\fBS\fP), 
retrieved by using \fBXtGetValues\fP (\fBG\fP), or is not applicable (\fBN/A\fP).
.sp 1
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmText Resource Set
Name	Class	Type	Default	Access
_
XmNactivateCallback	XmCCallback	XtCallbackList	NULL	C
XmNautoShowCursorPosition	XmCAutoShowCursorPosition	Boolean	True	CSG
XmNcursorPosition	XmCCursorPosition	XmTextPosition	0	CSG
XmNeditable	XmCEditable	Boolean	True	CSG
XmNeditMode	XmCEditMode	int	XmSINGLE_LINE_EDIT	CSG
XmNfocusCallback	XmCCallback	XtCallbackList	NULL	C
XmNgainPrimaryCallback	XmCCallback	XtCallbackList	NULL	C
XmNlosePrimaryCallback	XmCCallback	XtCallbackList	NULL	C
XmNlosingFocusCallback	XmCCallback	XtCallbackList	NULL	C
XmNmarginHeight	XmCMarginHeight	Dimension	5	CSG
XmNmarginWidth	XmCMarginWidth	Dimension	5	CSG
XmNmaxLength	XmCMaxLength	int	largest integer	CSG
XmNmodifyVerifyCallback	XmCCallback	XtCallbackList	NULL	C
.tH
XmNmotionVerifyCallback	XmCCallback	XtCallbackList	NULL	C
XmNsource	XmCSource	XmTextSource	Default source	CSG
XmNtopCharacter	XmCTextPosition	XmTextPosition	0	CSG
XmNvalue	XmCValue	String	""	CSG
XmNvalueChangedCallback	XmCCallback	XtCallbackList	NULL	C
XmNverifyBell	XmCVerifyBell	Boolean	True	CSG
.TE
.sp 1
.IP "\fBXmNactivateCallback\fP"
Specifies the list of callbacks that is called when the user invokes an
event that calls the \fBActivate()\fP function.
The type of the structure whose address is passed to this callback is
\fBXmAnyCallbackStruct\fP.
The reason sent by the callback is \fBXmCR_ACTIVATE\fP.
.IP "\fBXmNautoShowCursorPosition\fP"
Ensures that the visible text contains the insert cursor when set
to True.
If the insert cursor changes, the contents
of Text may scroll in order to bring the insertion
point into the window.
.IP "\fBXmNcursorPosition\fP"
Indicates the position in the text where the current insert cursor is to
be located.
Position is determined by the number of characters from the beginning of
the text.
The first character position is 0.
.br
.ne 10
.IP "\fBXmNeditable\fP"
Indicates that the user can edit the text string when set to
True.  Prohibits the user from editing the text when set to False.
.ne 12
.IP "\fBXmNeditMode\fP"
Specifies the set of keyboard bindings used in Text.
The default keyboard bindings (\fBXmSINGLE_LINE_EDIT\fP)
provides the set of key bindings to be used in editing
single-line text.  The multiline bindings
(\fBXmMULTI_LINE_EDIT\fP) provides the set of key bindings to be
used in editing multiline text.  
.IP
The results of placing a Text widget inside a ScrolledWindow when the
Text's \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP are undefined.
.IP "\fBXmNfocusCallback\fP"
Specifies the list of callbacks called
before Text has accepted input focus.  The type of the structure whose
address is passed to this 
callback is \fBXmAnyCallbackStruct\fP.
The reason sent by the callback is \fBXmCR_FOCUS\fP.
.IP "\fBXmNgainPrimaryCallback\fP"
Specifies the list of callbacks called when an event causes the Text
widget to gain ownership of the primary selection.
The reason sent by the callback is \fBXmCR_GAIN_PRIMARY\fP.
.IP "\fBXmNlosePrimaryCallback\fP"
Specifies the list of callbacks called when an event causes the Text
widget to lose ownership of the primary selection.
The reason sent by the callback is \fBXmCR_LOSE_PRIMARY\fP.
.br
.ne 7
.IP "\fBXmNlosingFocusCallback\fP"
Specifies the list of callbacks called
before Text loses input focus.
The type of the structure whose address is passed to this callback is
\fBXmTextVerifyCallbackStruct\fP.
The reason sent by the callback is \fBXmCR_LOSING_FOCUS\fP.
.IP "\fBXmNmarginHeight\fP"
Specifies the distance between the top edge of the widget 
window and the text, and between the bottom edge of the widget
window and the text.  
.br
.ne 6
.IP "\fBXmNmarginWidth\fP"
Specifies the distance between the left edge of the widget 
window and the text, and between the right edge of the widget
window and the text.
.IP "\fBXmNmaxLength\fP"
Specifies the maximum length of the text string that can be entered into
text from the keyboard.
Strings that are entered using the \fBXmNvalue\fP resource or the
\fBXmTextSetString\fP function ignore this resource.
.IP "\fBXmNmodifyVerifyCallback\fP"
Specifies the list of callbacks called
before text is deleted from or inserted into
Text.  
The type of the structure whose address is passed to this callback is
\fBXmTextVerifyCallbackStruct\fP.
The reason sent by the callback is \fBXmCR_MODIFYING_TEXT_VALUE\fP.
.IP "\fBXmNmotionVerifyCallback\fP"
Specifies the list of callbacks called
before the insert cursor is moved to a new position.  
The type of the structure whose address is passed to this callback is
\fBXmTextVerifyCallbackStruct\fP. 
The reason sent  by the callback is \fBXmCR_MOVING_INSERT_CURSOR\fP.
.IP "\fBXmNsource\fP"
Specifies the source with which the widget displays text.
If no source is specified, the widget creates a default string source.
This resource can be used to share text sources between Text widgets.
.IP "\fBXmNtopCharacter\fP"
Displays the position of text at the top of the window.
Position is determined by the number of characters from the
beginning of the text.
The first character position is 0.
.IP
If the \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP, the line of text
that contains the top character is displayed at the top of the widget
without shifting the text left or right.
\fBXtGetValues\fP for \fBXmNtopCharacter\fP returns the position of the
first character in the line that is displayed at the top of the widget.
.sp
.ne 2i
.IP "\fBXmNvalue\fP"
Displays the string value.  \fBXtGetValues\fP returns the
value of the internal buffer and \fBXtSetValues\fP copies the
string values into the internal buffer.
.IP "\fBXmNvalueChangedCallback\fP"
Specifies the list of callbacks called
after text is deleted from or inserted into
Text.  
The type of the structure whose address is passed to this callback is
\fBXmAnyCallbackStruct\fP.
The reason sent by the callback is \fBXmCR_VALUE_CHANGED\fP.
.IP "\fBXmNverifyBell\fP"
Specifies whether the bell should sound when the verification returns
without continuing the action.
The default is True, indicating that the bell should sound.
.sp 1
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmText Input Resource Set
Name	Class	Type	Default	Access
_
XmNpendingDelete	XmCPendingDelete	Boolean	True	CSG
XmNselectionArray	XmCSelectionArray	Pointer	default array	CSG
XmNselectionArrayCount	XmCSelectionArrayCount	int	4	CSG
XmNselectThreshold	XmCSelectThreshold	int	5	CSG
.TE
.sp 1
.IP "\fBXmNpendingDelete\fP"
Indicates that pending delete mode is on when the Boolean value is True.
Pending deletion is defined as deletion
of the selected text when an insertion is made.
.br
.ne 25
.IP "\fBXmNselectionArray\fP"
Defines the actions for multiple mouse clicks.
The value of the resource is an array of \fBXmTextScanType\fP elements.
\fBXmTextScanType\fP is an enumeration indicating possible actions.
Each mouse click performed within half a second
of the previous mouse click increments the index into
this array and performs the defined action for that index.
The possible actions in the order they occur in the default array are:
.RS
.IP \(bu 3
\fBXmSELECT_POSITION\fP \(em resets the insert cursor position
.IP \(bu 3
\fBXmSELECT_WORD\fP \(em selects a word
.IP \(bu 3
\fBXmSELECT_LINE\fP \(em selects a line of text
.IP \(bu 3
\fBXmSELECT_ALL\fP \(em selects all of the text
.RE
.IP "\fBXmNselectionArrayCount\fP"
Indicates the number of elements in the \fBXmNselectionArray\fP resource.
The value must not be negative.
.IP "\fBXmNselectThreshold\fP"
Specifies the number of pixels of motion that is required to select the
next character when selection is performed using the click-drag
mode of selection.
The value must not be negative.
.sp 1
.ne 5i
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmText Output Resource Set
Name	Class	Type	Default	Access
_
XmNblinkRate	XmCBlinkRate	int	500	CSG
XmNcolumns	XmCColumns	short	dynamic	CSG
XmNcursorPositionVisible	XmCCursorPositionVisible	Boolean	True	CSG
XmNfontList	XmCFontList	XmFontList	dynamic	CSG
XmNresizeHeight	XmCResizeHeight	Boolean	False	CSG
XmNresizeWidth	XmCResizeWidth	Boolean	False	CSG
XmNrows	XmCRows	short	dynamic	CSG
XmNwordWrap	XmCWordWrap	Boolean	False	CSG
.TE
.sp 1
.IP "\fBXmNblinkRate\fP"
Specifies the blink rate of the text cursor in milliseconds.
The time indicated in the blink rate relates to the
time the cursor is visible and the time the
cursor is invisible (that is, the time it takes to blink
.ne 5
the insertion cursor on and off is twice the blink
rate).  The cursor does not blink when the blink rate
is set to zero.
The value must not be negative.
.IP "\fBXmNcolumns\fP"
Specifies the initial width of the text window measured in character
spaces.
The value must be greater than 0.
The default value depends on the value of the \fBXmNwidth\fP resource.
If no width is specified the default is 20.
.IP "\fBXmNcursorPositionVisible\fP"
Indicates that the insert cursor position is marked by a blinking text
cursor when the Boolean value is True.
.IP "\fBXmNfontList\fP"
Specifies the font list to be used for Text.
If this value is NULL at initialization, it is initialized by
looking up the parent hierarchy of the widget for an ancestor that is a
subclass of the XmBulletinBoard, VendorShell, or XmMenuShell widget class.
If such an ancestor is found, the font list is initialized to the appropriate
default font list of the ancestor widget (XmNdefaultFontList for VendorShell
and XmMenuShell, XmNtextFontList for XmBulletinBoard).
See \fBXmFontListCreate(3X)\fP to create a font list.
.IP "\fBXmNresizeHeight\fP"
Indicates that Text 
attempts to resize its height to accommodate all the text
contained in the widget when the Boolean value is True.  If the Boolean value is set to True, 
the text is always 
displayed starting from the first position in the source, even if
instructed otherwise.  This attribute is ignored when the application uses a
ScrolledText widget and when \fBXmNscrollVertical\fP is True.
.IP "\fBXmNresizeWidth\fP"
Indicates that Text attempts to resize its width to accommodate all
the text contained in the widget when the Boolean value is True.
This attribute is ignored if
\fBXmNwordWrap\fP is True.
.IP "\fBXmNrows\fP"
Specifies the initial height of the text window measured in character
heights. This attribute is ignored if the text widget resource
\fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP.
The value must be greater than 0.
The default value depends on the value of the \fBXmNheight\fP resource.
If no height is specified the default is 1.
.sp
.ne 3i
.IP "\fBXmNwordWrap\fP"
Indicates that lines are to be broken at word breaks (that is, the text
does not go off the right edge of the window) when the Boolean value is True.
Words are defined as a sequence
of characters separated by white space.  White space is defined as
a space, tab, or newline.  This attribute is ignored if the text
widget resource \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP.
.sp 1
.IP
The following resources are used only when text is created in a
ScrolledWindow.  See the man page for \fBXmCreateScrolledText\fB.
.sp 1
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmText ScrolledText Resource Set
Name	Class	Type	Default	Access
_
XmNscrollHorizontal	XmCScroll	Boolean	True	CG
XmNscrollLeftSide	XmCScrollSide	Boolean	dynamic	CG
XmNscrollTopSide	XmCScrollSide	Boolean	False	CG
XmNscrollVertical	XmCScroll	Boolean	True	CG
.TE
.sp 1
.br
.ne 20
.IP "\fBXmNscrollHorizontal\fP"
Adds a ScrollBar that allows the user to scroll horizontally through
text when the Boolean value is True.  
This attribute is ignored if the Text resource \fBXmNeditMode\fP is
\fBXmSINGLE_LINE_EDIT\fP.
This resource is forced to False when the Text widget is placed in
a ScrolledWindow with \fBXmNscrollingPolicy\fP set to
\fBXmAUTOMATIC\fP.
.IP "\fBXmNscrollLeftSide\fP"
.ne 15
Indicates that the vertical ScrollBar should be placed on the left side of
the scrolled text window when the Boolean value is True.  This attribute
is ignored if \fBXmNscrollVertical\fP is False or the Text resource
\fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP.
The default value may depend on the value of the
\fBXmNstringDirection\fP resource.
.IP "\fBXmNscrollTopSide\fP"
Indicates that the horizontal ScrollBar should be placed on the top side of the
scrolled text window when the Boolean value is True.  
.IP "\fBXmNscrollVertical\fP"
Adds a ScrollBar that allows the user to scroll vertically through text when
the Boolean value is True. 
This resource is forced to False when the Text widget is placed in 
a ScrolledWindow with \fBXmNscrollingPolicy\fP set to
\fBXmAUTOMATIC\fP.
.sp 1
.SS "Inherited Resources"
Text inherits behavior and resources from the following   
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmPrimitive Resource Set
Name	Class	Type	Default	Access
_
XmNbottomShadowColor	XmCBottomShadowColor	Pixel	dynamic	CSG
XmNbottomShadowPixmap	XmCBottomShadowPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNforeground	XmCForeground	Pixel	dynamic	CSG
XmNhelpCallback	XmCCallback	XtCallbackList	NULL	C
XmNhighlightColor	XmCHighlightColor	Pixel	dynamic	CSG
XmNhighlightOnEnter	XmCHighlightOnEnter	Boolean	False	CSG
XmNhighlightPixmap	XmCHighlightPixmap	Pixmap	dynamic	CSG
XmNhighlightThickness	XmCHighlightThickness	Dimension	2	CSG
XmNnavigationType	XmCNavigationType	XmNavigationType	dynamic	CSG
XmNshadowThickness	XmCShadowThickness	Dimension	2	CSG
XmNtopShadowColor	XmCTopShadowColor	Pixel	dynamic	CSG
XmNtopShadowPixmap	XmCTopShadowPixmap	Pixmap	dynamic	CSG
XmNtraversalOn	XmCTraversalOn	Boolean	True	CSG
XmNuserData	XmCUserData	Pointer	NULL	CSG
.TE
.in
.sp 1
.in 0
.TS
center allbox;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
Core Resource Set 
Name	Class	Type	Default	Access
_
XmNaccelerators	XmCAccelerators	XtAccelerators	dynamic	CSG
XmNancestorSensitive	XmCSensitive	Boolean	dynamic	G
XmNbackground	XmCBackground	Pixel	dynamic	CSG
XmNbackgroundPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderColor	XmCBorderColor	Pixel	XtDefaultForeground	CSG
XmNborderPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderWidth	XmCBorderWidth	Dimension	0	CSG
XmNcolormap	XmCColormap	Colormap	dynamic	CG
XmNdepth	XmCDepth	int	dynamic	CG
XmNdestroyCallback	XmCCallback	XtCallbackList	NULL	C
XmNheight	XmCHeight	Dimension	dynamic	CSG
XmNinitialResourcesPersistent	XmCInitialResourcesPersistent	Boolean	True	C
XmNmappedWhenManaged	XmCMappedWhenManaged	Boolean	True	CSG
XmNscreen	XmCScreen	Screen *	dynamic	CG
.tH
XmNsensitive	XmCSensitive	Boolean	True	CSG
XmNtranslations	XmCTranslations	XtTranslations	dynamic	CSG
XmNwidth	XmCWidth	Dimension	dynamic	CSG
XmNx	XmCPosition	Position	0	CSG
XmNy	XmCPosition	Position	0	CSG
.TE
.in
.sp 1
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sp
.ne 10
.nf
.ta .25i 1.5i
.sp
\fBtypedef struct\fP
{
	\fBint\fP	\fIreason\fP;
	\fBXEvent\fP	\fI* event\fP;
} \fBXmAnyCallbackStruct\fP;
.fi
.fi
.sp 1
.IP "\fIreason\fP" .75i
Indicates why the callback was invoked
.IP "\fIevent\fP" .75i
Points to the \fBXEvent\fP that triggered the callback
.PP
The Text widget defines a new callback structure
for use with verification callbacks.  Note that
not all fields are relevant for every
callback reason.  The application must first
look at the reason field and use only the structure
members that are valid for the particular reason.
A pointer to the following structure is passed to callbacks for
\fBXmNlosingFocusCallback\fP, \fBXmNmodifyVerifyCallback\fP, and
\fBXmNmotionVerifyCallback\fP.
.nf
.ta .25i 1.5i
.sp
.ne 2i
\fBtypedef struct\fP
.sp 1
.br
.ne 4
{
	\fBint\fP	\fIreason\fP;
	\fBXEvent\fP	\fI* event\fP;
	\fBBoolean\fP	\fIdoit\fP;
	\fBXmTextPosition\fP 	\fIcurrInsert, newInsert\fP;
	\fBXmTextPosition\fP 	\fIstartPos, endPos\fP;
	\fBXmTextBlock\fP 	\fItext\fP;
} \fBXmTextVerifyCallbackStruct, *XmTextVerifyPtr\fP;
.fi
.fi
.sp 1
.IP "\fIreason\fP" .75i
Indicates why the callback was invoked.
.IP "\fIevent\fP" .75i
Points to the \fBXEvent\fP that triggered the callback.
.IP "\fIdoit\fP" .75i
Indicates whether the action that invoked the callback is performed.
Setting \fIdoit\fP to False negates the action.
.IP "\fIcurrInsert\fP" .75i
Indicates the current position of the insert cursor.
.IP "\fInewInsert\fP" .75i
Indicates the position at which the user attempts to position the insert
cursor.
.IP "\fIstartPos\fP" .75i
Indicates the starting position of the text to modify.  If the callback is
not a modify verification callback, this value is the same as \fIcurrInsert\fP.
.IP "\fIendPos\fP" .75i
Indicates the ending position of the text to modify.  If no text is replaced or
deleted, the value is the same as \fIstartPos\fP.  If the callback is not 
a modify verification callback, this value is the same as \fIcurrInsert\fP.
.IP "\fItext\fP" .75i
Points to a structure of type \fBXmTextBlockRec\fP.  This structure holds
the textual information to be inserted.
.PP
.nf
.ta .25i 1.5i
\fBtypedef struct\fP
{
	\fBchar\fP	\fI* ptr\fP;
	\fBint\fP	\fIlength\fP;
	\fBXmTextFormat\fP	\fIformat\fP;
} \fBXmTextBlockRec, *XmTextBlock\fP;
.fi
.fi
.sp 1
.IP "\fIptr\fP" .75i
.ne 15
Points to the text to be inserted.
.IP "\fIlength\fP" .75i
Specifies the length of the text to be inserted.
.IP "\fIformat\fP" .75i
Specifies the format of the text (for example, \fBFMT8BIT\fP).
.sp 1
.IP
The following table describes the reasons why the individual
verification callback structure fields are valid:
.sp 1
.in -.75i
.TS
box, tab(;);
lb | lb
lb | li.
Reason;Valid Fields
.sp .2
_
.sp .2
XmCR_LOSING_FOCUS;T{
reason, event, doit, currInsert, newInsert, startPos, endPos
T}
;;
XmCR_MODIFYING_TEXT_VALUE;T{
reason, event, doit, currInsert, newInsert, startPos, endPos, text
T}
;;
XmCR_MOVING_INSERT_CURSOR;T{
reason, event, doit, currInsert, newInsert
T}
.sp .2
.TE
.in
.sp 1 \"Adds space before the SS
.SS "Translations"
XmText includes translations from XmPrimitive.
The XmText translations are listed below.
These translations may not directly correspond to a
translation table.
The actions represent the effective behavior of the associated events,
and they may differ in a right-to-left language environment.
\fB
.nf
.ta 1.5i
.sp .5
BSelect Press:	grab-focus()
BSelect Motion:	extend-adjust()
BSelect Release:	extend-end()
.sp 1
BExtend Press:	extend-start()
BExtend Motion:	extend-adjust()
BExtend Release:	extend-end()
.sp 1
BToggle Press:	move-destination()
.sp 1
BDrag Press:	secondary-start()
BDrag Motion:	secondary-adjust()
BDrag Release:	copy-to()
.sp 1
MCtrl BDrag Press:	secondary-start()
MCtrl BDrag Motion:	secondary-adjust()
MCtrl BDrag Release:	copy-to()
.sp 1
MAlt BDrag Press:	secondary-start()
MAlt BDrag Motion:	secondary-adjust()
MAlt BDrag Release:	move-to()
.sp 1
KUp:	process-up()
MShift KUp:	process-shift-up()
MCtrl KUp:	backward-paragraph()
MShift MCtrl KUp:	backward-paragraph(extend)
.sp 1
KDown:	process-down()
MShift KDown:	process-shift-down()
MCtrl KDown:	forward-paragraph()
MShift MCtrl KDown:	forward-paragraph(extend)
.sp 1
KLeft:	backward-character()
MShift KLeft:	key-select(left)
MCtrl KLeft:	backward-word()
MShift MCtrl KLeft:	backward-word(extend)
.sp 1
KRight:	forward-character()
MShift KRight:	key-select(right)
MCtrl KRight:	forward-word()
MShift MCtrl KRight:	forward-word(extend)
.sp 1
KPageUp:	previous-page()
MShift KPageUp:	previous-page(extend)
.sp 1
KPageDown:	next-page()
MShift KPageDown:	next-page(extend)
.sp 1
KPageLeft:	page-left()
KPageRight:	page-right()
.sp 1
KBeginLine:	beginning-of-line()
MShift KBeginLine:	beginning-of-line(extend)
.sp 1
KEndLine:	end-of-line()
MShift KEndLine:	end-of-line(extend)
.sp 1
KBeginData:	beginning-of-file()
MShift KBeginData:	beginning-of-file(extend)
.sp 1
KEndData:	end-of-file()
MShift KEndData:	end-of-file(extend)
.sp 1
KTab:	process-tab()
KNextField:	next-tab-group()
KPrevField:	prev-tab-group()
.sp 1
KEnter:	process-return()
KActivate:	activate()
.sp 1
KDelete:	delete-next-character()
KBackSpace:	delete-previous-character()
.sp 1
KAddMode:	toggle-add-mode()
.sp 1
KSpace:	self-insert()
KSelect:	set-anchor()
KExtend:	key-select()
MAny KCancel:	process-cancel()
KClear:	clear-selection()
KSelectAll:	select-all()
KDeselectAll:	deselect-all()
.sp 1
KCut:	cut-clipboard()
KCopy:	copy-clipboard()
KPaste:	paste-clipboard()
.sp 1
KPrimaryCut:	cut-primary()
KPrimaryCopy:	copy-primary()
KPrimaryPaste:	copy-primary()
.sp 1
KQuickCut:	quick-cut-set()
KQuickCopy:	quick-copy-set()
KQuickPaste:	quick-copy-set()
KQuickExtend:	do-quick-action()
.sp 1
KHelp:	Help()
.sp 1
KAny:	self-insert()
.fi
\fP
.sp 1 \"Adds space before the SS
.SS "Action Routines"
The XmText action routines are described below:
.IP "\fBactivate()\fP:"
Calls the callbacks for \fBXmNactivateCallback\fP.
.IP "\fBbackward-character()\fP:"
Moves the insertion cursor one character to the left.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
This action may have different behavior in a right-to-left language
environment.
.IP "\fBbackward-paragraph(\fP\fIextend\fP\fB)\fP:"
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP and this action is
called with no argument,
moves the insertion cursor to the first non-whitespace character following
the first previous blank line or beginning of the text.
If the insertion cursor is already at the beginning of a paragraph,
moves the insertion cursor to the beginning of the previous paragraph.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP and this action is
called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBbackward-word(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor to the first non-whitespace character after the
first whitespace character to the left or the beginning of the line.
If the insertion cursor is already at the beginning of a word,
moves the insertion cursor to the beginning of the previous word.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
This action may have different behavior in a right-to-left language
environment.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBbeep()\fP:"
Causes the terminal to beep.
.IP "\fBbeginning-of-file(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor to the beginning of the text.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBbeginning-of-line(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor to the beginning of the line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBclear-selection()\fP:"
Clears the current selection by replacing each character except
\fB<Return>\fP with a \fB<space>\fP character.
.IP "\fBcopy-clipboard()\fP:"
Copies the current selection to the clipboard.
.IP "\fBcopy-primary()\fP:"
Copies the primary selection to the insertion cursor.
.IP "\fBcopy-to()\fP:"
If a secondary selection exists, copies the secondary selection to the
insertion cursor.
If no secondary selection exists, copies the primary selection to the
pointer location.
.IP "\fBcut-clipboard()\fP:"
Cuts the current selection to the clipboard.
.IP "\fBcut-primary()\fP:"
Cuts the primary selection to the insertion cursor.
.IP "\fBdelete-next-character()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection;
otherwise, deletes the character following the insertion cursor.
.IP "\fBdelete-next-word()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection;
otherwise, deletes the characters following the insertion cursor to the
next space, tab
or end of line character.
.IP "\fBdelete-previous-character()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection;
otherwise, deletes the character of text immediately preceding the
insertion cursor.
.IP "\fBdelete-previous-word()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection;
otherwise, deletes the characters preceding the insertion cursor to the
next space,
tab or beginning of line character.
.IP "\fBdelete-selection()\fP:"
Deletes the current selection.
.IP "\fBdelete-to-end-of-line()\fP:"
Deletes the characters following the insertion cursor to the next
end of line character.
.IP "\fBdelete-to-start-of-line()\fP:"
Deletes the characters preceding the insertion cursor to the previous
beginning of line character.
.IP "\fBdeselect-all()\fP:"
Deselects the current selection.
.IP "\fBdo-quick-action()\fP:"
Marks the end of a secondary selection.
Performs the quick action initiated by the \fBquick-copy-set\fP or
\fBquick-cut-set\fP action.
.IP "\fBend-of-file(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor to the end of the text.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBend-of-line(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor to the end of the line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBextend-adjust()\fP:"
Selects text from the anchor to the pointer position and deselects text
outside that range.
Moving the pointer over several lines selects text from the anchor to
the end of each line the pointer moves over and up to the pointer
position on the current line.
.IP "\fBextend-end()\fP:"
Moves the insertion cursor to the position of the pointer.
.IP "\fBextend-start()\fP:"
Adjusts the anchor using the balance-beam method.
Selects text from the anchor to the pointer position and deselects text
outside that range.
.IP "\fBforward-character()\fP:"
Moves the insertion cursor one character to the right.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
This action may have different behavior in a right-to-left language
environment.
.IP "\fBforward-paragraph(\fP\fIextend\fP\fB)\fP:"
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
and this action is called with no argument,
moves the insertion cursor to the first non-whitespace character
following the next blank line.
If the insertion cursor is already at the beginning of a paragraph,
moves the insertion cursor to the beginning of the next paragraph.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP and this action is
called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.br
.ne 9
.IP "\fBforward-word(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument, moves the insertion cursor to
the first whitespace character or end of line following the next
non-whitespace character.
If the insertion cursor is already at the end of a word,
moves the insertion cursor to the end of the next word.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
This action may have different behavior in a right-to-left language
environment.
.sp
.ne 3i
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBgrab-focus()\fP:"
This key binding performs the action defined in the
\fBXmNselectionArray\fP, depending on the number of multiple mouse
clicks.
The default selection array ordering is one click to move the
insertion cursor to the pointer position, two clicks to select a word, three
clicks to select a line of text, and four clicks to select all text.
A single click also deselects any selected text and sets the anchor at
the pointer position.
.IP "\fBHelp()\fP:"
Calls the callbacks for \fBXmNhelpCallback\fP if any exist.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.IP "\fBinsert-string(\fP\fIstring\fP\fB)\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Inserts \fIstring\fP at the insertion cursor.
.IP "\fBkey-select(\fP\fIdirection\fP\fB)\fP:"
If called with an argument of \fBright\fP, moves the insertion cursor
one character to the right and extends the selection.
If called with an argument of \fBleft\fP, moves the insertion cursor
one character to the left and extends the selection.
If called with no argument, extends the selection.
For other effects, see the description of shifted navigation operations
and \fBKExtend\fP in the "Keyboard Selection" section.
.IP "\fBkill-next-character()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Otherwise, kills the character following the insertion cursor and stores
the character in the cut buffer.
.sp
.ne 3i
.IP "\fBkill-next-word()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Otherwise, kills the characters following the insertion cursor to the
next space, tab or end of line character, and stores the characters in
the cut buffer.
.IP "\fBkill-previous-character()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Otherwise, kills the character of text immediately preceding the
insertion cursor and stores the character in the cut buffer.
.IP "\fBkill-previous-word()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Otherwise, kills the characters preceding the insertion cursor to the
next space, tab or beginning of line character, and stores the
characters in the cut buffer.
.IP "\fBkill-selection()\fP:"
Kills the currently selected text and stores the text in the cut buffer.
.IP "\fBkill-to-end-of-line()\fP:"
Kills the characters following the insertion cursor to the next
end of line character and stores the characters in the cut buffer.
.IP "\fBkill-to-start-of-line()\fP:"
Kills the characters preceding the insertion cursor to the next
beginning of line character and stores the characters in the cut buffer.
.br
.ne 7
.IP "\fBmove-destination()\fP:"
Moves the insertion cursor to the pointer position without changing any
existing selection.
If no selection exists, also moves the destination cursor to the pointer
position.
.IP "\fBmove-to()\fP:"
If a secondary selection exists, cuts the secondary selection to the
insertion cursor.
If no secondary selection exists, cuts the primary selection to the
pointer location.
.sp
.ne 3i
.IP "\fBnewline()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Inserts a newline at the insertion cursor.
.IP "\fBnewline-and-backup()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Inserts a newline and repositions the insertion cursor to the end of the
line before the newline.
.IP "\fBnewline-and-indent()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Inserts a newline and then the same number of whitespace characters as
at the beginning of the previous line.
.IP "\fBnext-line()\fP:"
Moves the insertion cursor to the next line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBnext-page(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor forward one page.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBnext-tab-group()\fP:"
Traverses to the next tab group.
.br
.ne 8
.IP "\fBpage-left()\fP:"
Scrolls the viewing window left one page of text.
.IP "\fBpage-right()\fP:"
Scrolls the viewing window right one page of text.
.IP "\fBpaste-clipboard()\fP:"
Pastes the contents of the clipboard before the insertion cursor.
.IP "\fBprev-tab-group()\fP:"
Traverses to the previous tab group.
.sp
.ne 3i
.IP "\fBprevious-line()\fP:"
Moves the insertion cursor to the previous line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBprevious-page(\fP\fIextend\fP\fB)\fP:"
If this action is called with no argument,
moves the insertion cursor back one page.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP
If called with an argument of \fBextend\fP, moves the insertion cursor as
in the case of no argument and extends the selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section.
.IP "\fBprocess-cancel()\fP:"
Cancels the current \fBextend-adjust()\fP or \fBsecondary-adjust()\fP
operation and leaves the selection state as it was before the operation.
.IP "\fBprocess-down()\fP:"
If \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP and
\fBXmNnavigationType\fP is \fBXmNONE\fP,
traverses to the widget below the current one in the tab group.
.IP
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
moves the insertion cursor down one line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.br
.ne 8
.IP "\fBprocess-home()\fP:"
Moves the insertion cursor to the beginning of the line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBprocess-return()\fP:"
If \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP,
calls the callbacks for \fBXmNactivateCallback\fP.
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
inserts a newline.
.sp
.ne 3i
.IP "\fBprocess-shift-down()\fP:"
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
moves the insertion cursor down one line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBprocess-shift-up()\fP:"
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
moves the insertion cursor up one line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBprocess-tab()\fP:"
If \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP,
traverses to the next tab group.
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
inserts a tab.
.IP "\fBprocess-up()\fP:"
If \fBXmNeditMode\fP is \fBXmSINGLE_LINE_EDIT\fP and
\fBXmNnavigationType\fP is \fBXmNONE\fP,
traverses to the widget above the current one in the tab group.
.IP
If \fBXmNeditMode\fP is \fBXmMULTI_LINE_EDIT\fP,
moves the insertion cursor up one line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section.
.IP "\fBquick-copy-set()\fP:"
Marks the beginning of a secondary selection for use in quick copy.
.br
.ne 8
.IP "\fBquick-cut-set()\fP:"
Marks the beginning of a secondary selection for use in quick cut.
.IP "\fBredraw-display()\fP:"
Redraws the contents of the text window.
.IP "\fBscroll-one-line-down()\fP:"
Scrolls the text area down one line.
.IP "\fBscroll-one-line-up()\fP:"
Scrolls the text area up one line.
.IP "\fBsecondary-adjust()\fP:"
Extends the secondary selection to the pointer position.
.sp
.ne 3i
.IP "\fBsecondary-notify()\fP:"
Copies the secondary selection to the destination cursor.
.IP "\fBsecondary-start()\fP:"
Marks the beginning of a secondary selection.
.IP "\fBselect-adjust()\fP:"
Extends the selection.
The amount of text selected depends on the number of mouse clicks, as
specified by the \fBXmNselectionArray\fP resource.
.IP "\fBselect-all()\fP:"
Selects all text.
.IP "\fBselect-end()\fP:"
Extends the selection.
The amount of text selected depends on the number of mouse clicks, as
specified by the \fBXmNselectionArray\fP resource.
.IP "\fBselect-start()\fP:"
Marks the beginning of a new selection region.
.IP "\fBself-insert()\fP:"
If \fBXmNpendingDelete\fP is True and the cursor is inside the
selection, deletes the entire selection.
Inserts the character associated with the key pressed
at the insertion cursor.
.IP "\fBset-anchor()\fP:"
Resets the anchor point for extended selections.
Resets the destination of secondary selection actions.
.br
.ne 8
.IP "\fBset-insertion-point()\fP:"
Sets the insertion position.
.IP "\fBset-selection-hint()\fP:"
Sets the text source and location of the selection.
.IP "\fBtoggle-add-mode()\fP:"
Toggles the state of Add Mode.
.IP "\fBtraverse-home()\fP:"
Traverses to the first widget in the tab group.
.IP "\fBtraverse-next()\fP:"
Traverses to the next widget in the tab group.
.sp
.ne 4i
.IP "\fBtraverse-prev()\fP:"
Traverses to the previous widget in the tab group.
.IP "\fBunkill()\fP:"
Restores last killed text to the position of the insertion cursor.
.sp 1 \"Adds space before the SS
.SS "Additional Behavior"
This widget has the additional behavior described below:
.IP "\fB<FocusIn>\fP:"
Draws the insertion cursor and starts blinking the cursor.
.IP "\fB<FocusOut>\fP:"
Stops blinking the cursor.
.sp 1 \"Adds space before the SS
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
.SH RELATED INFORMATION
.na
\fBCore(3X)\fP,
\fBXmCreateScrolledText(3X)\fP,
\fBXmCreateText(3X)\fP,
\fBXmFontListCreate(3X)\fP, 
\fBXmPrimitive(3X)\fP,
\fBXmTextClearSelection(3X)\fP,
\fBXmTextCopy(3X)\fP,
\fBXmTextCut(3X)\fP,
\fBXmTextField(3X)\fP,
\fBXmTextGetBaseline(3X)\fP,
\fBXmTextGetEditable(3X)\fP,
\fBXmTextGetInsertionPosition(3X)\fP,
\fBXmTextGetLastPosition(3X)\fP,
\fBXmTextGetMaxLength(3X)\fP,
\fBXmTextGetSelection(3X)\fP,
\fBXmTextGetSelectionPosition(3X)\fP,
\fBXmTextGetSource(3X)\fP,
\fBXmTextGetString(3X)\fP,
\fBXmTextGetTopCharacter(3X)\fP,
\fBXmTextInsert(3X)\fP,
\fBXmTextPaste(3X)\fP,
\fBXmTextPosToXY(3X)\fP,
\fBXmTextPosition(3X)\fP,
\fBXmTextRemove(3X)\fP,
\fBXmTextReplace(3X)\fP,
\fBXmTextScroll(3X)\fP,
\fBXmTextSetAddMode(3X)\fP,
\fBXmTextSetEditable(3X)\fP,
\fBXmTextSetHighlight(3X)\fP,
\fBXmTextSetInsertionPosition(3X)\fP,
\fBXmTextSetMaxLength(3X)\fP,
\fBXmTextSetSelection(3X)\fP,
\fBXmTextSetSource(3X)\fP,
\fBXmTextSetString(3X)\fP,
\fBXmTextSetTopCharacter(3X)\fP,
\fBXmTextShowPosition(3X)\fP, and
\fBXmTextXYToPos(3X)\fP.
.ad
