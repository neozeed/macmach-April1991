


     CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))       OOOOppppeeeennnn SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn        CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))



     NNNNAAAAMMMMEEEE
          CCCCoooommmmppppoooossssiiiitttteeee ---- tttthhhheeee CCCCoooommmmppppoooossssiiiitttteeee wwwwiiiiddddggggeeeetttt ccccllllaaaassssssss....

     AAAAEEEESSSS SSSSUUUUPPPPPPPPOOOORRRRTTTT LLLLEEEEVVVVEEEELLLL
          Full-use

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee <<<<XXXXmmmm////XXXXmmmm....hhhh>>>>

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          Composite widgets are intended to be containers for other
          widgets and can have an arbitrary number of children.  Their
          responsibilities (implemented either directly by the widget
          class or indirectly by Intrinsics functions) include:

          +o  Overall management of children from creation to
             destruction.

          +o  Destruction of descendants when the composite widget is
             destroyed.

          +o  Physical arrangement (geometry management) of a
             displayable subset of managed children.

          +o  Mapping and unmapping of a subset of the managed
             children.  Instances of composite widgets need to specify
             the order in which their children are kept.  For example,
             an application may want a set of command buttons in some
             logical order grouped by function, and it may want
             buttons that represent filenames to be kept in
             alphabetical order.


        CCCCllllaaaasssssssseeeessss
          Composite inherits behavior and resources from CCCCoooorrrreeee.

          The class pointer is ccccoooommmmppppoooossssiiiitttteeeeWWWWiiiiddddggggeeeettttCCCCllllaaaassssssss.

          The class name is CCCCoooommmmppppoooossssiiiitttteeee.


        NNNNeeeewwww RRRReeeessssoooouuuurrrrcccceeeessss
          The following table defines a set of widget resources used
          by the programmer to specify data.  The programmer can also
          set the resource values for the inherited classes to set
          attributes for this widget.  To reference a resource by name
          or by class in a .Xdefaults file, remove the XXXXmmmmNNNN or XXXXmmmmCCCC
          prefix and use the remaining letters.  To specify one of the
          defined values for a resource in a .Xdefaults file, remove
          the XXXXmmmm prefix and use the remaining letters (in either
          lowercase or uppercase, but include any underscores between
          words).  The codes in the access column indicate if the



     Page 1                                           (printed 1/9/91)






     CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))       OOOOppppeeeennnn SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn        CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))



          given resource can be set at creation time (CCCC), set by using
          XXXXttttSSSSeeeettttVVVVaaaalllluuuueeeessss (SSSS), retrieved by using XXXXttttGGGGeeeettttVVVVaaaalllluuuueeeessss (GGGG), or is
          not applicable (NNNN////AAAA).

                            CCCCoooommmmppppoooossssiiiitttteeee RRRReeeessssoooouuuurrrrcccceeee SSSSeeeetttt
     NNNNaaaammmmeeee                CCCCllllaaaassssssss               TTTTyyyyppppeeee         DDDDeeeeffffaaaauuuulllltttt   AAAAcccccccceeeessssssss
     _____________________________________________________________________
     XmNchildren         XmCReadOnly         WidgetList   NULL      G
     XmNinsertPosition   XmCInsertPosition   (*)()        NULL      CSG
     XmNnumChildren      XmCReadOnly         Cardinal     0         G


          XXXXmmmmNNNNcccchhhhiiiillllddddrrrreeeennnn
               A read-only list of the children of the widget.

          XXXXmmmmNNNNiiiinnnnsssseeeerrrrttttPPPPoooossssiiiittttiiiioooonnnn
               Points to the XXXXttttOOOOrrrrddddeeeerrrrPPPPrrrroooocccc function described below.

          XXXXmmmmNNNNnnnnuuuummmmCCCChhhhiiiillllddddrrrreeeennnn
               A read-only resource specifying the length of the list
               of children in XXXXmmmmNNNNcccchhhhiiiillllddddrrrreeeennnn.

          The following procedure pointer in a composite widget
          instance is of type XXXXttttOOOOrrrrddddeeeerrrrPPPPrrrroooocccc:


          Cardinal ((((**** XXXXttttOOOOrrrrddddeeeerrrrPPPPrrrroooocccc)))) (_w_i_d_g_e_t)
               Widget    _w;


          _w      Specifies the widget.

          Composite widgets that allow clients to order their children
          (usually homogeneous boxes) can call their widget instance's
          insert_position procedure from the class's insert_child
          procedure to determine where a new child should go in its
          children array.  Thus, a client of a composite class can
          apply different sorting criteria to widget instances of the
          class, passing in a different insert_position procedure when
          it creates each composite widget instance.

          The return value of the insert_position procedure indicates
          how many children should go before the widget.  Returning
          _z_e_r_o indicates that the widget should go before all other
          children; returning num_children indicates that it should go
          after all other children.  The default insert_position
          function returns num_children and can be overridden by a
          specific composite widget's resource list or by the argument
          list provided when the composite widget is created.

        IIIInnnnhhhheeeerrrriiiitttteeeedddd RRRReeeessssoooouuuurrrrcccceeeessss
          Composite inherits behavior and resources from the following



     Page 2                                           (printed 1/9/91)






     CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))       OOOOppppeeeennnn SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn        CCCCoooommmmppppoooossssiiiitttteeee((((3333XXXX))))



          superclass.  For a complete description of each resource,
          refer to the manual page for that superclass.

                                                   CCCCoooorrrreeee RRRReeeessssoooouuuurrrrcccceeee SSSSeeeetttt
     NNNNaaaammmmeeee                            CCCCllllaaaassssssss                           TTTTyyyyppppeeee             DDDDeeeeffffaaaauuuulllltttt                AAAAcccccccceeeessssssss
     ______________________________________________________________________________________________________________
     XmNaccelerators                 XmCAccelerators                 XtAccelerators   dynamic                CSG
     XmNancestorSensitive            XmCSensitive                    Boolean          dynamic                G
     XmNbackground                   XmCBackground                   Pixel            dynamic                CSG
     XmNbackgroundPixmap             XmCPixmap                       Pixmap           XmUNSPECIFIED_PIXMAP   CSG
     XmNborderColor                  XmCBorderColor                  Pixel            XtDefaultForeground    CSG
     XmNborderPixmap                 XmCPixmap                       Pixmap           XmUNSPECIFIED_PIXMAP   CSG
     XmNborderWidth                  XmCBorderWidth                  Dimension        1                      CSG
     XmNcolormap                     XmCColormap                     Colormap         dynamic                CG
     XmNdepth                        XmCDepth                        int              dynamic                CG
     XmNdestroyCallback              XmCCallback                     XtCallbackList   NULL                   C
     XmNheight                       XmCHeight                       Dimension        dynamic                CSG
     XmNinitialResourcesPersistent   XmCInitialResourcesPersistent   Boolean          True                   C
     XmNmappedWhenManaged            XmCMappedWhenManaged            Boolean          True                   CSG
     XmNscreen                       XmCScreen                       Screen *         dynamic                CG
     XmNsensitive                    XmCSensitive                    Boolean          True                   CSG
     XmNtranslations                 XmCTranslations                 XtTranslations   dynamic                CSG
     XmNwidth                        XmCWidth                        Dimension        dynamic                CSG
     XmNx                            XmCPosition                     Position         0                      CSG
     XmNy                            XmCPosition                     Position         0                      CSG


        TTTTrrrraaaannnnssssllllaaaattttiiiioooonnnnssss
          There are no translations for Composite.

     RRRREEEELLLLAAAATTTTEEEEDDDD IIIINNNNFFFFOOOORRRRMMMMAAAATTTTIIIIOOOONNNN
          CCCCoooorrrreeee((((3333XXXX)))).























     Page 3                                           (printed 1/9/91)



