.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
.tm \\n%:\\$1:\\$2:\\$3
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de PN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XrmInitialize 3X11 "Release 4" "X Version 11" 
.SH NAME
XrmInitialize, XrmParseCommand, XrmValue, XrmOptionKind, XrmOptionDescRec 
\- initialize the Resource Manager, Resource Manager structures,
and parse the command line
.SH SYNTAX
void XrmInitialize\^(\|);
.LP
void XrmParseCommand\^(\^\fIdatabase\fP\^, \^\fItable\fP\^, \^\fItable_count\fP\^, \
\^\fIname\fP\^, \^\fIargc_in_out\fP\^, \^\fIargv_in_out\fP\^,)
.br
      XrmDatabase *\fIdatabase\fP\^;
.br
      XrmOptionDescList \fItable\fP\^;
.br
      int \fItable_count\fP\^;
.br
      char *\fIname\fP\^;
.br
      int *\fIargc_in_out\fP\^;
.br
      char **\fIargv_in_out\fP\^;
.SH ARGUMENTS
.IP \fIargc_in_out\fP 1i
Specifies the number of arguments and returns the number of remaining arguments.
.IP \fIargv_in_out\fP 1i
Specifies a pointer to the command line arguments
and returns the remaining arguments.
.IP \fIdatabase\fP 1i
Specifies the resource database.
.\" $Header: parname.a,v 1.1 88/02/26 10:30:16 mento Exp $
.IP \fIname\fP 1i
Specifies the application name.
.IP \fItable\fP 1i
Specifies the table of command line arguments to be parsed.
.IP \fItable_count\fP 1i
Specifies the number of entries in the table.
.SH DESCRIPTION
The
.PN XrmInitialize
function initialize the resource manager.
.LP
.\" $Header: XrmParse.d,v 1.7 88/08/20 10:49:05 mento Exp $
The
.PN XrmParseCommand
function parses an (argc, argv) pair according to the specified option table,
loads recognized options into the specified database with type ``String,''
and modifies the (argc, argv) pair to remove all recognized options.
.LP
The specified table is used to parse the command line.
Recognized entries in the table are removed from argv,
and entries are made in the specified resource database.
The table entries contain information on the option string,
the option name, the style of option, 
and a value to provide if the option kind is 
.PN XrmoptionNoArg .
The argc argument specifies the number of arguments in argv
and is set to the remaining number of arguments that were not parsed.
The name argument should be the name of your application
for use in building the database entry.
The name argument is prefixed to the resourceName in the option table
before storing the specification.
No separating (binding) character is inserted.
The table must contain either a period (.) or an asterisk (*)
as the first character in each resourceName entry.
To specify a more completely qualified resource name,
the resourceName entry can contain multiple components.
.SH STRUCTURES
The
.PN XrmValue ,
.PN XrmOptionKind ,
and
.PN XrmOptionDescRec
structures contain:
.LP
.Ds 0
.TA .5i 3i
.ta .5i 3i
typedef struct {
	unsigned int size;
	caddr_t addr;
} XrmValue, *XrmValuePtr;
.De
.LP
.Ds 0
.TA .5i 2.5i
.ta .5i 2.5i
typedef enum {
	XrmoptionNoArg,	/* Value is specified in XrmOptionDescRec.value */
	XrmoptionIsArg,	/* Value is the option string itself */
	XrmoptionStickyArg,	/* Value is characters immediately following option */
	XrmoptionSepArg,	/* Value is next argument in argv */
	XrmoptionResArg,	/* Resource and value in next argument in argv */
	XrmoptionSkipArg,	/* Ignore this option and the next argument in argv */
	XrmoptionSkipLine,	/* Ignore this option and the rest of argv */
	XrmoptionSkipNArgs	/* Ignore this option and the next
		\ \ \ XrmOptionDescRec.value arguments in argv */
} XrmOptionKind;
.De
.LP
.Ds 0
.TA .5i 2.5i
.ta .5i 2.5i
typedef struct {
	char *option;	/* Option specification string in argv		    */
	char *specifier;	/* Binding and resource name (sans application name)    */
	XrmOptionKind argKind;	/* Which style of option it is	    */
	caddr_t value;	/* Value to provide if XrmoptionNoArg or 
		\ \ \ XrmoptionSkipNArgs   */
} XrmOptionDescRec, *XrmOptionDescList;
.De
.SH "SEE ALSO"
XrmGetResource(3X11),
XrmMergeDatabases(3X11),
XrmPutResource(3X11),
XrmUniqueQuark(3X11)
.br
\fI\*(xL\fP
