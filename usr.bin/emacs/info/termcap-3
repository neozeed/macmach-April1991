Info file: termcap,    -*-Text-*-
produced by texinfo-format-buffer
from file: termcap.texinfo

This file documents the termcap library of the GNU system.

Copyright (C) 1988 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.




File: termcap  Node: Cursor Visibility, Prev: Underlining, Up: Capabilities, Next: Bell

Cursor Visibility
=================

Some terminals have the ability to make the cursor invisible, or to enhance
it.  Enhancing the cursor is often done by programs that plan to use the
cursor to indicate to the user a position of interest that may be anywhere
on the screen---for example, the Emacs editor enhances the cursor on entry.
Such programs should always restore the cursor to normal on exit.

`vs'
     String of commands to enhance the cursor.

`vi'
     String of commands to make the cursor invisible.

`ve'
     String of commands to return the cursor to normal.

If you define either `vs' or `vi', you must also define `ve'.


File: termcap  Node: Bell, Prev: Cursor Visibility, Up: Capabilities, Next: Keypad

Bell
====

Here we describe commands to make the terminal ask for the user to pay
attention to it.

`bl'
     String of commands to cause the terminal to make an audible sound.  If
     this capability is absent, the terminal has no way to make a suitable
     sound.

`vb'
     String of commands to cause the screen to flash to attract attention
     ("visible bell").  If this capability is absent, the terminal has no
     way to do such a thing.


File: termcap  Node: Keypad, Prev: Bell, Up: Capabilities, Next: Meta Key

Keypad and Function Keys
========================

Many terminals have arrow and function keys that transmit specific
character sequences to the computer.  Since the precise sequences used
depend on the terminal, termcap defines capabilities used to say what the
sequences are.  Unlike most termcap string-valued capabilities, these are
not strings of commands to be sent to the terminal, rather strings that
are received from the terminal.

Programs that expect to use keypad keys should check, initially, for a
`ks' capability and send it, to make the keypad actually transmit.
Such programs should also send the `ke' string when exiting.

`ks'
     String of commands to make the function keys transmit.  If this
     capability is not provided, but the others in this section are,
     programs may assume that the function keys always transmit.

`ke'
     String of commands to make the function keys work locally.  This
     capability is provided only if `ks' is.

`kl'
     String of input characters sent by typing the left-arrow key.  If this
     capability is missing, you cannot expect the terminal to have a
     left-arrow key that transmits anything to the computer.

`kr'
     String of input characters sent by typing the right-arrow key.

`ku'
     String of input characters sent by typing the up-arrow key.

`kd'
     String of input characters sent by typing the down-arrow key.

`kh'
     String of input characters sent by typing the "home-position" key.

`K1' ... `K5'
     Strings of input characters sent by the five other keys in a 3-by-3
     array that includes the arrow keys, if the keyboard has such a 3-by-3
     array.  Note that one of these keys may be the "home-position" key,
     in which case one of these capabilities will have the same value as
     the `kh' key.

`k0'
     String of input characters sent by function key 10 (or 0, if the terminal
     has one labeled 0).

`k1' ... `k9'
     Strings of input characters sent by function keys 1 through 9,
     provided for those function keys that exist.

`kn'
     Number: the number of numbered function keys, if there are more than
     10.

`l0' ... `l9'
     Strings which are the labels appearing on the keyboard on the keys
     described by the capabilities `k0' ... `l9'.  These capabilities
     should be left undefined if the labels are `f0' or `f10' and `f1'
     ... `f9'.

`kH'
     String of input characters sent by the "home down" key, if there is
     one.

`kb'
     String of input characters sent by the "backspace" key, if there is
     one.

`ka'
     String of input characters sent by the "clear all tabs" key, if there
     is one.

`kt'
     String of input characters sent by the "clear tab stop this column"
     key, if there is one.

`kC'
     String of input characters sent by the "clear screen" key, if there is
     one.

`kD'
     String of input characters sent by the "delete character" key, if
     there is one.

`kL'
     String of input characters sent by the "delete line" key, if there is
     one.

`kM'
     String of input characters sent by the "exit insert mode" key, if
     there is one.

`kE'
     String of input characters sent by the "clear to end of line" key, if
     there is one.

`kS'
     String of input characters sent by the "clear to end of screen" key,
     if there is one.

`kI'
     String of input characters sent by the "insert character" or "enter
     insert mode" key, if there is one.

`kA'
     String of input characters sent by the "insert line" key, if there is
     one.

`kN'
     String of input characters sent by the "next page" key, if there is
     one.

`kP'
     String of input characters sent by the "previous page" key, if there is
     one.

`kF'
     String of input characters sent by the "scroll forward" key, if there
     is one.

`kR'
     String of input characters sent by the "scroll reverse" key, if there
     is one.

`kT'
     String of input characters sent by the "set tab stop in this column"
     key, if there is one.

`ko'
     String listing the other function keys the terminal has.  This is a
     very obsolete way of describing the same information found in the
     `kH' ... `kT' keys.  The string contains a list of two-character
     termcap capability names, separated by commas.  The meaning is that
     for each capability name listed, the terminal has a key which sends
     the string which is the value of that capability.  For example, the
     value `:ko=cl,ll,sf,sr:' says that the terminal has four function
     keys which mean "clear screen", "home down", "scroll forward" and
     "scroll reverse".


File: termcap  Node: Meta Key, Prev: Keypad, Up: Capabilities, Next: Initialization

Meta Key
========

A Meta key is a key on the keyboard that modifies each character you type
by controlling the 0200 bit.  This bit is on if and only if the Meta key is
held down when the character is typed.  Characters typed using the Meta key
are called Meta characters.  Emacs uses Meta characters as editing
commands.

`km'
     Flag whose presence means that the terminal has a Meta key.

`mm'
     String of commands to enable the functioning of the Meta key.

`mo'
     String of commands to disable the functioning of the Meta key.

If the terminal has `km' but does not have `mm' and `mo', it
means that the Meta key always functions.  If it has `mm' and
`mo', it means that the Meta key can be turned on or off.  Send the
`mm' string to turn it on, and the `mo' string to turn it off.
I do not know why one would ever not want it to be on.


File: termcap  Node: Initialization, Prev: Meta Key, Up: Capabilities, Next: Pad Specs

Initialization
==============

`ti'
     String of commands to put the terminal into whatever special modes are
     needed or appropriate for programs that move the cursor
     nonsequentially around the screen.  Programs that use termcap to do
     full-screen display should output this string when they start up.

`te'
     String of commands to undo what is done by the `ti' string.
     Programs that output the `ti' string on entry should output this
     string when they exit.

`is'
     String of commands to initialize the terminal for each login session.

`if'
     String which is the name of a file containing the string of commands
     to initialize the terminal for each session of use.  Normally `is'
     and `if' are not both used.

`i1'
`i3'
     Two more strings of commands to initialize the terminal for each login
     session.  The `i1' string (if defined) is output before `is'
     or `if', and the `i3' string (if defined) is output after.

     The reason for having three separate initialization strings is to make
     it easier to define a group of related terminal types with slightly
     different initializations.  Define two or three of the strings in the
     basic type; then the other types can override one or two of the
     strings.

`rs'
     String of commands to reset the terminal from any strange mode it may
     be in.  Normally this includes the `is' string (or other commands
     with the same effects) and more.  What would go in the `rs'
     string but not in the `is' string are annoying or slow commands
     to bring the terminal back from strange modes that nobody would
     normally use.

`it'
     Numeric value, the initial spacing between hardware tab stop columns
     when the terminal is powered up.  Programs to initialize the terminal
     can use this to decide whether there is a need to set the tab stops.
     If the initial width is 8, well and good; if it is not 8, then the
     tab stops should be set; if they cannot be set, the kernel is told
     to convert tabs to spaces, and other programs will observe this and do
     likewise.

`ct'
     String of commands to clear all tab stops.

`st'
     String of commands to set tab stop at current cursor column on all
     lines.


File: termcap  Node: Pad Specs, Prev: Initialization, Up: Capabilities, Next: Status Line

Padding Capabilities
====================

There are two terminal capabilities that exist just to explain the proper
way to obey the padding specifications in all the command string
capabilities.  One, `pc', must be obeyed by all termcap-using
programs.

`pb'
     Numeric value, the lowest baud rate at which padding is actually
     needed.  Programs may check this and refrain from doing any padding at
     lower speeds.

`pc'
     String of commands for padding.  The first character of this string is
     to be used as the pad character, instead of using null characters for
     padding.  If `pc' is not provided, use null characters.  Every
     program that uses termcap must look up this capability and use it to
     set the variable `PC' that is used by `tputs'.
     *Note Padding::.

Some termcap capabilities exist just to specify the amount of padding that
the kernel should give to cursor motion commands used in ordinary
sequential output.

`dC'
     Numeric value, the number of msec of padding needed for the
     carriage-return character.

`dN'
     Numeric value, the number of msec of padding needed for the newline
     (linefeed) character.

`dB'
     Numeric value, the number of msec of padding needed for the backspace
     character.

`dF'
     Numeric value, the number of msec of padding needed for the formfeed
     character.

`dT'
     Numeric value, the number of msec of padding needed for the tab
     character.

In some systems, the kernel uses the above capabilities; in other systems,
the kernel uses the paddings specified in the string capabilities
`cr', `sf', `le', `ff' and `ta'.  Descriptions of
terminals which require such padding should contain the `dC' ...
`dT' capabilities and also specify the appropriate padding in the
corresponding string capabilities.  Since no modern terminals require
padding for ordinary sequential output, you probably won't need to do
either of these things.


File: termcap  Node: Status Line, Prev: Pad Specs, Up: Capabilities, Next: Half-Line

Status Line
===========

A "status line" is a line on the terminal that is not used for ordinary
display output but instead used for a special message.  The intended use is
for a continuously updated description of what the user's program is doing,
and that is where the name "status line" comes from, but in fact it could
be used for anything.  The distinguishing characteristic of a status line
is that ordinary output to the terminal does not affect it; it changes only
if the special status line commands of this section are used.

`hs'
     Flag whose presence means that the terminal has a status line.  If a
     terminal description specifies that there is a status line, it must
     provide the `ts' and `fs' capabilities.

`ts'
     String of commands to move the terminal cursor into the status line.
     Usually these commands must specifically record the old cursor
     position for the sake of the `fs' string.

`fs'
     String of commands to move the cursor back from the status line to its
     previous position (outside the status line).

`es'
     Flag whose presence means that other display commands work while
     writing the status line.  In other words, one can clear parts of it,
     insert or delete characters, move the cursor within it using `ch'
     if there is a `ch' capability, enter and leave standout mode, and
     so on.

`ds'
     String of commands to disable the display of the status line.  This
     may be absent, if there is no way to disable the status line display.

`ws'
     Numeric value, the width of the status line.  If this capability is
     absent in a terminal that has a status line, it means the status line
     is the same width as the other lines.

     Note that the value of `ws' is sometimes as small as 8.


File: termcap  Node: Half-Line, Prev: Status Line, Up: Capabilities, Next: Printer

Half-Line Motion
================

Some terminals have commands for moving the cursor vertically by half-lines,
useful for outputting subscripts and superscripts.  Mostly it is hardcopy
terminals that have such features.

`hu'
     String of commands to move the cursor up half a line.  If the terminal
     is a display, it is your responsibility to avoid moving up past the
     top line; however, most likely the terminal that supports this is a
     hardcopy terminal and there is nothing to be concerned about.

`hd'
     String of commands to move the cursor down half a line.  If the
     terminal is a display, it is your responsibility to avoid moving down
     past the bottom line, etc.


File: termcap  Node: Printer, Prev: Half-Line, Up: Capabilities

Controlling Printers Attached to Terminals
==========================================

Some terminals have attached hardcopy printer ports.  They may be able to
copy the screen contents to the printer; they may also be able to redirect
output to the printer.  Termcap does not have anything to tell the program
whether the redirected output appears also on the screen; it does on some
terminals but not all.

`ps'
     String of commands to cause the contents of the screen to be printed.
     If it is absent, the screen contents cannot be printed.

`po'
     String of commands to redirect further output to the printer.

`pf'
     String of commands to terminate redirection of output to the printer.
     This capability must be present in the description if `po' is.

`pO'
     String of commands to redirect output to the printer for next N
     characters of output, regardless of what they are.  Redirection will
     end automatically after N characters of further output.  Until
     then, nothing that is output can end redirection, not even the
     `pf' string if there is one.  The number N should not be
     more than 255.

     One use of this capability is to send non-text byte sequences (such as
     bit-maps) to the printer.

Most terminals with printers do not support all of `ps', `po' and
`pO'; any one or two of them may be supported.  To make a program that
can send output to all kinds of printers, it is necessary to check for all
three of these capabilities, choose the most convenient of the ones that
are provided, and use it in its own appropriate fashion.


File: termcap  Node: Summary, Prev: Capabilities, Up: Top, Next: Var Index

Summary of Capability Names
***************************

Here are all the terminal capability names in alphabetical order
with a brief description of each.  For cross references to their definitions,
see the index of capability names (*Note Cap Index::).

`ae'
     String to turn off alternate character set mode.
`al'
     String to insert a blank line before the cursor.
`AL'
     String to insert N blank lines before the cursor.
`am'
     Flag: output to last column wraps cursor to next line.
`as'
     String to turn on alternate character set mode.like.
`bc'
     Very obsolete alternative name for the `le' capability.
`bl'
     String to sound the bell.
`bs'
     Obsolete flag: ASCII backspace may be used for leftward motion.
`bt'
     String to move the cursor left to the previous hardware tab stop column.
`bw'
     Flag: `le' at left margin wraps to end of previous line.
`CC'
     String to change terminal's command character.
`cd'
     String to clear the line the cursor is on, and following lines.
`ce'
     String to clear from the cursor to the end of the line.
`ch'
     String to position the cursor at column C in the same line.
`cl'
     String to clear the entire screen and put cursor at upper left corner.
`cm'
     String to position the cursor at line L, column C.
`CM'
     String to position the cursor at line L, column
     C, relative to display memory.
`co'
     Number: width of the screen.
`cr'
     String to move cursor sideways to left margin.
`cs'
     String to set the scroll region.
`cS'
     Alternate form of string to set the scroll region.
`ct'
     String to clear all tab stops.
`cv'
     String to position the cursor at line L in the same column.
`da'
     Flag: data scrolled off top of screen may be scrolled back.
`db'
     Flag: data scrolled off bottom of screen may be scrolled back.
`dB'
     Obsolete number: msec of padding needed for the backspace character.
`dc'
     String to delete one character position at the cursor.
`dC'
     Obsolete number: msec of padding needed for the carriage-return character.
`DC'
     String to delete N characters starting at the cursor.
`dF'
     Obsolete number: msec of padding needed for the formfeed character.
`dl'
     String to delete the line the cursor is on.
`DL'
     String to delete N lines starting with the cursor's line.
`dm'
     String to enter delete mode.
`dN'
     Obsolete number: msec of padding needed for the newline character.
`do'
     String to move the cursor vertically down one line.
`DO'
     String to move cursor vertically down N lines.
`ds'
     String to disable the display of the status line.
`dT'
     Obsolete number: msec of padding needed for the tab character.
`ec'
     String of commands to clear N characters at cursor.
`ed'
     String to exit delete mode.
`ei'
     String to leave insert mode.
`eo'
     Flag: output of a space can erase an overstrike.
`es'
     Flag: other display commands work while writing the status line.
`ff'
     String to advance to the next page, for a hardcopy terminal.
`fs'
     String to move the cursor back from the status line to its
     previous position (outside the status line).
`gn'
     Flag: this terminal type is generic, not real.
`hc'
     Flag: hardcopy terminal.
`hd'
     String to move the cursor down half a line.
`ho'
     String to position cursor at upper left corner.
`hs'
     Flag: the terminal has a status line.
`hu'
     String to move the cursor up half a line.
`hz'
     Flag: terminal cannot accept `~' as output.
`i1'
     String to initialize the terminal for each login session.
`i3'
     String to initialize the terminal for each login session.
`ic'
     String to insert one character position at the cursor.
`IC'
     String to insert N character positions at the cursor.
`if'
     String naming a file of commands to initialize the terminal.
`im'
     String to enter insert mode.
`in'
     Flag: outputting a space is different from moving over empty positions.
`ip'
     String to output following an inserted character in insert mode.
`is'
     String to initialize the terminal for each login session.
`it'
     Number: initial spacing between hardware tab stop columns.
`k0'
     String of input sent by function key 0 or 10.
`k1 ... k9'
     Strings of input sent by function keys 1 through 9.
`K1 ... K5'
     Strings sent by the five other keys in 3-by-3 array with arrows.
`ka'
     String of input sent by the "clear all tabs" key.
`kA'
     String of input sent by the "insert line" key.
`kb'
     String of input sent by the "backspace" key.
`kC'
     String of input sent by the "clear screen" key.
`kd'
     String of input sent by typing the down-arrow key.
`kD'
     String of input sent by the "delete character" key.
`ke'
     String to make the function keys work locally.
`kE'
     String of input sent by the "clear to end of line" key.
`kF'
     String of input sent by the "scroll forward" key.
`kh'
     String of input sent by typing the "home-position" key.
`kH'
     String of input sent by the "home down" key.
`kI'
     String of input sent by the "insert character" or "enter
     insert mode" key.
`kl'
     String of input sent by typing the left-arrow key.
`kL'
     String of input sent by the "delete line" key.
`km'
     Flag: the terminal has a Meta key.
`kM'
     String of input sent by the "exit insert mode" key.
`kn'
     Numeric value, the number of numbered function keys.
`kN'
     String of input sent by the "next page" key.
`ko'
     Very obsolete string listing the terminal's named function keys.
`kP'
     String of input sent by the "previous page" key.
`kr'
     String of input sent by typing the right-arrow key.
`kR'
     String of input sent by the "scroll reverse" key.
`ks'
     String to make the function keys transmit.
`kS'
     String of input sent by the "clear to end of screen" key.
`kt'
     String of input sent by the "clear tab stop this column" key.
`kT'
     String of input sent by the "set tab stop in this column" key.
`ku'
     String of input sent by typing the up-arrow key.
`l0'
     String on keyboard labelling function key 0 or 10.
`l1 ... l9'
     Strings on keyboard labelling function keys 1 through 9.
`le'
     String to move the cursor left one column.
`LE'
     String to move cursor left N columns.
`li'
     Number: height of the screen.
`ll'
     String to position cursor at lower left corner.
`lm'
     Number: lines of display memory.
`mb'
     String to enter blinking mode.
`md'
     String to enter double-bright mode.
`me'
     String to turn off all appearance modes
`mh'
     String to enter half-bright mode.
`mi'
     Flag: cursor motion in insert mode is safe.
`mk'
     String to enter invisible mode.
`mm'
     String to enable the functioning of the Meta key.
`mo'
     String to disable the functioning of the Meta key.
`mp'
     String to enter protected mode.
`mr'
     String to enter reverse-video mode.
`ms'
     Flag: cursor motion in standout mode is safe.
`nc'
     Obsolete flag: do not use ASCII carriage-return on this terminal.
`nd'
     String to move the cursor right one column.
`nl'
     Obsolete alternative name for the `do' and `sf' capabilities.
`ns'
     Flag: the terminal does not normally scroll for sequential output.
`nw'
     String to move to start of next line, possibly clearing rest of old line.
`os'
     Flag: terminal can overstrike.
`pb'
     Number: the lowest baud rate at which padding is actually needed.
`pc'
     String containing character for padding.
`pf'
     String to terminate redirection of output to the printer.
`po'
     String to redirect further output to the printer.
`pO'
     String to redirect N characters ofoutput to the printer.
`ps'
     String to print the screen on the attached printer.
`rc'
     String to move to last saved cursor position.
`RI'
     String to move cursor right N columns.
`rp'
     String to output character C repeated N times.
`rs'
     String to reset the terminal from any strange modes.
`sa'
     String to turn on an arbitrary combination of appearance modes.
`sc'
     String to save the current cursor position.
`se'
     String to leave standout mode.
`sf'
     String to scroll the screen one line up.
`SF'
     String to scroll the screen N lines up.
`sg'
     Number: width of magic standout cookie.  Absent if magic cookies are
     not used.
`so'
     String to enter standout mode.
`sr'
     String to scroll the screen one line down.
`SR'
     String to scroll the screen N line down.
`st'
     String to set tab stop at current cursor column on all lines.
     programs.
`ta'
     String to move the cursor right to the next hardware tab stop column.
`te'
     String to return terminal to settings for sequential output.
`ti'
     String to initialize terminal for random cursor motion.
`ts'
     String to move the terminal cursor into the status line.
`uc'
     String to underline one character and move cursor right.
`ue'
     String to turn off underline mode
`ug'
     Number: width of underlining magic cookie.  Absent if underlining
     doesn't use magic cookies.
`ul'
     Flag: underline by overstriking with an underscore.
`up'
     String to move the cursor vertically up one line.
`UP'
     String to move cursor vertically up N lines.
`us'
     String to turn on underline mode
`vb'
     String to make the screen flash.
`ve'
     String to return the cursor to normal.
`vi'
     String to make the cursor invisible.
`vs'
     String to enhance the cursor.
`wi'
     String to set the terminal output screen window.
`ws'
     Number: the width of the status line.
`xb'
     Flag: superbee terminal.
`xn'
     Flag: cursor wraps in a strange way.
`xs'
     Flag: clearing a line is the only way to clear the appearance modes of
     positions in that line (or, only way to remove magic cookies on that
     line).
`xt'
     Flag: Teleray 1061; several strange characteristics.


File: termcap  Node: Var Index, Prev: Summary, Up: Top, Next: Cap Index

Variable and Function Index
***************************


* Menu:

sort: read error on stdin: Bad file number


File: termcap  Node: Cap Index, Prev: Var Index, Up: Top, Next: Index

Capability Index
****************


* Menu:

sort: read error on stdin: Bad file number


File: termcap  Node: Index, Prev: Cap Index, Up: Top

Concept Index
*************


* Menu:

sort: read error on stdin: Bad file number


