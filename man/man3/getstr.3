.\"
.\" $Id: getstr.3,v 1.3 89/12/26 11:18:28 bww Exp $
.\"
.\" HISTORY
.\" $Log:	getstr.3,v $
.\" Revision 1.3  89/12/26  11:18:28  bww
.\" 	Revised for 2.6 MSD release.
.\" 	[89/12/25            bww]
.\" 
.\" 13-Nov-86  Andi Swimmer (andi) at Carnegie-Mellon University
.\"	Revised for 4.3.
.\"
.\" 23-Oct-82  Steven Shafer (sas) at Carnegie-Mellon University
.\"	Error or EOF on standard input now causes default value to be used.
.\"
.\" 22-Oct-81  Fil Alleva (faa) at Carnegie-Mellon University
.\"	getstr now passes on error return from gets(3).
.\"
.\" 23-Jan-80  Steven Shafer (sas) at Carnegie-Mellon University
.\"	getsearch added.
.\"
.\" 05-Dec-79  Steven Shafer (sas) at Carnegie-Mellon University
.\"	Created.
.\"
.TH GETSTR 3 10/23/82
.CM 3
.SH "NAME"
getstr, getstab, getsearch \- ask user to type a string
.SH "SYNOPSIS"
.B
#include <stdio.h>
.sp
.B
char *getstr (prompt,defalt,answer);
.br
.B
char *prompt,*defalt,*answer;
.sp
.B
int getstab (prompt,table,defalt);
.br
.B
int getsearch (prompt,table,defalt);
.br
.B
char *prompt,**table,*defalt;
.SH "DESCRIPTION"
.I
Getstr
will print
.I
prompt
as a message to the user, and ask for the user to type an
input string.
The string is then copied into
.I
answer.
If the user types just a carriage return, then the string
.I
defalt
is copied into
.I
answer.
.I
Answer
and
.I
defalt
may be the same string; in this case, the default value will
be the original contents of
.I
answer.
.sp
.I
Getstab
will print
.I
prompt
as a message to the user, and ask for an input string.
The string typed will be sought within the string table
.I
table,
and, if found, the index of this string will be returned.
If the user types just a carriage return, then the string
.I
defalt
will be assumed.
If nothing in the table matches the
input string, or if more than one string matches, then
an error message is printed and the prompt-and-response
cycle is repeated.
The string table may be declared this way:
.nf
.sp
	char *table[] = {
		"first string",
		"second string",
		...
		"n-th string",
		0};
.fi
.sp
.I
Getsearch
is just like
.I
getstab,
but performs a heuristic test for the quality of each string match,
and returns the index of the best match.
If the match is not exact,
the user is asked to approve or disapprove the choice of the
matching string; if he disapproves, several other closely matching
choices are listed.
.SH "SEE ALSO"
.IR stablk (3), 
.IR stlmatch (3), 
.IR getint (3), 
.IR getbool (3), 
etc.
.br
.IR strarg (3), 
.IR stabarg (3)
.br
.IR srchscore (3), 
.IR stabsearch (3), 
.IR searcharg (3)
