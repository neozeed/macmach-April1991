.\"
.\" $Id: run.3,v 1.4 90/02/02 11:42:19 bww Exp $
.\"
.\" HISTORY
.\" $Log:	run.3,v $
.\" Revision 1.4  90/02/02  11:42:19  bww
.\" 	Update to describe runc() and friends.
.\" 	From "[90/02/01  15:51:37  mja]" at CMU.
.\" 	[90/02/02            bww]
.\" 
.\" Revision 1.3  89/12/26  11:21:27  bww
.\" 	Revised for 2.6 MSD release.
.\" 	[89/12/25            bww]
.\" 
.\" 13-Nov-86  Andi Swimmer (andi) at Carnegie-Mellon University
.\"	Revised for 4.3.
.\"
.\" 15-Jul-82  Neal Friedman (naf) at Carnegie-Mellon University
.\"	Mentioned -1 return for vfork() failure.
.\"
.\" 28-Jan-80  Steven Shafer (sas) at Carnegie-Mellon University
.\"	Added setuid and setgid feature, so that run may be used
.\"	by privileged programs (e.g. post) to execute programs
.\"	which allow users to fork shells (e.g. text editors).
.\"
.\" 21-Jan-80  Steven Shafer (sas) at Carnegie-Mellon University
.\"	Changed fork() to vfork().  This wins speed if run
.\"	(etc.) is called from inside a very large program.
.\"
.\" 05-Dec-79  Steven Shafer (sas) at Carnegie-Mellon University
.\"	Created.
.\"
.TH RUN 3 2/1/90
.CM 4
.SH NAME
run, runv, runp, runvp, runc, runcv, runcp, runcvp \- execute process and wait for it
.SH SYNOPSIS
.B
int run (file,arg0,arg1,arg2,...,argn,0);
.br
.B
int runv (file,arglist);
.br
.B
int runp (file,arg0,arg1,arg2,...,argn,0);
.br
.B
int runvp (file,arglist);
.br
.B 
char *file,*arg1,*arg2,...,*argn,**arglist;
.sp
int runc (func,file,arg0,arg1,arg2,...,argn,0);
.br
.B 
int runcv (func,file,arglist);
.br
.B 
int runcp (func,file,arg0,arg1,arg2,...,argn,0);
.br
.B 
int runcvp (func,file,arglist);
.br
.B 
int (*func)();
.br
.B 
char *file,*arg1,*arg2,...,*argn,**arglist;
.B 
.SH DESCRIPTION
.I
Run
and
.I
runv
have argument lists identical to the corresponding
functions,
.IR execl (2)
and
.IR execp (2).
The run routines perform a
.IR vfork (2),
then:
.TP
In the new process:
.IR setgid (2)
and
.IR setuid (2)
are used to ensure that privileges unique to the parent do not
propagate to the child.
An
.I
execl
or
.I
execv
is then performed with the specified arguments.
The process returns
with a \-1 code if the
.I
exec
was not successful.
.TP
In the parent process:
the signals
.I
SIGQUIT
(see
.IR signal (2))
and
.I
SIGINT
are disabled, the process
.I
waits
(see
.IR wait (2))
until the newly forked process exits, the signals
are restored to their original status, and the
return status of the process is analyzed.
.i0
.DT
.PP
.I
Run
and
.I
runv
return \-1 if 
.IR vfork (2) 
or 
.IR exec(2) fail or the child was terminated
by a
.I
signal;
the
.I
exit
code of the process otherwise.
.sp
.I
Runp
and
.I
runvp
are identical to
.I
run
and
.I
runv,
but perform path searching for the process by using
.I
execlp
and
.I
execvp.
These routines use the PATH environment parameter
as a list of directory names separated by colons;
the executable file is sought in each directory
until it is found or all directories have been
searched.
If the file is not found, \-1 is returned.
.sp
The proper way to execute system programs is via
.I
runp
or
.I
runvp
for most purposes; for example, if you want to
move file "a" to "b", the best way to do this via
system programs is this:
.sp
.nf
.B	runp ("mv","mv","a","b",0);
.fi
.sp
Note that no directory name is needed along with the
name of the file (e.g.
.I /bin/mv 
is not necessary),
and that the program name should be both
.I
file
and
.I
arg0.
This call is similar to:
.nf
	system ("mv a b");
.fi
but is much faster to execute.
.sp
.I Runc,
.I runcp,
.I runcv,
and
.I runcvp
function analagously to their similarly named counterparts described
above.
However, they also invoke the specified function
.I func
in the context of the child process
in order to first perform any application
specific initialization
that may be needed before attempting to execute the program.
If
.I func
is null,
these routines are identical to their simpler counterparts.
.sp
The use of
.I
setgid
and
.I
setuid
means that, if the parent process gained privileges through the
use of special file mode bits (see 
.IR chmod (2)),
the child process
will not inherit these privileges.
This makes
.I
run
"safe" for system programs which require special privileges, and
usually has no effect on user programs.
.SH ENVIRONMENT
The
.B
PATH
environment parameter is used to find executable files in
.I
runp
and
.I
runvp.
If this parameter is not present, then the default value
.I
:/usr/cs/bin:/bin:/usr/bin
is used.
.SH "SEE ALSO"
.IR exec (2), 
.IR vfork (2), 
.IR signal (2), 
.IR system (3), 
.IR searchp (3)
.SH DIAGNOSTICS
These routines return \-1 if any error occurs in executing
the desired program.
If the program is executed successfully,
convention dictates that it should return 0 on normal
completion and non-zero (1, 2, etc.) if any error is
encountered.
.SH BUGS
The searching rule used by
.I
execlp
and
.I
execvp
is not the same as the rule used by
.IR searchp .
See the comments in
.IR searchp (3)
for more detailed information.
